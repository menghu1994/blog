<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>View Transition API</title>
    <link href="/blog/2025/02/Style/View%20Transitions%20API/"/>
    <url>/blog/2025/02/Style/View%20Transitions%20API/</url>
    
    <content type="html"><![CDATA[<h1 id="View-Transitions-API"><a href="#View-Transitions-API" class="headerlink" title="View Transitions API"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/View_Transition_API">View Transitions API</a></h1><blockquote><p>视图过渡 在SPA程序中 减少过度动画加载延迟</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生模板与插槽</title>
    <link href="/blog/2025/02/Javascript/Template&amp;Slot/"/>
    <url>/blog/2025/02/Javascript/Template&amp;Slot/</url>
    
    <content type="html"><![CDATA[<h1 id="Template-amp-slot"><a href="#Template-amp-slot" class="headerlink" title="Template &amp; slot"></a>Template &amp; slot</h1><blockquote><p>原生组件模板和插槽</p></blockquote><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><p>demo</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插槽 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span>默认文本<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> &gt;</span>文本<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">color</span>: red &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">my-demo</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span>文本2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">my-demo</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">my-demo</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span>文本3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>文本4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">my-demo</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">customElements.<span class="hljs-title function_">define</span>(<br><span class="hljs-string">&#x27;my-demo&#x27;</span>, <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">HTMLElement</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">super</span>()<br><span class="hljs-keyword">const</span> tempContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">content</span>;<br><br><span class="hljs-keyword">const</span> shadowRoot = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">attachShadow</span>(&#123; <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span> &#125;);<br>shadowRoot.<span class="hljs-title function_">appendChild</span>(tempContent.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>))<br>&#125;<br>&#125;<br>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mongoose</title>
    <link href="/blog/2024/09/Nodejs/MongoDB/mongoose/index/"/>
    <url>/blog/2024/09/Nodejs/MongoDB/mongoose/index/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Schema</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mongoose&#x27;</span>;<br><span class="hljs-keyword">import</span> mongoose <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mongoose&#x27;</span>;<br><br><span class="hljs-comment">// create schema</span><br><span class="hljs-keyword">const</span> blogSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-title class_">String</span>, <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span> &#125;, &#123;<br>    <span class="hljs-comment">// add shcema method</span><br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-comment">// 不要使用`() =&gt; &#123;&#125;`,会影响this绑定</span><br>        <span class="hljs-title function_">findSimilarTypes</span>(<span class="hljs-params">cb</span>) &#123;<br>            <span class="hljs-keyword">return</span> mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;Blog&#x27;</span>).<span class="hljs-title function_">find</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> &#125;, cb);<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// Add schema method with another way</span><br>blogSchema.<span class="hljs-property">methods</span>.<span class="hljs-property">findSimilarTypes</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">cb</span>) &#123;<br>    <span class="hljs-keyword">return</span>  mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;Blog&#x27;</span>).<span class="hljs-title function_">find</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> &#125;, cb);<br>&#125;<br><span class="hljs-comment">// create model</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Blog</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;Blog&#x27;</span>, blogSchema);<br><span class="hljs-comment">// save model in mongodb</span><br><span class="hljs-comment">// `_id` 创建model会自动添加_id字段</span><br><span class="hljs-keyword">const</span> bo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blog</span>();<br><span class="hljs-keyword">await</span> bo.<span class="hljs-title function_">save</span>()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Controller in nestjs</title>
    <link href="/blog/2024/09/Nodejs/NestJs/Controller/"/>
    <url>/blog/2024/09/Nodejs/NestJs/Controller/</url>
    
    <content type="html"><![CDATA[<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><h3 id="快速生成"><a href="#快速生成" class="headerlink" title="快速生成"></a>快速生成</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ nest generate controller [name]<br></code></pre></div></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><a href="https://docs.nestjs.com/controllers">基本使用</a></h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// `cats`作为路径前缀</span><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;cats&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatController</span> &#123;<br>    <span class="hljs-comment">// get http请求</span><br>    <span class="hljs-meta">@Get</span>()<br>    <span class="hljs-title function_">findAll</span>(): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;This action returns all cats&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nestjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ViewChild in Angular</title>
    <link href="/blog/2024/08/Angular/ViewChild/"/>
    <url>/blog/2024/08/Angular/ViewChild/</url>
    
    <content type="html"><![CDATA[<h1 id="ViewChild-in-Angular"><a href="#ViewChild-in-Angular" class="headerlink" title="ViewChild in Angular"></a>ViewChild in Angular</h1><blockquote><p>Use <code>Viewchild</code> in Angular to access a child Component, Director, or DOM Element </p></blockquote><h3 id="Access-directive"><a href="#Access-directive" class="headerlink" title="Access directive"></a><a href="./Directives.md">Access <code>directive</code></a></h3><a href="#">Post not found: Directives Directives</a><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>, <span class="hljs-title class_">ViewChild</span>, <span class="hljs-title class_">AfterViewInit</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">SharkDirective</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./shark.directive&#x27;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>    <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-root&#x27;</span>,<br>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,<br>    <span class="hljs-attr">styleUrls</span>: []<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AfterViewInit</span> &#123;<br>    extraCreature!: <span class="hljs-built_in">string</span>;<br><br>    <span class="hljs-meta">@ViewChild</span>(<span class="hljs-title class_">SharkDirective</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">appShark</span>(<span class="hljs-params">directive: SharkDirective</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">extraCreature</span> = directive.<span class="hljs-property">creature</span>;<br>    &#125;;<br><br>    <span class="hljs-title function_">ngAfterViewInit</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">extraCreature</span>); <span class="hljs-comment">// Dolphin</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Access-DOM-Element"><a href="#Access-DOM-Element" class="headerlink" title="Access DOM Element"></a>Access DOM Element</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> #<span class="hljs-attr">someInput</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Your favorite sea creature&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;someInput&#x27;</span>) someInput!: <span class="hljs-title class_">ElementRef</span>;<br><span class="hljs-title function_">ngAfterViewInit</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">someInput</span>.<span class="hljs-property">nativeElement</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;Whale!&#x27;</span>;<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></div></td></tr></table></figure><h3 id="Access-Child-Component"><a href="#Access-Child-Component" class="headerlink" title="Access Child Component"></a>Access Child Component</h3><p>子组件</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-child&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;p&gt;Child Component&lt;/p&gt;`</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppChildComponent</span> &#123;<br>  <span class="hljs-title function_">whoAmI</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I am a pup component!&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">mySelf</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I am a private method!,Other component can not access me&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>父组件中添加子组件(<code>AppChildComponent</code>)</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">app-child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-child</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>ViewChild</code>访问子组件,并访问其非<code>private</code>方法</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-meta">@ViewChild</span>(<span class="hljs-title class_">AppChildComponent</span>) childComp!: <span class="hljs-title class_">AppChildComponent</span>;<br><span class="hljs-title function_">ngAfterViewInit</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">childComp</span>.<span class="hljs-title function_">whoAmI</span>()); <span class="hljs-comment">// I am a pup component!</span><br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp 多语言</title>
    <link href="/blog/2024/08/uni-app/uni-app%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
    <url>/blog/2024/08/uni-app/uni-app%E5%A4%9A%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="uni-app-多语言"><a href="#uni-app-多语言" class="headerlink" title="uni-app 多语言"></a>uni-app 多语言</h2><p>在根目录创建对应的文件:(<code>vue-i18n.min.js</code>可自行搜索下载到本地)<br><code>api/locales/zh.js</code>,<br><code>api/locales/en.js</code>,<br><code>api/vue-i18n.min.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><br><span class="hljs-comment">// 根Vue页</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// i18n部分的配置</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Chinese</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/locales/zh.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">English</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/locales/en.js&#x27;</span>;<br><br><span class="hljs-comment">// VueI18n</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueI18</span>n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./api/vue-i18n.min.js&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueI18</span>n);<br><br><span class="hljs-keyword">const</span> i18n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueI18</span>n(&#123;<br>   <span class="hljs-comment">// 默认语言</span><br>   <span class="hljs-attr">locale</span>: <span class="hljs-string">&#x27;zh&#x27;</span>,<br>   <span class="hljs-comment">// 引入语言文件</span><br>   <span class="hljs-attr">messages</span>: &#123;<br>      <span class="hljs-string">&#x27;zh&#x27;</span>: <span class="hljs-title class_">Chinese</span>,<br>      <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-title class_">English</span>,<br>   &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>   ...<span class="hljs-title class_">App</span>,<br>   i18n,<br>&#125;)<br>app.$mount()<br></code></pre></div></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// zh.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-string">&quot;error&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;报错信息&quot;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue"> &lt;view&gt;&#123;&#123; $t(&#x27;error.title&#x27;) &#125;&#125;&lt;/view&gt;<br>&lt;!-- &lt;view&gt;报错信息&lt;/view&gt; --&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp 手机摄像头扫码封装</title>
    <link href="/blog/2024/08/uni-app/uni-app%E6%89%8B%E6%9C%BA%E6%91%84%E5%83%8F%E5%A4%B4%E6%89%AB%E7%A0%81%E5%B0%81%E8%A3%85/"/>
    <url>/blog/2024/08/uni-app/uni-app%E6%89%8B%E6%9C%BA%E6%91%84%E5%83%8F%E5%A4%B4%E6%89%AB%E7%A0%81%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="uniapp-手机摄像头扫码封装"><a href="#uniapp-手机摄像头扫码封装" class="headerlink" title="uniapp 手机摄像头扫码封装"></a>uniapp 手机摄像头扫码封装</h2><p>创建文件目录 <code>/utils/scan.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// scan.js</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用正则表达</title>
    <link href="/blog/2024/08/Tools/commonRegExp/"/>
    <url>/blog/2024/08/Tools/commonRegExp/</url>
    
    <content type="html"><![CDATA[<h2 id="在线验证"><a href="#在线验证" class="headerlink" title="在线验证"></a><a href="https://www.jyshare.com/front-end/854/">在线验证</a></h2><h2 id="常用正则表达"><a href="#常用正则表达" class="headerlink" title="常用正则表达"></a>常用正则表达</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// isPositiveInt(正整数)</span><br>/^([<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)?)$/.<span class="hljs-title function_">test</span>(val)<br><span class="hljs-comment">// isPositive(非负数)</span><br>/^(<span class="hljs-number">0</span>|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]*)(\.\d+)?$/.<span class="hljs-title function_">test</span>(val)<br><span class="hljs-comment">// isNaturalNumber(自然数)</span><br>/^([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)?)$/.<span class="hljs-title function_">test</span>(val)<br><span class="hljs-comment">// isNumber(数字)</span><br>/^[+-]?(<span class="hljs-number">0</span>|([<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*))(\.\d+)?$/.<span class="hljs-title function_">test</span>(val)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/blog/2024/05/Docker/index/"/>
    <url>/blog/2024/05/Docker/index/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://pythondjango.cn/python/tools/2-docker-dockerfile/">安装</a></h2><h3 id="以Ubuntu为例"><a href="#以Ubuntu为例" class="headerlink" title="以Ubuntu为例"></a>以Ubuntu为例</h3><ul><li><p>Step 1: 移除之前docker版本并更新更新 apt 包索引</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt-get remove docker docker-engine docker.io<br>sudo apt-get update<br></code></pre></div></td></tr></table></figure></li><li><p>Step 2: 安装 apt 依赖包，用于通过HTTPS来获取仓库</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common<br></code></pre></div></td></tr></table></figure></li><li><p>Step 3: 添加 Docker 的官方 GPG 密钥</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></div></td></tr></table></figure></li><li><p>Step 4: 设置docker稳定版仓库，这里使用了阿里云仓库</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br>sudo apt-get update<br></code></pre></div></td></tr></table></figure></li><li><p>Step 5: 安装免费的docker Community版本docker-ce</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt-get -y install docker-ce<br>sudo apt-get install -y docker-ce=&lt;VERSION&gt; #该命令可以选择docker-ce版本<br></code></pre></div></td></tr></table></figure></li><li><p>Step 6: 查看docker版本及运行状态</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo docker -v<br>sudo systemctl status docker<br></code></pre></div></td></tr></table></figure></li><li><p>Step 7：本步非必需。使用阿里云设置Docker镜像加速，注意下面链接请使用阿里云给自己的URL</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;  &quot;registry-mirrors&quot;: [&quot;https://ua3456xxx.mirror.aliyuncs.com&quot;] &#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="镜像地址"><a href="#镜像地址" class="headerlink" title="镜像地址"></a><a href="https://hub.docker.com/">镜像地址</a></h2><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><ul><li><p>搜索镜像：docker search + 镜像名字<br><code>$ docker search nginx</code></p></li><li><p>从registry拉取镜像：docker pull + 镜像名字:版本号<br><code>$ docker pull nginx:latest</code></p></li><li><p>从registry仓库提交镜像：docker push + 仓库名:标签<br><code>$ docker push repro1:v1.0</code></p></li><li><p>查看本地镜像: docker images<br><code>$ docker images</code></p></li><li><p>使用Dockerfile创建镜像: docker build + 目录，.代表当前目录，-t表示加标签<br><code>$ docker build -t mynginx:1.0 .</code></p></li><li><p>删除一个或多个镜像: docker rmi + 镜像1 + 镜像2<br><code>$ docker rmi mynginx:1.0 mynginx:2.0</code></p></li><li><p>删除未标记或未用过的镜像<br><code>$ docker image prune</code></p></li><li><p>删除未使用过的镜像<br><code>$ docker image prune -a</code></p></li><li><p>给镜像加标记： docker tag 镜像标签 新镜像标签名<br><code>$ docker tag mynginx:1.0 nginx1</code></p></li><li><p>把镜像保存为.tar文件: docker save 镜像 &gt; 文件<br><code>$ docker save mynginx:1.0 &gt; mynginx_v1.tar</code></p></li><li><p>从.tar文件载入镜像: docker load -i .tar文件<br><code>$ docker load -i mynginx_v1.tar</code></p></li><li><p>根据容器创建镜像：docker commit 容器名 镜像名<br><code>$ docker commit </code></p></li></ul><h2 id="Docker容器操作"><a href="#Docker容器操作" class="headerlink" title="Docker容器操作"></a>Docker容器操作</h2><ul><li><p>创建容器: docker create + 选项(-i, -t, -d, -p, -v, -e) + 镜像<br>$ docker create –name mynginx_1 -it -p 8080:80 mynginx:1.0</p></li><li><p>各选项含义</p></li><li><p>-i:以交互模式运行容器，通常与-t 同时使用；</p></li><li><p>-d:后台运行容器，并返回容器ID；</p></li><li><p>-p:端口隐射, 宿主机在前，容器在后</p></li><li><p>-P:随机映射宿主机端口</p></li><li><p>-t:为容器重新分配一个伪输入终端，通常与-i 同时使用；</p></li><li><p>-v:目录挂载</p></li><li><p>–entrypoint: 指定进入点</p></li><li><p>–restart=always: 服务重启</p></li><li><p>启动容器：docker start + 容器名<br><code>$ docker start mynginx_1</code></p></li><li><p>创建 + 运行容器: docker run + 选项 + 镜像 + 命令<br><code>$ docker run --name mynginx_1 -it -p 8080:80 mynginx:1.0</code><br><code>$ docker run -it ubuntu /bin/bash</code></p></li><li><p>查看正在运行中的容器：docker ps<br><code>$ docker ps</code></p></li><li><p>查看所有容器，包括停止运行的容器: docker ps -a<br><code>$ docker ps -a</code></p></li><li><p>停止一个正在运行的容器: docker stop 容器<br><code>$ docker stop mynginx_1</code></p></li><li><p>重启容器：docker restart + 容器名<br><code>$ docker restart mynginx_1</code></p></li><li><p>容器重命名：docker rename 老名字 新名字<br><code>$ docker rename mynginx_1 mynginx_2</code></p></li><li><p>删除一个容器：docker rm 容器名<br><code>$ docker rm mynginx_1</code></p></li><li><p>强制删除一个正在运行的容器：docker rm -f 容器名<br><code>$ docker rm -f mynginx_1</code></p></li><li><p>删除已停止运行的所有容器: docker container prune<br><code>$ docker container prune</code></p></li><li><p>拷贝文件，从容器到宿主机：docker cp 容器名:容器内路径 宿主机文件路径<br><code>$ docker cp myweb_1:/index.html index.html</code></p></li><li><p>拷贝文件，从宿主机到容器：docker cp 宿主机文件路径 容器名:容器内路径<br><code>$ docker cp index.html myweb_1:/index.html</code></p></li><li><p>进入运行的容器，执行命令: docker exec + 选项 + 容器名 + 命令 + 参数</p></li><li><p>推荐大家使用 docker exec命令，使用此命令即使exit容器终端，也不会导致容器的停止<br><code>$ docker exec -it mynginx_1 /bin/bash</code><br><code>$ docker exec -it mynginx_1 /bin/bash start.sh</code></p></li><li><p>查看容器端口映射：docker port 容器名<br><code>$ docker port mynginx_1</code></p></li><li><p>查看容器内已修改文件：docker diff 容器名<br><code>$ docker diff mynginx_1</code></p></li><li><p>查看容器日志：docker logs + 容器名<br><code>$ docker logs web</code></p></li><li><p>查看容器内运行进程：docker top + 容器名<br><code>$ docker top web</code></p></li><li><p>查看容器的底层信息：docker inspect + 容器名<br><code>$ docker inspect web</code></p></li><li><p>利用inspect命令查看容器的IP地址<br><code>$ docker inspect web | grep &quot;IPAddress&quot;</code></p></li><li><p>查看运行容器的统计数据：docker stats<br><code>$ docker stats</code></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Excel.js</title>
    <link href="/blog/2024/04/Packages/Exceljs/index/"/>
    <url>/blog/2024/04/Packages/Exceljs/index/</url>
    
    <content type="html"><![CDATA[<h1 id="Exceljs"><a href="#Exceljs" class="headerlink" title="Exceljs"></a>Exceljs</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install exceljs<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载到本地</span><br>npm install file-saver<br></code></pre></div></td></tr></table></figure><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><a href="https://juejin.cn/post/7283311629197000739#heading-0">基本概念</a></h2><h3 id="workbook"><a href="#workbook" class="headerlink" title="workbook"></a>workbook</h3><blockquote><p><code>const workbook = new ExcelJS.Workbook()</code>创建工作簿(相当于一个excel文件)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelJS</span>.<span class="hljs-title class_">Workbook</span>()<br>workbook.<span class="hljs-property">creator</span> = <span class="hljs-string">&#x27;Me&#x27;</span>;<br>workbook.<span class="hljs-property">lastModifiedBy</span> = <span class="hljs-string">&#x27;Her&#x27;</span>;<br>workbook.<span class="hljs-property">created</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1985</span>, <span class="hljs-number">8</span>, <span class="hljs-number">30</span>);<br>workbook.<span class="hljs-property">modified</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>workbook.<span class="hljs-property">lastPrinted</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2016</span>, <span class="hljs-number">9</span>, <span class="hljs-number">27</span>);<br></code></pre></div></td></tr></table></figure><h3 id="worksheet"><a href="#worksheet" class="headerlink" title="worksheet"></a>worksheet</h3><blockquote><p>每个工作簿中的单表(sheet页)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 创建带有红色标签颜色的工作表</span><br><span class="hljs-keyword">const</span> sheet = workbook.<span class="hljs-title function_">addWorksheet</span>(<span class="hljs-string">&#x27;My Sheet&#x27;</span>, &#123;<span class="hljs-attr">properties</span>:&#123;<span class="hljs-attr">tabColor</span>:&#123;<span class="hljs-attr">argb</span>:<span class="hljs-string">&#x27;FFC0000&#x27;</span>&#125;&#125;&#125;);<br><br><span class="hljs-comment">// 创建一个隐藏了网格线的工作表</span><br><span class="hljs-keyword">const</span> sheet = workbook.<span class="hljs-title function_">addWorksheet</span>(<span class="hljs-string">&#x27;My Sheet&#x27;</span>, &#123;<span class="hljs-attr">views</span>: [&#123;<span class="hljs-attr">showGridLines</span>: <span class="hljs-literal">false</span>&#125;]&#125;);<br><br><span class="hljs-comment">// 创建一个第一行和列冻结的工作表</span><br><span class="hljs-keyword">const</span> sheet = workbook.<span class="hljs-title function_">addWorksheet</span>(<span class="hljs-string">&#x27;My Sheet&#x27;</span>, &#123;<span class="hljs-attr">views</span>:[&#123;<span class="hljs-attr">xSplit</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">ySplit</span>:<span class="hljs-number">1</span>&#125;]&#125;);<br><br><span class="hljs-comment">// 使用A4设置的页面设置设置创建新工作表 - 横向</span><br><span class="hljs-keyword">const</span> worksheet =  workbook.<span class="hljs-title function_">addWorksheet</span>(<span class="hljs-string">&#x27;My Sheet&#x27;</span>, &#123;<br>  <span class="hljs-attr">pageSetup</span>:&#123;<span class="hljs-attr">paperSize</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">orientation</span>:<span class="hljs-string">&#x27;landscape&#x27;</span>&#125;<br>&#125;);<br><br><span class="hljs-comment">// 创建一个具有页眉页脚的工作表</span><br><span class="hljs-keyword">const</span> sheet = workbook.<span class="hljs-title function_">addWorksheet</span>(<span class="hljs-string">&#x27;My Sheet&#x27;</span>, &#123;<br>  <span class="hljs-attr">headerFooter</span>:&#123;<span class="hljs-attr">firstHeader</span>: <span class="hljs-string">&quot;Hello Exceljs&quot;</span>, <span class="hljs-attr">firstFooter</span>: <span class="hljs-string">&quot;Hello World&quot;</span>&#125;<br>&#125;);<br><br><span class="hljs-comment">// 创建一个冻结了第一行和第一列的工作表</span><br><span class="hljs-keyword">const</span> sheet = workbook.<span class="hljs-title function_">addWorksheet</span>(<span class="hljs-string">&#x27;My Sheet&#x27;</span>, &#123;<span class="hljs-attr">views</span>:[&#123;<span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;frozen&#x27;</span>, <span class="hljs-attr">xSplit</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">ySplit</span>:<span class="hljs-number">1</span>&#125;]&#125;);<br><br></code></pre></div></td></tr></table></figure><h3 id="columns-列"><a href="#columns-列" class="headerlink" title="columns 列"></a>columns 列</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 添加列标题并定义列键和宽度</span><br><span class="hljs-comment">// 注意：这些列结构仅是构建工作簿的方便之处，除了列宽之外，它们不会完全保留。</span><br>worksheet.<span class="hljs-property">columns</span> = [<br>  &#123; <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Id&#x27;</span>, <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">10</span> &#125;,<br>  &#123; <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">32</span> &#125;,<br>  &#123; <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;D.O.B.&#x27;</span>, <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;DOB&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">outlineLevel</span>: <span class="hljs-number">1</span> &#125;<br>];<br><br><span class="hljs-comment">// 通过键，字母和基于1的列号访问单个列</span><br><span class="hljs-keyword">const</span> idCol = worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<br><span class="hljs-keyword">const</span> nameCol = worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-string">&#x27;B&#x27;</span>);<br><span class="hljs-keyword">const</span> dobCol = worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// 设置列属性</span><br><br><span class="hljs-comment">// 注意：将覆盖 C1 单元格值</span><br>dobCol.<span class="hljs-property">header</span> = <span class="hljs-string">&#x27;Date of Birth&#x27;</span>;<br><br><span class="hljs-comment">// 注意：这将覆盖 C1:C2 单元格值</span><br>dobCol.<span class="hljs-property">header</span> = [<span class="hljs-string">&#x27;Date of Birth&#x27;</span>, <span class="hljs-string">&#x27;A.K.A. D.O.B.&#x27;</span>];<br><br><span class="hljs-comment">// 从现在开始，此列将以 “dob” 而不是 “DOB” 建立索引</span><br>dobCol.<span class="hljs-property">key</span> = <span class="hljs-string">&#x27;dob&#x27;</span>;<br><br>dobCol.<span class="hljs-property">width</span> = <span class="hljs-number">15</span>;<br><br><span class="hljs-comment">// 如果需要，隐藏列</span><br>dobCol.<span class="hljs-property">hidden</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// 为列设置大纲级别</span><br>worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-number">4</span>).<span class="hljs-property">outlineLevel</span> = <span class="hljs-number">0</span>;<br>worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-number">5</span>).<span class="hljs-property">outlineLevel</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 列支持一个只读字段，以指示基于 `OutlineLevel` 的折叠状态</span><br><span class="hljs-title function_">expect</span>(worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-number">4</span>).<span class="hljs-property">collapsed</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">equal</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-title function_">expect</span>(worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-number">5</span>).<span class="hljs-property">collapsed</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">equal</span>(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 遍历此列中的所有当前单元格</span><br>dobCol.<span class="hljs-title function_">eachCell</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">cell, rowNumber</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><br><span class="hljs-comment">// 遍历此列中的所有当前单元格，包括空单元格</span><br>dobCol.<span class="hljs-title function_">eachCell</span>(&#123; <span class="hljs-attr">includeEmpty</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">cell, rowNumber</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><br><span class="hljs-comment">// 添加一列新值</span><br>worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-number">6</span>).<span class="hljs-property">values</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">// 添加稀疏列值</span><br>worksheet.<span class="hljs-title function_">getColumn</span>(<span class="hljs-number">7</span>).<span class="hljs-property">values</span> = [,,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,,<span class="hljs-number">5</span>,,<span class="hljs-number">7</span>,,,,<span class="hljs-number">11</span>];<br><br><span class="hljs-comment">// 剪切一列或多列（右边的列向左移动）</span><br><span class="hljs-comment">// 如果定义了列属性，则会相应地对其进行切割或移动</span><br><span class="hljs-comment">// 已知问题：如果拼接导致任何合并的单元格移动，结果可能是不可预测的</span><br>worksheet.<span class="hljs-title function_">spliceColumns</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 删除一列，再插入两列。</span><br><span class="hljs-comment">// 注意：第4列及以上的列将右移1列。</span><br><span class="hljs-comment">// 另外：如果工作表中的行数多于列插入项中的值，则行将仍然被插入，就好像值存在一样。</span><br><span class="hljs-keyword">const</span> newCol3Values = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> newCol4Values = [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;four&#x27;</span>, <span class="hljs-string">&#x27;five&#x27;</span>];<br>worksheet.<span class="hljs-title function_">spliceColumns</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, newCol3Values, newCol4Values);<br><br></code></pre></div></td></tr></table></figure><h3 id="row-行"><a href="#row-行" class="headerlink" title="row 行"></a>row 行</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 获取一个行对象。如果尚不存在，则将返回一个新的空对象</span><br><span class="hljs-keyword">const</span> row = worksheet.<span class="hljs-title function_">getRow</span>(<span class="hljs-number">5</span>);<br><br><span class="hljs-comment">// Get multiple row objects. If it doesn&#x27;t already exist, new empty ones will be returned</span><br><span class="hljs-keyword">const</span> rows = worksheet.<span class="hljs-title function_">getRows</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// start, length (&gt;0, else undefined is returned)</span><br><br><span class="hljs-comment">// 获取工作表中的最后一个可编辑行（如果没有，则为 `undefined`）</span><br><span class="hljs-keyword">const</span> row = worksheet.<span class="hljs-property">lastRow</span>;<br><br><span class="hljs-comment">// 设置特定的行高</span><br>row.<span class="hljs-property">height</span> = <span class="hljs-number">42.5</span>;<br><br><span class="hljs-comment">// 隐藏行</span><br>row.<span class="hljs-property">hidden</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// 为行设置大纲级别</span><br>worksheet.<span class="hljs-title function_">getRow</span>(<span class="hljs-number">4</span>).<span class="hljs-property">outlineLevel</span> = <span class="hljs-number">0</span>;<br>worksheet.<span class="hljs-title function_">getRow</span>(<span class="hljs-number">5</span>).<span class="hljs-property">outlineLevel</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 行支持一个只读字段，以指示基于 `OutlineLevel` 的折叠状态</span><br><span class="hljs-title function_">expect</span>(worksheet.<span class="hljs-title function_">getRow</span>(<span class="hljs-number">4</span>).<span class="hljs-property">collapsed</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">equal</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-title function_">expect</span>(worksheet.<span class="hljs-title function_">getRow</span>(<span class="hljs-number">5</span>).<span class="hljs-property">collapsed</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">equal</span>(<span class="hljs-literal">true</span>);<br><br><br>row.<span class="hljs-title function_">getCell</span>(<span class="hljs-number">1</span>).<span class="hljs-property">value</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">// A5 的值设置为5</span><br>row.<span class="hljs-title function_">getCell</span>(<span class="hljs-string">&#x27;name&#x27;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;Zeb&#x27;</span>; <span class="hljs-comment">// B5 的值设置为 “Zeb” - 假设第2列仍按名称键入</span><br>row.<span class="hljs-title function_">getCell</span>(<span class="hljs-string">&#x27;C&#x27;</span>).<span class="hljs-property">value</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">// C5 的值设置为当前时间</span><br><br><span class="hljs-comment">// 获取行并作为稀疏数组返回</span><br><span class="hljs-comment">// 注意：接口更改：worksheet.getRow(4) ==&gt; worksheet.getRow(4).values</span><br>row = worksheet.<span class="hljs-title function_">getRow</span>(<span class="hljs-number">4</span>).<span class="hljs-property">values</span>;<br><span class="hljs-title function_">expect</span>(row[<span class="hljs-number">5</span>]).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;Kyle&#x27;</span>);<br><br><span class="hljs-comment">// 通过连续数组分配行值（其中数组元素 0 具有值）</span><br>row.<span class="hljs-property">values</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-title function_">expect</span>(row.<span class="hljs-title function_">getCell</span>(<span class="hljs-number">1</span>).<span class="hljs-property">value</span>).<span class="hljs-title function_">toEqual</span>(<span class="hljs-number">1</span>);<br><span class="hljs-title function_">expect</span>(row.<span class="hljs-title function_">getCell</span>(<span class="hljs-number">2</span>).<span class="hljs-property">value</span>).<span class="hljs-title function_">toEqual</span>(<span class="hljs-number">2</span>);<br><span class="hljs-title function_">expect</span>(row.<span class="hljs-title function_">getCell</span>(<span class="hljs-number">3</span>).<span class="hljs-property">value</span>).<span class="hljs-title function_">toEqual</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// 通过稀疏数组分配行值（其中数组元素 0 为 `undefined`）</span><br><span class="hljs-keyword">const</span> values = []<br>values[<span class="hljs-number">5</span>] = <span class="hljs-number">7</span>;<br>values[<span class="hljs-number">10</span>] = <span class="hljs-string">&#x27;Hello, World!&#x27;</span>;<br>row.<span class="hljs-property">values</span> = values;<br><span class="hljs-title function_">expect</span>(row.<span class="hljs-title function_">getCell</span>(<span class="hljs-number">1</span>).<span class="hljs-property">value</span>).<span class="hljs-title function_">toBeNull</span>();<br><span class="hljs-title function_">expect</span>(row.<span class="hljs-title function_">getCell</span>(<span class="hljs-number">5</span>).<span class="hljs-property">value</span>).<span class="hljs-title function_">toEqual</span>(<span class="hljs-number">7</span>);<br><span class="hljs-title function_">expect</span>(row.<span class="hljs-title function_">getCell</span>(<span class="hljs-number">10</span>).<span class="hljs-property">value</span>).<span class="hljs-title function_">toEqual</span>(<span class="hljs-string">&#x27;Hello, World!&#x27;</span>);<br><br><span class="hljs-comment">// 使用列键按对象分配行值</span><br>row.<span class="hljs-property">values</span> = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">13</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Thing 1&#x27;</span>,<br>  <span class="hljs-attr">dob</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>&#125;;<br><br><span class="hljs-comment">// 在该行下方插入一个分页符</span><br>row.<span class="hljs-title function_">addPageBreak</span>();<br><br><span class="hljs-comment">// 遍历工作表中具有值的所有行</span><br>worksheet.<span class="hljs-title function_">eachRow</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">row, rowNumber</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Row &#x27;</span> + rowNumber + <span class="hljs-string">&#x27; = &#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(row.<span class="hljs-property">values</span>));<br>&#125;);<br><br><span class="hljs-comment">// 遍历工作表中的所有行（包括空行）</span><br>worksheet.<span class="hljs-title function_">eachRow</span>(&#123; <span class="hljs-attr">includeEmpty</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">row, rowNumber</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Row &#x27;</span> + rowNumber + <span class="hljs-string">&#x27; = &#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(row.<span class="hljs-property">values</span>));<br>&#125;);<br><br><span class="hljs-comment">// 连续遍历所有非空单元格</span><br>row.<span class="hljs-title function_">eachCell</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">cell, colNumber</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Cell &#x27;</span> + colNumber + <span class="hljs-string">&#x27; = &#x27;</span> + cell.<span class="hljs-property">value</span>);<br>&#125;);<br><br><span class="hljs-comment">// 遍历一行中的所有单元格（包括空单元格）</span><br>row.<span class="hljs-title function_">eachCell</span>(&#123; <span class="hljs-attr">includeEmpty</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">cell, colNumber</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Cell &#x27;</span> + colNumber + <span class="hljs-string">&#x27; = &#x27;</span> + cell.<span class="hljs-property">value</span>);<br>&#125;);<br><br><span class="hljs-comment">// 提交给流一个完成的行</span><br>row.<span class="hljs-title function_">commit</span>();<br><br><span class="hljs-comment">// 行尺寸</span><br><span class="hljs-keyword">const</span> rowSize = row.<span class="hljs-property">cellCount</span>;<br><span class="hljs-keyword">const</span> numValues = row.<span class="hljs-property">actualCellCount</span>;<br><br></code></pre></div></td></tr></table></figure><p>添加行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Add a couple of Rows by key-value, after the last current row, using the column keys</span><br>worksheet.<span class="hljs-title function_">addRow</span>(&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>, <span class="hljs-attr">dob</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1970</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&#125;);<br>worksheet.<span class="hljs-title function_">addRow</span>(&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jane Doe&#x27;</span>, <span class="hljs-attr">dob</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1965</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>)&#125;);<br><br><span class="hljs-comment">// Add a row by contiguous Array (assign to columns A, B &amp; C)</span><br>worksheet.<span class="hljs-title function_">addRow</span>([<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Sam&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()]);<br><br><span class="hljs-comment">// Add a row by sparse Array (assign to columns A, E &amp; I)</span><br><span class="hljs-keyword">const</span> rowValues = [];<br>rowValues[<span class="hljs-number">1</span>] = <span class="hljs-number">4</span>;<br>rowValues[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;Kyle&#x27;</span>;<br>rowValues[<span class="hljs-number">9</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>worksheet.<span class="hljs-title function_">addRow</span>(rowValues);<br><br><span class="hljs-comment">// Add a row with inherited style</span><br><span class="hljs-comment">// This new row will have same style as last row</span><br><span class="hljs-comment">// And return as row object</span><br><span class="hljs-keyword">const</span> newRow = worksheet.<span class="hljs-title function_">addRow</span>(rowValues, <span class="hljs-string">&#x27;i&#x27;</span>);<br><br><span class="hljs-comment">// Add an array of rows</span><br><span class="hljs-keyword">const</span> rows = [<br>  [<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()], <span class="hljs-comment">// row by array</span><br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">6</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Barbara&#x27;</span>, <span class="hljs-attr">dob</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()&#125;<br>];<br><span class="hljs-comment">// add new rows and return them as array of row objects</span><br><span class="hljs-keyword">const</span> newRows = worksheet.<span class="hljs-title function_">addRows</span>(rows);<br><br><span class="hljs-comment">// Add an array of rows with inherited style</span><br><span class="hljs-comment">// These new rows will have same styles as last row</span><br><span class="hljs-comment">// and return them as array of row objects</span><br><span class="hljs-keyword">const</span> newRowsStyled = worksheet.<span class="hljs-title function_">addRows</span>(rows, <span class="hljs-string">&#x27;i&#x27;</span>);<br><br></code></pre></div></td></tr></table></figure><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;file-saver&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Workbook</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;exceljs&#x27;</span>;<br><br><span class="hljs-title function_">onExportBasicExcel</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelJs</span>.<span class="hljs-title class_">Workbook</span>();<br>    <span class="hljs-comment">// 添加sheet</span><br>    <span class="hljs-keyword">const</span> worksheet = workbook.<span class="hljs-title function_">addWorksheet</span>(<span class="hljs-string">&#x27;demo sheet&#x27;</span>);<br>    <span class="hljs-comment">// 设置 sheet 的默认行高</span><br>    worksheet.<span class="hljs-property">properties</span>.<span class="hljs-property">defaultRowHeight</span> = <span class="hljs-number">20</span>;<br>    <span class="hljs-comment">// 设置列</span><br>    worksheet.<span class="hljs-property">columns</span> = [<br>      &#123; <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Id&#x27;</span>, <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">10</span> &#125;,<br>      &#123; <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">32</span> &#125;,<br>      &#123; <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;D.O.B.&#x27;</span>, <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;DOB&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">outlineLevel</span>: <span class="hljs-number">1</span> &#125;<br>    ];<br><br>    <span class="hljs-comment">// 添加行</span><br>    <span class="hljs-keyword">let</span> list = [<br>    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;test1&#x27;</span>,<span class="hljs-attr">DOB</span>:<span class="hljs-string">&#x27;11&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;test2&#x27;</span>,<span class="hljs-attr">DOB</span>:<span class="hljs-string">&#x27;22&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;test3&#x27;</span>,<span class="hljs-attr">DOB</span>:<span class="hljs-string">&#x27;33&#x27;</span>&#125;<br>    ]<br>    <br>    worksheet.<span class="hljs-title function_">addRows</span>(list);<br>    <span class="hljs-comment">// 导出excel</span><br>    <span class="hljs-title function_">saveWorkbook</span>(workbook, <span class="hljs-string">&#x27;simple-demo.xlsx&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-comment">// `saveWorkbook()`是自己封装的方法，接收 workbook 和文件名来下载 excel 到本地。</span><br><span class="hljs-comment">// 下载是使用 `file-saver`库。</span><br><span class="hljs-title function_">saveWorkbook</span>(<span class="hljs-params">workbook, fileName</span>) &#123;<br>  <span class="hljs-comment">// 导出文件</span><br>  workbook.<span class="hljs-property">xlsx</span>.<span class="hljs-title function_">writeBuffer</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data], &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;);<br>    <span class="hljs-title function_">saveAs</span>(blob, fileName);<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// ^4.4</span><br><span class="hljs-title function_">saveWorkbook2</span>(<span class="hljs-params">workbook, fileName</span>) &#123;<br>workbook.<span class="hljs-property">xlsx</span>.<span class="hljs-title function_">writeFile</span>(fileName)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;已保存。&#x27;</span>);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;保存文件时出错: &#x27;</span>, error);<br>&#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Exceljs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Token和Cookie的区别</title>
    <link href="/blog/2024/04/Nodejs/Token%E5%92%8CCookie%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2024/04/Nodejs/Token%E5%92%8CCookie%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="Token和Cookie"><a href="#Token和Cookie" class="headerlink" title="Token和Cookie"></a>Token和Cookie</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ul><li>目的相同,验证用户登录状态</li></ul><h3 id="实现登录验证的方式"><a href="#实现登录验证的方式" class="headerlink" title="实现登录验证的方式"></a>实现登录验证的方式</h3><ol><li>(全后端处理)后端可以控制客户端浏览器的cookie,后端通过setCookie把登录验证字符串(token字符串,前端用不到)放到cookie中,<br>由于cookie的特性是所有的请求内容都会自动携带，所以每次发送请求时后端自动识别cookie中的信息以达到验证登录状态的作用(此种方式过期会自动退出登录)。</li><li>由后端返回token验证字符串,前端将token手动放到请求header中,后端接收请求后识别header中的token以达到验证登录状态的作用,<br>如果access token过期,前端重新发送刷新token请求(携带refresh token),如果refresh token也过期(request 401)，则退出登录,否则刷新本地access token和refresh token。</li><li>前端通过cookie存储token,每次请求自动携带cookie,后端识别cookie中的token以达到验证登录状态的作用,<br>要保持登录，前端需要解析token的过期时间，在token即将过期时发送刷新token请求。</li></ol><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ol><li><p>定义不同</p><blockquote><p>token[JSON Web Tokens (JWT)]是服务端返回一串拼接的<code>字符串</code>(由Header,Payload,Signature等组成)<br>cookie是浏览器的功能，可以存储信息，后端和前端都可以修改，即使浏览器关闭，cookie也可以保存</p></blockquote></li><li><p>实现验证的方式不同<br>后端最终都是拿到验证字符串(token)来识别登录状态,只不过是从哪儿里拿</p><blockquote><p>后端返回token字符串由前端将它手动放到每次请求中发送到后端，后端再识别token<br>后端将token设置到浏览器的cookie功能中,每次与后台交互发送请求时会自动携带，后端识别cookie中的token</p></blockquote></li></ol><h2 id="为什么后端设置cookie更方便，还会有前端处理"><a href="#为什么后端设置cookie更方便，还会有前端处理" class="headerlink" title="为什么后端设置cookie更方便，还会有前端处理"></a>为什么后端设置cookie更方便，还会有前端处理</h2><ol><li>因为cookie会自动携带,所以每次请求都会携带，包括图片，音频等内容，会增加每个请求的数据量</li><li>后端无法知道刷新token的时机</li></ol><h2 id="自动刷新机制-请求时检查token是否过期-和-access-token过期后再发送刷新token请求的区别"><a href="#自动刷新机制-请求时检查token是否过期-和-access-token过期后再发送刷新token请求的区别" class="headerlink" title="自动刷新机制 请求时检查token是否过期 和 access token过期后再发送刷新token请求的区别"></a>自动刷新机制 请求时检查token是否过期 和 <code>access token</code>过期后再发送刷新token请求的区别</h2><ol><li>应用场景不同，前端解析<code>access token</code>时可以知道过期时间，在过期前可以手动发送刷新token请求,<br>用户体验更友好，请求发送前token已自动刷新，不会出现请求失败的情况。适合需要高频率请求并且要求尽可能减少失败请求的应用场景。</li><li><code>access token</code>过期后再发送刷新token请求<br>实现简单，适合请求不频繁的管理系统等</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Methods in gsap</title>
    <link href="/blog/2024/04/Animation/GSAP/Methods/"/>
    <url>/blog/2024/04/Animation/GSAP/Methods/</url>
    
    <content type="html"><![CDATA[<ul><li><code>gsap.quickSetter()</code><blockquote><p>用于提升重复多次调用<code>gsap.set()</code>的性能, 比如单位转换、相对数值、值为函数返回值、random()的解析等;<br>大多数情况遇不到需要提升性能。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">gsap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;.flair&quot;</span>, &#123;<span class="hljs-attr">xPercent</span>: -<span class="hljs-number">50</span>, <span class="hljs-attr">yPercent</span>: -<span class="hljs-number">50</span>&#125;);<br><br><span class="hljs-keyword">let</span> xSetter = gsap.<span class="hljs-title function_">quickSetter</span>(<span class="hljs-string">&quot;.flair&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;px&quot;</span>);<br><span class="hljs-keyword">let</span> ySetter = gsap.<span class="hljs-title function_">quickSetter</span>(<span class="hljs-string">&quot;.flair&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;px&quot;</span>);<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;mousemove&quot;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">xTo</span>(xSetter.<span class="hljs-property">x</span>);<br>  <span class="hljs-title function_">yTo</span>(ySetter.<span class="hljs-property">y</span>);<br>&#125;);<br><br><span class="hljs-keyword">let</span> xTo = gsap.<span class="hljs-title function_">quickTo</span>(<span class="hljs-string">&quot;.flair&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, &#123;<span class="hljs-attr">duration</span>: <span class="hljs-number">0.6</span>, <span class="hljs-attr">ease</span>: <span class="hljs-string">&quot;power3&quot;</span>&#125;),<br>    yTo = gsap.<span class="hljs-title function_">quickTo</span>(<span class="hljs-string">&quot;.flair&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, &#123;<span class="hljs-attr">duration</span>: <span class="hljs-number">0.6</span>, <span class="hljs-attr">ease</span>: <span class="hljs-string">&quot;power3&quot;</span>&#125;);<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;mousemove&quot;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">xTo</span>(e.<span class="hljs-property">clientX</span>);<br>  <span class="hljs-title function_">yTo</span>(e.<span class="hljs-property">clientY</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure>如果需要同时设置多个属性值,可以设置第二个参数为<code>&#39;css&#39;</code>和<code>&#39;attr&#39;</code><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> boxSet = gsap.<span class="hljs-title function_">quickSetter</span>(<span class="hljs-string">&quot;#box&quot;</span>, <span class="hljs-string">&quot;css&quot;</span>);<br><span class="hljs-title function_">boxSet</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-string">&quot;+=100&quot;</span>, <span class="hljs-attr">y</span>: <span class="hljs-string">&quot;random(-100, 100)&quot;</span> &#125;)<br><br><span class="hljs-keyword">var</span> circleSet = gsap.<span class="hljs-title function_">quickSetter</span>(<span class="hljs-string">&quot;#circle&quot;</span>, <span class="hljs-string">&quot;attr&quot;</span>);<br><span class="hljs-title function_">circleSet</span>(&#123; <span class="hljs-attr">cx</span>: <span class="hljs-string">&quot;+=100&quot;</span>, <span class="hljs-attr">cy</span>: <span class="hljs-string">&quot;random(-100, 100)&quot;</span> &#125;);<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>animation</tag>
      
      <tag>gsap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Utils in gsap</title>
    <link href="/blog/2024/04/Animation/GSAP/utils/"/>
    <url>/blog/2024/04/Animation/GSAP/utils/</url>
    
    <content type="html"><![CDATA[<h2 id="gsap提供的函数"><a href="#gsap提供的函数" class="headerlink" title="gsap提供的函数"></a>gsap提供的函数</h2><ul><li><code>checkPrefix()</code><br>  添加浏览器适配前缀  <figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 会根据浏览器自动添加前缀, 如WebkitFilter,MozFilter,如果不需要适配则返回默认值filter</span><br>gsap.<span class="hljs-property">utils</span>.<span class="hljs-title function_">checkPrefix</span>(<span class="hljs-string">&quot;filter&quot;</span>);<br></code></pre></div></td></tr></table></figure></li><li><code>clamp()</code><br>  限制数字范围  <figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 限制数字在0到100之间</span><br>gsap.<span class="hljs-property">utils</span>.<span class="hljs-title function_">clamp</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, -<span class="hljs-number">12</span>) <span class="hljs-comment">// 0;</span><br></code></pre></div></td></tr></table></figure></li><li><code>distribute()</code> </li><li><code>getUnit()</code><br>  获取单位  <figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">gsap.<span class="hljs-property">utils</span>.<span class="hljs-title function_">getUnit</span>(<span class="hljs-string">&#x27;20px&#x27;</span>) <span class="hljs-comment">// px;</span><br></code></pre></div></td></tr></table></figure></li><li><code>interpolate()</code> </li><li><code>mapRange()</code> </li><li><code>normalize()</code> </li><li><code>pipe()</code> </li><li><code>random()</code> </li><li><code>selector()</code> </li><li><code>shuffle()</code> </li><li><code>snap()</code> </li><li><code>splitColor()</code> </li><li><code>toArray()</code><br>  类数组(array-like)转化为数组  <figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">gsap.<span class="hljs-property">utils</span>.<span class="hljs-title function_">toArray</span>(<span class="hljs-string">&#x27;.box&#x27;</span>) <span class="hljs-comment">// 返回Element[];</span><br></code></pre></div></td></tr></table></figure></li><li><code>unitize()</code> </li><li><code>wrap()</code> </li><li><code>wrapYoyo()</code> </li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>animation</tag>
      
      <tag>gsap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Effects in gsap</title>
    <link href="/blog/2024/04/Animation/GSAP/Effects/"/>
    <url>/blog/2024/04/Animation/GSAP/Effects/</url>
    
    <content type="html"><![CDATA[<h2 id="注册自定义动画"><a href="#注册自定义动画" class="headerlink" title="注册自定义动画"></a>注册自定义动画</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> implements <span class="hljs-title class_">OnInit</span>&#123;<br>    <span class="hljs-attr">gsapBtn</span>: <span class="hljs-title class_">Signal</span>&lt;<span class="hljs-title class_">ElementRef</span> | <span class="hljs-literal">undefined</span>&gt; = <span class="hljs-title function_">viewChild</span>(<span class="hljs-string">&#x27;gsapBtn&#x27;</span>);<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        gsap.<span class="hljs-title function_">registerEffect</span>(&#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;m-fade&#x27;</span>,<br>          <span class="hljs-attr">effect</span>: <span class="hljs-function">(<span class="hljs-params">target: Element, config: any</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> gsap.<span class="hljs-title function_">to</span>(target, &#123; <span class="hljs-attr">duration</span>: config.<span class="hljs-property">duration</span>, <span class="hljs-attr">opacity</span>: <span class="hljs-number">0</span> &#125;)<br>          &#125;,<br>          <span class="hljs-attr">defaults</span>: &#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">2</span> &#125;,<br>          <span class="hljs-comment">// 设置extendTimeline可以将其作为方法直接插入到timeline中</span><br>          <span class="hljs-attr">extendTimeline</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>    &#125;<br><br><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-keyword">void</span> &#123;<br>    gsap.<span class="hljs-property">effects</span>[<span class="hljs-string">&#x27;m-fade&#x27;</span>](<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">gsapBtn</span>()?.<span class="hljs-property">nativeElement</span>);<br><br>    <span class="hljs-keyword">const</span> tl = gsap.<span class="hljs-title function_">timeline</span>();<br>    <span class="hljs-comment">// extendTimeline: true</span><br>    tl[<span class="hljs-string">&#x27;m-fade&#x27;</span>](<span class="hljs-string">&quot;.box&quot;</span>, &#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">3</span> &#125;)<br>      [<span class="hljs-string">&#x27;m-fade&#x27;</span>](<span class="hljs-string">&quot;.box2&quot;</span>, &#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span> &#125;, <span class="hljs-string">&quot;+=2&quot;</span>)<br>      .<span class="hljs-title function_">to</span>(<span class="hljs-string">&quot;.box3&quot;</span>, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span> &#125;);<br><br>    <span class="hljs-comment">//extendTimeline: false</span><br>    tl.<span class="hljs-title function_">add</span>(<br>      gsap.<span class="hljs-property">effects</span>[<span class="hljs-string">&#x27;m-fade&#x27;</span>](<span class="hljs-string">&quot;.box&quot;</span>, &#123; <span class="hljs-attr">configProp</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;),<br>      <span class="hljs-string">&quot;+=position&quot;</span><br>    );<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="批量注册自定义动画"><a href="#批量注册自定义动画" class="headerlink" title="批量注册自定义动画"></a>批量注册自定义动画</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> gsapEffects = [<br>  &#123; <br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;fadeSlideTo&quot;</span>,  <br>    <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.5</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">300</span>, <span class="hljs-attr">yoyo</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">repeat</span>: -<span class="hljs-number">1</span> &#125;<br>  &#125;,<br>  &#123; <br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;fadeSlideFrom&quot;</span>, <br>    <span class="hljs-attr">animate</span>: <span class="hljs-string">&#x27;from&#x27;</span>,<br>    <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.25</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">300</span>, <span class="hljs-attr">yoyo</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">repeat</span>: -<span class="hljs-number">1</span>  &#125;<br>  &#125;,<br>  &#123; <br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;fadeSlideFromTo&quot;</span>, <br>    <span class="hljs-attr">animate</span>: <span class="hljs-string">&#x27;fromTo&#x27;</span>, <br>    <span class="hljs-attr">props</span>: &#123; <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.1</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">300</span>&#125;, <br>    <span class="hljs-attr">props2</span>: &#123; <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">600</span>, <span class="hljs-attr">yoyo</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">repeat</span>: -<span class="hljs-number">1</span>  &#125;<br>  &#125;<br>];<br><br>gsapEffects.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">effect</span> =&gt;</span> &#123;<br>  gsap.<span class="hljs-title function_">registerEffect</span>(&#123;<br>    <span class="hljs-attr">name</span>: effect.<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">defaults</span>: &#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span> &#125;,<br>    <span class="hljs-attr">extendTimeline</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-title function_">effect</span>(<span class="hljs-params">targets, config</span>) &#123;<br>      <span class="hljs-keyword">if</span>(effect.<span class="hljs-property">animate</span> === <span class="hljs-string">&#x27;from&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> gsap.<span class="hljs-title function_">from</span>(targets, &#123;...effect.<span class="hljs-property">props</span>,...config &#125;)<br>      &#125; <br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (effect.<span class="hljs-property">animate</span> === <span class="hljs-string">&#x27;fromTo&#x27;</span>)&#123; <br>        <span class="hljs-keyword">return</span> gsap.<span class="hljs-title function_">fromTo</span>(targets, &#123;...effect.<span class="hljs-property">props</span>,...config &#125;, &#123;...effect.<span class="hljs-property">props2</span>&#125;)<br>        &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> gsap.<span class="hljs-title function_">to</span>(targets, &#123;...effect.<span class="hljs-property">props</span>,...config &#125;)<br>      &#125;<br>    &#125;<br>  &#125;);<br>&#125;);<br><br><br><br><span class="hljs-keyword">let</span> tl = gsap.<span class="hljs-title function_">timeline</span>();<br>tl.<span class="hljs-title function_">fadeSlideTo</span>(<span class="hljs-string">&quot;.fadeSlideTo&quot;</span>)<br>  .<span class="hljs-title function_">fadeSlideFrom</span>(<span class="hljs-string">&quot;.fadeSlideFrom&quot;</span>, <span class="hljs-number">0</span>)<br>  .<span class="hljs-title function_">fadeSlideFromTo</span>(<span class="hljs-string">&quot;.fadeSlideFromTo&quot;</span>, <span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>animation</tag>
      
      <tag>gsap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Timeline in gsap</title>
    <link href="/blog/2024/04/Animation/GSAP/Timeline/"/>
    <url>/blog/2024/04/Animation/GSAP/Timeline/</url>
    
    <content type="html"><![CDATA[<h1 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h1><blockquote><p>按照顺序依次执行动画(不需要设置delay)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> tl = gsap.<span class="hljs-title function_">timeline</span>(&#123; <span class="hljs-attr">paused</span>: <span class="hljs-literal">true</span> &#125;);<br><br>tl.<span class="hljs-title function_">to</span>(<span class="hljs-string">&quot;.green&quot;</span>, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">600</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-number">3</span>); <span class="hljs-comment">// 开始执行时间是3s后</span><br>tl.<span class="hljs-title function_">to</span>(<span class="hljs-string">&quot;.purple&quot;</span>, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">600</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">delay</span>: <span class="hljs-number">1</span> &#125;, <span class="hljs-string">&quot;&lt;&quot;</span>); <span class="hljs-comment">// 开始执行时间&#x27;&lt;&#x27;, 插入到上一个动画开头</span><br>tl.<span class="hljs-title function_">to</span>(<span class="hljs-string">&quot;.orange&quot;</span>, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">600</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span> &#125;, <span class="hljs-string">&quot;+=1&quot;</span>); <span class="hljs-comment">// 上一个动画执行1s后</span><br></code></pre></div></td></tr></table></figure><h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">gsap.<span class="hljs-title function_">timeline</span>(&#123; <br><span class="hljs-attr">repeat</span>: -<span class="hljs-number">1</span>, <br><span class="hljs-attr">repeatDelay</span>: <span class="hljs-number">1</span>, <br><span class="hljs-attr">yoyo</span>: <span class="hljs-literal">true</span>, <br><span class="hljs-attr">defaults</span>: &#123;<span class="hljs-attr">duration</span>: <span class="hljs-number">1</span>&#125; <br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>animation</tag>
      
      <tag>gsap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Staggers in gsap</title>
    <link href="/blog/2024/04/Animation/GSAP/Staggers/"/>
    <url>/blog/2024/04/Animation/GSAP/Staggers/</url>
    
    <content type="html"><![CDATA[<h1 id="交错动画"><a href="#交错动画" class="headerlink" title="交错动画"></a>交错动画</h1><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">gsap.<span class="hljs-title function_">to</span>(<span class="hljs-string">&quot;.box&quot;</span>, &#123;<br>  <span class="hljs-attr">y</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">stagger</span>: <span class="hljs-number">0.1</span>, <span class="hljs-comment">// 每个.box元素动画之间都有0.1秒的间隔</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>amount: number</code> // 交错动画总时间,单个交错动画时间为<code>amount/数量</code><br><code>each: number</code>  // 单个交错动画的时间<br><code>from: string | array</code>  // ‘start’, ‘center’, ‘edges’, ‘random’, ‘end’ | [0.5, 0.5] 从中心开始动画 | 10 从第10个子元素开始<br><code>grid: array | &#39;auto&#39;</code><br><code>axis: string</code><br><code>ease: string | function</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>animation</tag>
      
      <tag>gsap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transform in gsap</title>
    <link href="/blog/2024/04/Animation/GSAP/baseTransform/"/>
    <url>/blog/2024/04/Animation/GSAP/baseTransform/</url>
    
    <content type="html"><![CDATA[<h2 id="Transform-Property"><a href="#Transform-Property" class="headerlink" title="Transform Property"></a><a href="https://gsap.com/resources/get-started">Transform Property</a></h2><table><thead><tr><th>行为</th><th>gsap</th><th>css</th></tr></thead><tbody><tr><td>—-</td><td>x: 100</td><td>transform: translateX(100px)</td></tr><tr><td>—-</td><td>y: 100</td><td>transform: translateY(100px)</td></tr><tr><td>位移百分比</td><td>xPercent: 50</td><td>transform: translateX(50%)</td></tr><tr><td>—-</td><td>yPercent: 50</td><td>transform: translateY(50%)</td></tr><tr><td>—-</td><td>scale: 2</td><td>transform: scale(2)</td></tr><tr><td>—-</td><td>scaleX: 2</td><td>transform: scaleX(2)</td></tr><tr><td>—-</td><td>scaleY: 2</td><td>transform: scaleY(2)</td></tr><tr><td>—-</td><td>rotation: 90</td><td>transform: rotate(90deg)</td></tr><tr><td>—-</td><td>rotation: “1.25rad”</td><td>Using Radians - no CSS alternative</td></tr><tr><td>斜切</td><td>skew: 30</td><td>transform: skew(30deg)</td></tr><tr><td>—-</td><td>skewX: 30</td><td>transform: skewX(30deg)</td></tr><tr><td>—-</td><td>skewY: “1.23rad”</td><td>Using Radians - no CSS alternative</td></tr><tr><td>—-</td><td>transformOrigin: “center 40%”</td><td>transform-origin: center 40%</td></tr><tr><td>—-</td><td>opacity: 0</td><td>adjust the elements opacity</td></tr><tr><td>—-</td><td>autoAlpha: 0</td><td>shorthand for opacity &amp; visibility</td></tr><tr><td>动画时长</td><td>duration: 1</td><td>animation-duration: 1s</td></tr><tr><td>无线循环</td><td>repeat: -1</td><td>animation-iteration-count: infinite</td></tr><tr><td>重复次数</td><td>repeat: 2</td><td>animation-iteration-count: 2</td></tr><tr><td>延迟播放</td><td>delay: 2</td><td>animation-delay: 2</td></tr><tr><td>往复循环</td><td>yoyo: true</td><td>animation-direction: alternate</td></tr></tbody></table><h2 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h2><p>长度</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-attr">x</span>: <span class="hljs-number">200</span> <span class="hljs-comment">// 默认为px</span><br><span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;+=200&#x27;</span> <span class="hljs-comment">// 相对数值</span><br><span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;40vw&#x27;</span>  <span class="hljs-comment">// 字符串单位自动转换</span><br><span class="hljs-attr">x</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>/<span class="hljs-number">2</span> <span class="hljs-comment">//函数返回值 </span><br></code></pre></div></td></tr></table></figure><p>角度</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-attr">rotation</span>: <span class="hljs-number">360</span> <span class="hljs-comment">// 默认为deg</span><br><span class="hljs-attr">rotation</span>: <span class="hljs-string">&#x27;1.5rad&#x27;</span> <span class="hljs-comment">// 弧度单位</span><br><span class="hljs-comment">// 不支持grad和turn</span><br></code></pre></div></td></tr></table></figure><h2 id="Ease-Animation"><a href="#Ease-Animation" class="headerlink" title="Ease Animation"></a><a href="https://gsap.com/resources/getting-started/Easing">Ease Animation</a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>animation</tag>
      
      <tag>gsap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Animation in Angular</title>
    <link href="/blog/2024/04/Angular17/animation/"/>
    <url>/blog/2024/04/Angular17/animation/</url>
    
    <content type="html"><![CDATA[<h2 id="Route-transition-animations"><a href="#Route-transition-animations" class="headerlink" title="Route transition animations"></a>Route transition animations</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Angular17</tag>
      
      <tag>animation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Signal</title>
    <link href="/blog/2024/04/Angular17/signal/"/>
    <url>/blog/2024/04/Angular17/signal/</url>
    
    <content type="html"><![CDATA[<h2 id="Signal-new-in-angular"><a href="#Signal-new-in-angular" class="headerlink" title="Signal new in angular"></a>Signal new in angular</h2><h3 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h3><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; counter() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; pxCounter() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>counter = <span class="hljs-title function_">signal</span>(<span class="hljs-number">0</span>);<br>pxCounter = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">counter</span>() + <span class="hljs-string">&#x27;px&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>pxCounter会追踪counter的变化</p><h4 id="更新赋值"><a href="#更新赋值" class="headerlink" title="更新赋值"></a>更新赋值</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; counter() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; pxCounter() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>counter = <span class="hljs-title function_">signal</span>(<span class="hljs-number">0</span>);<br>pxCounter = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">counter</span>() + <span class="hljs-string">&#x27;px&#x27;</span>)<br><br><span class="hljs-title function_">changeCount</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 赋值</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">20</span>)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CounterComponent</span> &#123;<br>  count = <span class="hljs-title function_">signal</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Tip: 我们不应该在effect中给signal赋值,会导致循环引用</span><br>    <span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>);&#125;, &#123; <span class="hljs-attr">allowSignalWrites</span>: <span class="hljs-literal">true</span>&#125;);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>清空<code>signal</code><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CounterComponent</span> &#123;<br>  count = <span class="hljs-title function_">signal</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> effectRef = <span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>);&#125;, &#123; <span class="hljs-attr">manualCleanup</span>: <span class="hljs-literal">true</span>&#125;);<br>    <span class="hljs-comment">// signal会在组件卸载是自动清空, 如果需要手动清空可以调用此方法</span><br>    effectRef.<span class="hljs-title function_">destroy</span>();<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="在组件传值中使用signal"><a href="#在组件传值中使用signal" class="headerlink" title="在组件传值中使用signal"></a>在组件传值中使用signal</h3><h4 id="在angular17中，使用input向子组件传值时会转换类型为signal"><a href="#在angular17中，使用input向子组件传值时会转换类型为signal" class="headerlink" title="在angular17中，使用input向子组件传值时会转换类型为signal"></a>在angular17中，使用<code>input</code>向子组件传值时会转换类型为<code>signal</code></h4><ul><li>使用<code>@Input</code>向子组件传值<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; val &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>@<span class="hljs-title function_">input</span>() <span class="hljs-attr">val</span>: string<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>使用input向子组件传值<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; val() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>val = input&lt;string&gt;(<span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure>使用<code>input</code>向子组件传值会自动转成<code>signal</code>, 所以<code>val</code>的类型不是<code>string</code>,而是<code>Signal&lt;string&gt;</code></li></ul><h4 id="使用-effect-代替-Onchanges"><a href="#使用-effect-代替-Onchanges" class="headerlink" title="使用 effect() 代替 Onchanges()"></a>使用 <code>effect()</code> 代替 <code>Onchanges()</code></h4><ul><li>使用<code>@Input</code>时，我们使用Onchanges() 生命周期钩子去监听父组件传值的变化<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; val &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> implements <span class="hljs-title class_">OnChanges</span>&#123;<br>@<span class="hljs-title function_">input</span>() <span class="hljs-attr">val</span>: string<br><span class="hljs-title function_">ngOnChanges</span>(<span class="hljs-attr">changes</span>: <span class="hljs-title class_">SimpleChanges</span>): <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-keyword">if</span>(changes[<span class="hljs-string">&#x27;val&#x27;</span>])&#123;<br>  <span class="hljs-comment">// dosomething..</span><br>  &#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>使用 <code>input</code><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; val() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>val = input&lt;string&gt;(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`New value: <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value()&#125;</span>`</span>);<br>  &#125;);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="input的可选参数-required-alias-transform"><a href="#input的可选参数-required-alias-transform" class="headerlink" title="input的可选参数 required, alias, transform"></a><code>input</code>的可选参数 <code>required, alias, transform</code></h4><ul><li><p><code>required</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; val() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>val = input.<span class="hljs-property">required</span>&lt;string&gt;()<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用<code>required</code>时也不需要设置默认值(因为必填所以会被替换)</p></li><li><p><code>alias</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123; <br><span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;a-comp&#x27;</span>,<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; val() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span> <br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>val = input&lt;string&gt;(<span class="hljs-string">&#x27;abc&#x27;</span>, &#123; <span class="hljs-attr">alias</span>: <span class="hljs-string">&#x27;val2&#x27;</span>&#125;)<br>&#125;<br><br>&lt;!-- 父组件 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-comp</span> [<span class="hljs-attr">val2</span>]=<span class="hljs-string">&quot;&#x27;test&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a-comp</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>使用<code>alias</code>时可以设置别名来替换父组件向子组件传递的property</p></li><li><p><code>transform</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;p&gt;&#123;&#123; val() &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">`</span><br>&#125;)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>val = input&lt;string&gt;(<span class="hljs-string">&#x27;abc&#x27;</span>, &#123; <br><span class="hljs-attr">transform</span>: <span class="hljs-function">(<span class="hljs-params">value: number</span>) =&gt;</span> value + <span class="hljs-string">&#x27;px&#x27;</span><br>&#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用<code>transform</code>时可以设置别名来替换父组件向子组件传递的property</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Angular17</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Material-Angular-Select</title>
    <link href="/blog/2024/03/Angular/Material-Angular/mat-select/"/>
    <url>/blog/2024/03/Angular/Material-Angular/mat-select/</url>
    
    <content type="html"><![CDATA[<h1 id="Material-Angular-Mat-tab-使用技巧"><a href="#Material-Angular-Mat-tab-使用技巧" class="headerlink" title="Material Angular Mat-tab 使用技巧"></a>Material Angular Mat-tab 使用技巧</h1><h3 id="mat-select-添加输入过滤框"><a href="#mat-select-添加输入过滤框" class="headerlink" title="mat-select 添加输入过滤框"></a>mat-select 添加输入过滤框</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;markingCode&quot;</span> (<span class="hljs-attr">openedChange</span>)=<span class="hljs-string">&quot;inputField.value = &#x27;&#x27;;selectedCodeList = codeList;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">autofocus</span> #<span class="hljs-attr">inputField</span> (<span class="hljs-attr">keyup</span>)=<span class="hljs-string">&quot;onKey($event, codeList, &#x27;selectedCodeList&#x27;)&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;搜索&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of selectedCodeList&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;item.key&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AComponent</span> &#123;<br>  codeList = [&#123;&#125;];<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectedCodeList</span> = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">codeList</span>];<br>  &#125;<br><br>  <span class="hljs-comment">// @Params</span><br>  <span class="hljs-comment">// originList: T[] 原始数据列表;</span><br>  <span class="hljs-comment">// temporaryListString: string 临时列表名称;</span><br>  <span class="hljs-comment">// filterField: keyof T 需要过滤的字段(显示什么字段,默认过滤name);</span><br>  onKey&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;&gt;(<span class="hljs-attr">$event</span>: <span class="hljs-built_in">any</span>, <span class="hljs-attr">originList</span>: T[], <span class="hljs-attr">temporaryListString</span>: keyof <span class="hljs-title class_">AComponent</span>,<span class="hljs-attr">filterField</span>: keyof T = <span class="hljs-string">&#x27;name&#x27;</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">this</span>[temporaryListString] = originList.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">option: T</span>) =&gt;</span> (option[filterField] || <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">includes</span>($event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">toLowerCase</span>())) <span class="hljs-keyword">as</span> <span class="hljs-built_in">never</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
      <tag>material</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Library</title>
    <link href="/blog/2024/03/Angular/Library/"/>
    <url>/blog/2024/03/Angular/Library/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义组件库"><a href="#自定义组件库" class="headerlink" title="自定义组件库"></a>自定义组件库</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Material Angular 使用技巧</title>
    <link href="/blog/2024/01/Angular/Material-Angular/Material_Angular_Skill/"/>
    <url>/blog/2024/01/Angular/Material-Angular/Material_Angular_Skill/</url>
    
    <content type="html"><![CDATA[<h1 id="Material-Angular-使用技巧"><a href="#Material-Angular-使用技巧" class="headerlink" title="Material Angular 使用技巧"></a>Material Angular 使用技巧</h1><h3 id="mat-tab-切换时如何刷新数据-只渲染当前tab"><a href="#mat-tab-切换时如何刷新数据-只渲染当前tab" class="headerlink" title="mat-tab 切换时如何刷新数据(只渲染当前tab)"></a>mat-tab 切换时如何刷新数据(只渲染当前tab)</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">mat-tab-group</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> <span class="hljs-attr">matTabContent</span>&gt;</span> Content of tab A <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> <span class="hljs-attr">matTabContent</span>&gt;</span> Content of tab B <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab-group</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
      <tag>material</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular17</title>
    <link href="/blog/2024/01/Angular17/index/"/>
    <url>/blog/2024/01/Angular17/index/</url>
    
    <content type="html"><![CDATA[<h1 id="Angular17"><a href="#Angular17" class="headerlink" title="Angular17"></a>Angular17</h1><h2 id="创建angular17项目"><a href="#创建angular17项目" class="headerlink" title="创建angular17项目"></a>创建angular17项目</h2><p><code>ng new project001 --style=scss --skip-tests --routing=false --ssr=false -s -t</code><br>–style=scss 使用scss作为css<br>–skip-tests 不生成测试代码<br>–routing=false 不生成路由代码<br>–ssr=false 不支持ssr(服务端渲染)<br>-s （–inline-style）移除.scss文件，直接在ts文件中写样式<br>-t  (–inline-template) 移除.html文件，直接在ts文件中写</p><p><code>npm run ngc -p tsconfig.json</code> 编译成js文件输出(dist/out-tsc)</p><p>独立组件可以直接导入，无需在模块中声明</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span>(&#123;<br>    <span class="hljs-attr">standAlone</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;demo&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;&#125;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>    <span class="hljs-attr">standAlone</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;demo /&gt;`</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">helloWorld</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>组件传值pipe</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-meta">@Input</span>(&#123; <span class="hljs-attr">transform</span>: trimString &#125;) label = <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">trimString</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> value?.<span class="hljs-title function_">trim</span>() ?? <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>组件 <code>selector: &#39;custom-item&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;card-body&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>组件使用1</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">card-title</span>&gt;</span>插槽title<span class="hljs-tag">&lt;/<span class="hljs-name">card-title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">card-body</span>&gt;</span>插槽body<span class="hljs-tag">&lt;/<span class="hljs-name">card-body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">custom-item</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>组件使用2</p><blockquote><p><code>ngProjectAs</code> 挂在内容到任意html标签</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span>插槽title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">card-body</span>&gt;</span>插槽body<span class="hljs-tag">&lt;/<span class="hljs-name">card-body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">custom-item</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="use-service"><a href="#use-service" class="headerlink" title="use service"></a>use service</h2><p><code>service</code>Demo</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Injectable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-meta">@Injectable</span>(&#123;<br>  <span class="hljs-attr">providedIn</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorService</span> &#123;<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>usage</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-receipt&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;The total is &#123;&#123; totalCost &#125;&#125;&lt;/h1&gt;`</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Receipt</span> &#123;<br>    <span class="hljs-comment">// 在非构造函数中使用</span><br>  <span class="hljs-keyword">private</span> calculatorService = <span class="hljs-title function_">inject</span>(<span class="hljs-title class_">CalculatorService</span>);<br>  totalCost = <span class="hljs-variable language_">this</span>.<span class="hljs-property">calculatorService</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">50</span>, <span class="hljs-number">25</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ng-content-amp-amp-ngProjectAs"><a href="#ng-content-amp-amp-ngProjectAs" class="headerlink" title="ng-content &amp;&amp; ngProjectAs"></a>ng-content &amp;&amp; ngProjectAs</h2><p>Component template</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-shadow&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ng-content</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ng-content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>Using the component1</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-card</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">card-title</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">card-title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Welcome to the example<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">custom-card</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>Using the component2</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-card</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">&quot;card-title&quot;</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Welcome to the example<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">custom-card</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular17</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Material-Angular</title>
    <link href="/blog/2024/01/Angular/Material-Angular/mat-tab/"/>
    <url>/blog/2024/01/Angular/Material-Angular/mat-tab/</url>
    
    <content type="html"><![CDATA[<h1 id="Material-Angular-Mat-tab-使用技巧"><a href="#Material-Angular-Mat-tab-使用技巧" class="headerlink" title="Material Angular Mat-tab 使用技巧"></a>Material Angular Mat-tab 使用技巧</h1><h3 id="mat-tab-切换时如何刷新数据-只渲染当前tab"><a href="#mat-tab-切换时如何刷新数据-只渲染当前tab" class="headerlink" title="mat-tab 切换时如何刷新数据(只渲染当前tab)"></a>mat-tab 切换时如何刷新数据(只渲染当前tab)</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">mat-tab-group</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> <span class="hljs-attr">matTabContent</span>&gt;</span> Content of tab A <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;B&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> <span class="hljs-attr">matTabContent</span>&gt;</span> Content of tab B <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab-group</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="自定义mat-tab-label内容"><a href="#自定义mat-tab-label内容" class="headerlink" title="自定义mat-tab label内容"></a>自定义mat-tab label内容</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">mat-tab-group</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> <span class="hljs-attr">mat-tab-label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> [<span class="hljs-attr">matBadge</span>]=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">matBadgeOverlap</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">matBadgeColor</span>=<span class="hljs-string">&quot;warn&quot;</span>&gt;</span>自定义标题<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab-group</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
      <tag>material</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>属性型指令(Angular Directives)</title>
    <link href="/blog/2023/12/Angular/Directives/"/>
    <url>/blog/2023/12/Angular/Directives/</url>
    
    <content type="html"><![CDATA[<h2 id="directives"><a href="#directives" class="headerlink" title="directives"></a>directives</h2><blockquote><p>属性型指令，通过属性的方式使用，用于改变DOM元素的行为或外观</p></blockquote><h3 id="ng-create-directives"><a href="#ng-create-directives" class="headerlink" title="ng create directives"></a><code>ng</code> create directives</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ng generate directive shark --skip-tests</span><br></code></pre></div></td></tr></table></figure><p>shark.directive.ts</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Directive</span>, <span class="hljs-title class_">ElementRef</span>, <span class="hljs-title class_">Renderer2</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Directive</span>(<br>  &#123; <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[appShark]&#x27;</span> &#125;<br>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SharkDirective</span> &#123;<br>  creature = <span class="hljs-string">&#x27;Dolphin&#x27;</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">elem: ElementRef, renderer: Renderer2</span>) &#123;<br>    <span class="hljs-keyword">let</span> shark = renderer.<span class="hljs-title function_">createText</span>(<span class="hljs-string">&#x27;Shark &#x27;</span>);<br>    renderer.<span class="hljs-title function_">appendChild</span>(elem.<span class="hljs-property">nativeElement</span>, shark);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>app.component.html</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">appShark</span>&gt;</span>Fin!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Shark Fin! --&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="实现input和textarea前面不能输入空格"><a href="#实现input和textarea前面不能输入空格" class="headerlink" title="实现input和textarea前面不能输入空格"></a>实现input和textarea前面不能输入空格</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;input[jhiNoHeadSpace],textarea[jhiNoHeadSpace]&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoHeadSpaceDirective</span>  &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> ngControl: NgControl</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@HostListener</span>(<span class="hljs-string">&#x27;input&#x27;</span>, [<span class="hljs-string">&#x27;$event&#x27;</span>])<br>  <span class="hljs-title function_">onInput</span>(<span class="hljs-params">$event: <span class="hljs-built_in">any</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^\s+/g</span>.<span class="hljs-title function_">test</span>($event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)) &#123;<br>      <span class="hljs-keyword">const</span> newValue = $event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s+/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br>      $event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = $event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s+/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">ngControl</span>.<span class="hljs-property">control</span>?.<span class="hljs-title function_">setValue</span>(newValue);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">ngControl</span>.<span class="hljs-property">control</span>?.<span class="hljs-title function_">updateValueAndValidity</span>();<br>      $event.<span class="hljs-property">target</span>.<span class="hljs-title function_">setSelectionRange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// useage</span><br>&lt;input formControlName=<span class="hljs-string">&quot;name&quot;</span> jhiNoHeadSpace matInput&gt;<br></code></pre></div></td></tr></table></figure><h3 id="实现样式改变"><a href="#实现样式改变" class="headerlink" title="实现样式改变"></a>实现样式改变</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[jhiReadOnlyStyle]&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadonlyTypeDirective</span>  &#123;<br><br>  <span class="hljs-meta">@Input</span>() <span class="hljs-attr">readonlyItem</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> el: ElementRef, <span class="hljs-keyword">private</span> renderer: Renderer2</span>) &#123; &#125;<br><br>  <span class="hljs-title function_">ngAfterViewInit</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readonlyItem</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">renderer</span>.<span class="hljs-title function_">addClass</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">el</span>.<span class="hljs-property">nativeElement</span>, <span class="hljs-string">&#x27;readonly-form&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// readonly 全局只读样式</span><br>.<span class="hljs-property">readonly</span>-form &#123;<br>  <span class="hljs-attr">color</span>:<span class="hljs-title function_">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.38</span>) !important;<br>  .<span class="hljs-property">mat</span>-form-field-outline&#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-title function_">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.06</span>) !important;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// usage</span><br>&lt;mat-form-field appearance=<span class="hljs-string">&quot;outline&quot;</span> fxFlex jhiReadOnlyStyle [readonlyItem]=<span class="hljs-string">&quot;isView&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> [<span class="hljs-attr">type</span>]=<span class="hljs-string">&quot;&#x27;text&#x27;&quot;</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&#x27;userName&#x27;</span> <span class="hljs-attr">matInput</span> [<span class="hljs-attr">readonly</span>]=<span class="hljs-string">&quot;isView&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>auth in nestjs</title>
    <link href="/blog/2023/10/Nodejs/NestJs/auth/"/>
    <url>/blog/2023/10/Nodejs/NestJs/auth/</url>
    
    <content type="html"><![CDATA[<h1 id="Auth-in-nestjs"><a href="#Auth-in-nestjs" class="headerlink" title="Auth in nestjs"></a>Auth in nestjs</h1><h2 id="Use-bcrypt-to-encryption-password-in-backend"><a href="#Use-bcrypt-to-encryption-password-in-backend" class="headerlink" title="Use bcrypt to encryption password in backend"></a>Use bcrypt to encryption password in backend</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save @nestjs/passport passport passport-local<br>// types<br>npm install --save-dev @types/passport-local<br>// mongoose<br>npm install --save @nestjs/mongoose mongoose<br>npm install @types/bcrypt bcrypt<br></code></pre></div></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a><a href="https://www.loginradius.com/blog/engineering/guest-post/session-authentication-with-nestjs-and-mongodb/">Usage</a></h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// UsersController</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">private readonly usersService: UsersService</span>) &#123;&#125;<br> @<span class="hljs-title class_">Post</span>(<span class="hljs-string">&#x27;/signup&#x27;</span>)<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params"></span><br><span class="hljs-params">    @Body(<span class="hljs-string">&#x27;password&#x27;</span>) userPassword: string,</span><br><span class="hljs-params">    @Body(<span class="hljs-string">&#x27;username&#x27;</span>) userName: string,</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-keyword">const</span> saltOrRounds = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">const</span> hashedPassword = <span class="hljs-keyword">await</span> bcrypt.<span class="hljs-title function_">hash</span>(userPassword, saltOrRounds);<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">usersService</span>.<span class="hljs-title function_">insertUser</span>(<br>      userName,<br>      hashedPassword,<br>    );<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;User successfully registered&#x27;</span>,<br>      <span class="hljs-attr">userId</span>: result.<span class="hljs-property">id</span>,<br>      <span class="hljs-attr">userName</span>: result.<span class="hljs-property">username</span><br>    &#125;;<br>  &#125;<br><br><span class="hljs-comment">// UsersService </span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">@InjectModel(<span class="hljs-string">&#x27;user&#x27;</span>) private readonly userModel: Model&lt;User&gt;</span>) &#123;<br><span class="hljs-keyword">async</span> <span class="hljs-title function_">insertUser</span>(<span class="hljs-params">userName: string, password: string</span>) &#123;<br>  <span class="hljs-keyword">const</span> username = userName.<span class="hljs-title function_">toLowerCase</span>();<br>  <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">userModel</span>(&#123;<br>    username,<br>    password,<br>  &#125;);<br>  <span class="hljs-keyword">await</span> newUser.<span class="hljs-title function_">save</span>();<br>  <span class="hljs-keyword">return</span> newUser;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
      <tag>nestjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Uniapp</title>
    <link href="/blog/2023/10/uni-app/uni-app/"/>
    <url>/blog/2023/10/uni-app/uni-app/</url>
    
    <content type="html"><![CDATA[<h1 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h1><blockquote><p>uniapp是使用vue的语法，和微信小程序的组件、api的一个开发框架。<br>虽然可以多端编译,但安卓、ios、支付宝小程序等都有特性,需要分别写一些代码进行平台判断,具体的问题需要测试遇到再看…</p></blockquote><h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><h3 id="用Hbuilder生成类小程序项目-选用"><a href="#用Hbuilder生成类小程序项目-选用" class="headerlink" title="用Hbuilder生成类小程序项目(选用)"></a>用Hbuilder生成类小程序项目(选用)</h3><blockquote><p>优势: Hbuilder对uniapp支持完善(语法),拥有可视化预览，真机调试，打包发布，热更新，云打包，云开发，插件市场等功能,项目配置可视化(<code>manifest.json</code>)</p></blockquote><blockquote><p>劣势：Uniapp只能运行在Hbuilder中,Hbuilder相对其他开发工具(vs code,webstorm)体验较差</p></blockquote><h3 id="生成Vue项目目录"><a href="#生成Vue项目目录" class="headerlink" title="生成Vue项目目录"></a>生成Vue项目目录</h3><blockquote><p>优势: 纯Vue项目目录,降低学习成本,可以在任意开发工具中使用</p></blockquote><blockquote><p>劣势：不能实现云等功能,<code>package.json</code>运行启动项复杂</p></blockquote><h2 id="项目目录（非常规Vue项目文件）"><a href="#项目目录（非常规Vue项目文件）" class="headerlink" title="项目目录（非常规Vue项目文件）"></a>项目目录（非常规Vue项目文件）</h2><p><code>manifest.json</code></p><blockquote><p>项目配置文件,包含应用名称、版本号、图标、启动页面、权限、网络、权限、基础配置等</p></blockquote><p>注意事项：</p><ul><li>打包必须生成appid</li><li><code>modules</code>中配置是否需要某些模块(蓝牙,指纹,相机,扫码等)</li><li>本地开发跨域配置</li></ul><ul><li><code>manifest.json</code>中配置<code>h5</code>的<code>devServer</code></li><li>url带有services的请求都会被代理<br>“proxy” : {<br>“/services” : {<br>“target” : “<a href="http://192.168.1.251:8080/&quot;">http://192.168.1.251:8080/&quot;</a>,<br>“changeOrigin” : true, //是否跨域<br>“secure” : false, // 设置支持https协议的代理<br>“pathRewrite” : {<br>“^/services” : “/services”<br>}<br>},</li></ul><p><code>pages.json</code></p><blockquote><p>页面配置文件,包含页面路径、窗口样式、tabBar、分包、条件编译等(类小程序)</p></blockquote><p>注意事项：</p><ul><li>添加顶部按钮</li></ul><ul><li>单独的页面添加<code>&quot;app-plus&quot;: &#123; &quot;titleNView&quot;: &#123; &quot;buttons&quot;: [&#123; &quot;type&quot;: &quot;menu&quot;,&quot;float&quot;: &quot;right&quot; &#125;] &#125; &#125;</code>、</li></ul><ul><li>分包</li></ul><ul><li>主包目录 <code>&quot;pages&quot;: [&#123; &quot;path&quot;: &quot;pagesA/index&quot; &#125;]</code></li><li>分包目录 <code>&quot;subPackages&quot;: [&#123; &quot;root&quot;: &quot;pagesA&quot;, &quot;pages&quot;: [&#123; &quot;path&quot;: &quot;pagesA/index&quot; &#125;] &#125;]</code></li></ul><ul><li>客户端适配</li></ul><ul><li><code>globalStyle</code> 中配置是否自动横屏, 设备宽度等</li></ul><h2 id="form-表单验证"><a href="#form-表单验证" class="headerlink" title="form 表单验证"></a>form 表单验证</h2><p><a href="https://www.uviewui.com/components/form.html">表单验证</a></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;u-form :model=<span class="hljs-string">&quot;formName&quot;</span> ref=<span class="hljs-string">&quot;uForm&quot;</span>&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;批次码/产品码&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;objectName&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml"> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;objectName&quot;</span> <span class="hljs-attr">label-position</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">:label-width</span>=<span class="hljs-string">&quot;194&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">u-input</span> <span class="hljs-attr">:clearable</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inventoryForm.objectName&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">@<span class="hljs-attr">blur</span>=<span class="hljs-string">&quot;matchObjectName&quot;</span> <span class="hljs-attr">:focus</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">300</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">u-icon</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scan-icon&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;48&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onScanObjectName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u-icon</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">u-form-item</span>&gt;</span></span><br>&lt;/u-form&gt;<br><br><span class="hljs-attr">rules</span>: &#123;<br> <span class="hljs-attr">objectName</span>: [&#123;<br>  <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入产品码/批次码&#x27;</span>,<br>  <span class="hljs-attr">trigger</span>: [<span class="hljs-string">&#x27;blur&#x27;</span>,<span class="hljs-string">&#x27;change&#x27;</span>],<br> &#125;],<br> <span class="hljs-attr">locationNumber</span>: [&#123;<br>  <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入货位&#x27;</span>,<br>  <span class="hljs-attr">trigger</span>: [<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-string">&#x27;blur&#x27;</span>],<br> &#125;],<br> <span class="hljs-attr">stockQuantity</span>: [&#123;<br>  <span class="hljs-attr">pattern</span>: <span class="hljs-regexp">/^([1-9]([0-9]+)?)$/g</span>,<br>  <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入正整数&#x27;</span>,<br>  <span class="hljs-attr">trigger</span>: [<span class="hljs-string">&#x27;change&#x27;</span>,<span class="hljs-string">&#x27;blur&#x27;</span>]<br> &#125;,&#123;<br>  <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入数量&#x27;</span>,<br>  <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span><br> &#125;],<br>&#125;,<br><br><span class="hljs-title function_">onReady</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">uForm</span>.<span class="hljs-title function_">setRules</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rules</span>);<br>&#125;,<br><br></code></pre></div></td></tr></table></figure><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><h4 id="动态设置页面标题"><a href="#动态设置页面标题" class="headerlink" title="动态设置页面标题"></a>动态设置页面标题</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">uni.<span class="hljs-title function_">setNavigationBarTitle</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题&#x27;</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="返回首页"><a href="#返回首页" class="headerlink" title="返回首页"></a>返回首页</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-attr">onNavigationBarButtonTap</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    uni.<span class="hljs-title function_">switchTab</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;../pages/home/home&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>在onReady中给添加验证规则</li><li>赋值之后单独验证（赋值必须为字符串格式） 需要在form-item中添加ref,并使用this.$refs[‘这里是ref名称’].onFieldChange() 单独验证,需单独验证的字段的验证规则的trigger必须添加’change’</li><li>重置验证内容，resetFields</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Uniapp真机调试指南</title>
    <link href="/blog/2023/10/uni-app/%E5%AE%89%E5%8D%93%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
    <url>/blog/2023/10/uni-app/%E5%AE%89%E5%8D%93%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓真机调试"><a href="#安卓真机调试" class="headerlink" title="安卓真机调试"></a>安卓真机调试</h1><ul><li>首先保证Android电脑端手机助手（如360手机助手或者HBuilder最下方有手机连接提示）,可以正常用usb接口有线连接手机</li><li>在手机开发者选项中，开启开发者选项，开启USB调试</li></ul><h2 id="有线"><a href="#有线" class="headerlink" title="有线"></a>有线</h2><ul><li><p>在菜单中[运行]-&gt;[运行到手机或模拟器]-&gt; [运行Android设备…]</p><blockquote><p>会自动下载安装调试基座</p></blockquote></li></ul><h2 id="无线"><a href="#无线" class="headerlink" title="无线"></a>无线</h2><ul><li>确认手机和电脑是在同一网络下,</li><li>查看手机的ip地址(一般在手机设置里的[状态信息]中),如我的手机ip地址192.168.1.100</li><li>找到HBuider X 的安装目录，然后在该目录中打开CMD窗口(shift + 鼠标右键)。如我的目录E:\HBuilderX</li><li>执行<code>cd plugins\launcher\tools\adbs</code>,进入adc设置</li><li>执行<code>adb tcpip 5555</code>,设置端口号为5555</li><li>执行<code>adb connect 192.168.1.100</code>,使HBuilderX通过ip连接手机,此处ip地址为上面获得的手机ip地址</li><li>在菜单中[运行]-&gt;[运行到手机或模拟器]-&gt; [运行-设备:Android-192.168.1.100:5555-我的项目名称]</li></ul><h3 id="bat快捷连接"><a href="#bat快捷连接" class="headerlink" title="bat快捷连接"></a>bat快捷连接</h3><blockquote><p>每次开发都要在cmd中设置太麻烦，可以使用bat脚本</p></blockquote><ul><li>新建文本，</li><li>输入<code>start cmd /c &quot;cd/d E:\HBuilderX&amp;&amp;cd plugins\launcher\tools\adbs&amp;&amp;adb tcpip 5555&amp;&amp;adb connect 192.168.1.100&quot;</code>,根据自己的情况修改其中的目录、端口、ip地址</li><li>修改文本后缀名为<code>.bat</code></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://ask.dcloud.net.cn/article/565">通过WiFi连接手机调试Android、iOS应用</a><br>[2] <a href="https://hx.dcloud.net.cn/Tutorial/App/PhoneDebugging">真机运行常见问题</a><br>[3] <a href="https://ask.dcloud.net.cn/article/97">HBuilder/HBuilderX真机运行、手机运行、真机联调常见问题</a><br>[4] <a href="https://blog.csdn.net/u011200562/article/details/111312183">HBuilerX检测不到苹果手机iPhone</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建个人主页</title>
    <link href="/blog/2023/10/hexoFluid/"/>
    <url>/blog/2023/10/hexoFluid/</url>
    
    <content type="html"><![CDATA[<center style="color:#3eceb8;font-size:1.5em;font-weight: bold;">Hexo + Fluid主题 + github page<br>搭建个人博客</center><p>看了网上很多有很多不同的搭建个人博客的方式,最终选择Hexo这个大众化的博客,并选了一个简洁而优雅的bluid主题.</p><span id="more"></span><style>.markdown-body {    font-family:"Microsoft YaHei",Georgia, sans, serif;    font-size: 18px;  } </style><p><strong>准备事项: 默认已经安装<code>node.js</code>,<code>git</code>,有github账号.没有安装可以看一下我的其他的博客</strong></p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a><a href="https://hexo.io/docs/">Hexo</a>安装</h3><ul><li>新建文件夹存放博客文件,比如 <code>D:\pro\blog</code>  </li><li>在该目录下右键<code>git bash here</code>中使用命令行安装全局hexo<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span> <br></code></pre></div></td></tr></table></figure></li><li>初始化文件夹,安装必备组件<figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta">&amp; hexo init</span><br><span class="hljs-meta">&amp; npm install</span><br></code></pre></div></td></tr></table></figure></li><li>生成静态页面<code>&amp; hexo generate</code>,<code>&amp; hexo server</code>启动博客<a href="http://localhost:4000/">http://localhost:4000/</a> (以下命令为缩写)<figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta">&amp; hexo g</span><br><span class="hljs-meta">&amp; hexo s</span><br></code></pre></div></td></tr></table></figure></li><li>crtl+c关闭本地服务器,或者关闭git控制台.<br></br></br></li></ul><h3 id="安装Fluid主题"><a href="#安装Fluid主题" class="headerlink" title="安装Fluid主题"></a>安装<a href="https://hexo.fluid-dev.com/docs/">Fluid</a>主题</h3><ul><li>继续使用<code>git bash here</code>下载Fluid仓库  (git命令行中粘贴快捷键是<code>shift+insert</code>)<figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">&amp; git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/fluid-dev/hexo-theme-fluid.git<br></code></pre></div></td></tr></table></figure></li><li>将下载好的文件包剪切到blog下的themes文件夹下,并修改<code>_config.yml</code>文件中<code>theme: fluid</code></li><li>重新在blog目录下执行 <code>&amp; hexo g</code>,<code>&amp; hexo s</code>新的主题页就可以看到了<br></br></br></li></ul><h3 id="连接github-page与hexo"><a href="#连接github-page与hexo" class="headerlink" title="连接github page与hexo"></a>连接github page与hexo</h3><ul><li>创建github page<br>新建一个名称为yourname.github.io仓库</li></ul><p><img src="/img/hexo_github/creatRepo.jpg" alt="new repo"></p><p>点击<code>setting</code>,向下拉到最后有个<code>GitHub Pages</code>,就可以有自己的静态主页了.<br><img src="/img/hexo_github/githubPage.jpg" alt="github page"></p><ul><li><p>打开blog文件夹,修改最后一行<code>deploy</code>的配置(以下账号名称改为个人注册账号名称)</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/menghu1994/menghu1994.github.io.git</span><br><span class="hljs-symbol">  branch:</span> master<br><br></code></pre></div></td></tr></table></figure></li><li><p>安装连接扩展</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta">&amp; npm i hexo-deployer-git</span><br></code></pre></div></td></tr></table></figure></li><li><p>清理缓存,生成静态页面,上传到github仓库</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta">&amp; hexo clean</span><br><span class="hljs-meta">&amp; hexo g</span><br><span class="hljs-meta">&amp; hexo d</span><br></code></pre></div></td></tr></table></figure></li><li><p>打开你的<a href="https://menghu1994.github.io/">github page</a>就能看到个人主页,至此个人博客搭建已经结束.</p></li></ul><h3 id="写文章并发布"><a href="#写文章并发布" class="headerlink" title="写文章并发布"></a>写文章并发布</h3><ul><li><p>新建文章</p><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe">&amp; hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>&#x27;<span class="hljs-keyword">new</span> <span class="hljs-type">article</span>&#x27;<br></code></pre></div></td></tr></table></figure></li><li><p>在<code>blog\source\_posts</code>下可以看到多出的<code>new article.md</code></p></li><li><p>使用markdown语法写完一篇博客后执行以上的清理缓存,生成静态页面,上传到github仓库的步骤</p></li></ul><h3 id="修改Fluid主题配置"><a href="#修改Fluid主题配置" class="headerlink" title="修改Fluid主题配置"></a>修改Fluid主题配置</h3><h3 id="修改hexo配置"><a href="#修改hexo配置" class="headerlink" title="修改hexo配置"></a>修改hexo配置</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stylus</title>
    <link href="/blog/2023/10/Style/stylus/"/>
    <url>/blog/2023/10/Style/stylus/</url>
    
    <content type="html"><![CDATA[<p>css预处理</p><span id="more"></span><h3 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span>&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">400px</span>;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">300px</span>;<br><span class="hljs-attribute">padding-left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50vw</span>-<span class="hljs-number">400</span>/<span class="hljs-number">2</span>);<br><span class="hljs-attribute">padding-top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50vh</span>-<span class="hljs-number">300</span>/<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a>Stylus</h1><blockquote><p>垂直居中元素</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-class">.center</span><br><span class="hljs-attribute">position</span> absolute<br><span class="hljs-attribute">left</span> <span class="hljs-number">50%</span><br><span class="hljs-attribute">top</span> <span class="hljs-number">50%</span><br><span class="hljs-attribute">width</span> <span class="hljs-number">400px</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">300px</span><br><span class="hljs-attribute">margin-left</span> <span class="hljs-built_in">-</span>(@width / <span class="hljs-number">2</span>)<br><span class="hljs-attribute">margin-top</span> <span class="hljs-built_in">-</span>(@height / <span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><blockquote><p>一像素分割线</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">border-1px</span><span class="hljs-params">(<span class="hljs-variable">$color</span>)</span></span><br><span class="hljs-attribute">position</span> relative<br><span class="hljs-selector-pseudo">&amp;::after</span><br><span class="hljs-attribute">display</span> block<br><span class="hljs-attribute">position</span> absolute<br><span class="hljs-attribute">content</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attribute">width</span> <span class="hljs-number">100%</span><br><span class="hljs-attribute">border-bottom</span> <span class="hljs-number">1px</span> solid <span class="hljs-variable">$color</span><br><span class="hljs-attribute">left</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">bottom</span> <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">border-none</span><span class="hljs-params">()</span></span><br><span class="hljs-attribute">border</span> none<br><span class="hljs-selector-pseudo">&amp;::after</span><br><span class="hljs-attribute">border</span> none<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (min-device-pixel-ratio:<span class="hljs-number">3</span>)<br>.border-<span class="hljs-number">1px</span><br>&amp;::after<br>transform scaleY(<span class="hljs-number">0.333</span>)<br></code></pre></div></td></tr></table></figure><blockquote><p>媒体查询采用不同尺寸的图片</p></blockquote><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">bg-img($url)<br>background-<span class="hljs-keyword">image</span> url($url+<span class="hljs-string">&quot;@2x.png&quot;</span>)<br>@media screen and (<span class="hljs-keyword">min</span>-device-pixel-ratio:<span class="hljs-number">3</span>)<br>background-<span class="hljs-keyword">image</span> url($url+<span class="hljs-string">&quot;@3x.png&quot;</span>)<br></code></pre></div></td></tr></table></figure><blockquote><p>清除浮动</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-class">.clearfix</span><br><span class="hljs-attribute">display</span> inline-block<br><span class="hljs-selector-pseudo">&amp;::after</span><br><span class="hljs-attribute">content</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">display</span> block<br><span class="hljs-attribute">visibility</span> hidden <br><span class="hljs-attribute">clear</span> both<br></code></pre></div></td></tr></table></figure><blockquote></blockquote><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">vendor</span><span class="hljs-params">(prop, args)</span></span><br>-webkit-&#123;prop&#125; args<br>-moz-&#123;prop&#125; args<br>&#123;prop&#125; args<br><br><span class="hljs-function"><span class="hljs-title">border-radius</span><span class="hljs-params">()</span></span><br><span class="hljs-built_in">vendor</span>(<span class="hljs-string">&#x27;border-radius&#x27;</span>, arguments)<br></code></pre></div></td></tr></table></figure><blockquote><p>变量</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-attribute">font-size</span> <span class="hljs-number">14px</span><br><br><span class="hljs-selector-tag">body</span><br><span class="hljs-attribute">font</span> font-size Arial, sans-seri<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Uniapp 网络请求封装</title>
    <link href="/blog/2023/10/uni-app/request/"/>
    <url>/blog/2023/10/uni-app/request/</url>
    
    <content type="html"><![CDATA[<h1 id="Uniapp-网络请求封装"><a href="#Uniapp-网络请求封装" class="headerlink" title="Uniapp 网络请求封装"></a>Uniapp 网络请求封装</h1><p><code>request.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-attr">config</span>: &#123;<br><span class="hljs-attr">baseUrl</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-attr">header</span>: &#123;<br><span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>&#125;,<br><span class="hljs-comment">// h5 跨域请求时是否携带凭证（cookies）</span><br><span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-comment">// 可在headers中编辑cookie</span><br><span class="hljs-attr">enableCookie</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">data</span>: &#123;&#125;,<br><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br><span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br><span class="hljs-comment">/* 如设为json，会对返回的数据做一次 JSON.parse */</span><br><span class="hljs-attr">responseType</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-title function_">success</span>(<span class="hljs-params"></span>) &#123;&#125;,<br><span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>) &#123;&#125;,<br><span class="hljs-title function_">complete</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;,<br><span class="hljs-comment">// 请求拦截器</span><br><span class="hljs-attr">interceptor</span>: &#123;<br><span class="hljs-attr">request</span>: <span class="hljs-literal">null</span>,<br><span class="hljs-attr">response</span>: <span class="hljs-literal">null</span><br>&#125;,<br><span class="hljs-title function_">request</span>(<span class="hljs-params">options = &#123;&#125;</span>) &#123;<br><span class="hljs-comment">// 获取登录后存储在本地的token信息</span><br><span class="hljs-keyword">const</span> token = uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;token&#x27;</span>)<br><br><span class="hljs-comment">// const requestType = options.url.split(&#x27;/&#x27;);</span><br><span class="hljs-comment">// let typeVal = requestType[requestType.length - 1]</span><br><br><span class="hljs-keyword">if</span>(token) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">header</span>.<span class="hljs-property">Authorization</span> = token<br>&#125;<br><br>options.<span class="hljs-property">baseUrl</span> = options.<span class="hljs-property">baseUrl</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">baseUrl</span><br>options.<span class="hljs-property">dataType</span> = options.<span class="hljs-property">dataType</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">dataType</span><br>options.<span class="hljs-property">url</span> = options.<span class="hljs-property">baseUrl</span> + options.<span class="hljs-property">url</span><br>options.<span class="hljs-property">data</span> = options.<span class="hljs-property">data</span> || &#123;&#125;<br>options.<span class="hljs-property">method</span> = options.<span class="hljs-property">method</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">method</span><br><br><br><span class="hljs-comment">// 基于 Promise 的网络请求</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>uni.<span class="hljs-title function_">showLoading</span>()<br><span class="hljs-keyword">let</span> _config = <span class="hljs-literal">null</span><br>options.<span class="hljs-property">complete</span> = <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>uni.<span class="hljs-title function_">hideLoading</span>()<br><span class="hljs-keyword">let</span> statusCode = response.<span class="hljs-property">statusCode</span><br>response.<span class="hljs-property">config</span> = _config<br><span class="hljs-comment">// if (process.env.NODE_ENV === &#x27;development&#x27;) &#123;</span><br><span class="hljs-comment">// if (statusCode === 200) &#123;</span><br><span class="hljs-comment">// // console.log(&quot;【&quot; + _config.requestId + &quot;】 结果：&quot; + JSON.stringify(response.data))</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptor</span>.<span class="hljs-property">response</span>) &#123;<br><span class="hljs-keyword">let</span> newResponse = <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptor</span>.<span class="hljs-title function_">response</span>(response)<br><span class="hljs-keyword">if</span> (newResponse) &#123;<br>response = newResponse<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//  路由拦截</span><br><span class="hljs-keyword">if</span>(response.<span class="hljs-property">errMsg</span> &amp;&amp; response.<span class="hljs-property">errMsg</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;request:fail&quot;</span>)&#123;<br>tool.<span class="hljs-title function_">msg</span>(<span class="hljs-string">&#x27;网络连接失败&#x27;</span>);<br><span class="hljs-keyword">return</span><br>&#125;<br><br><br><span class="hljs-comment">// if(response.errMsg === &quot;request:fail timeout&quot;)&#123;</span><br><span class="hljs-comment">// tool.msg(&#x27;网络连接超时&#x27;);</span><br><span class="hljs-comment">// return</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">if</span>(response.<span class="hljs-property">statusCode</span> === <span class="hljs-number">401</span>)&#123;<br><span class="hljs-keyword">if</span>(typeVal === <span class="hljs-string">&quot;login&quot;</span>)&#123;<br>tool.<span class="hljs-title function_">msg</span>(<span class="hljs-string">&#x27;账号或密码错误&#x27;</span>);<br><span class="hljs-keyword">return</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>tool.<span class="hljs-title function_">msg</span>(<span class="hljs-string">&#x27;登录已过期,请重新登录&#x27;</span>);<br><span class="hljs-built_in">setTimeout</span>( <span class="hljs-function">() =&gt;</span> &#123;<br>uni.<span class="hljs-title function_">reLaunch</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/pages/login/login&#x27;</span><br>&#125;)<br>&#125;,<span class="hljs-number">1e3</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// let &#123;</span><br><span class="hljs-comment">// code,</span><br><span class="hljs-comment">// msg</span><br><span class="hljs-comment">// &#125; = response.data</span><br><span class="hljs-comment">// 请求返回400请求报文存在语法错误时reLaunch到登录页</span><br><span class="hljs-comment">// if (response.data.code&gt;= 400||response.statusCode&gt;=400||response.status&gt;=400) &#123;</span><br><span class="hljs-comment">// reject(response)</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">if</span>(response.<span class="hljs-property">statusCode</span>&gt;=<span class="hljs-number">400</span>)&#123;<br><span class="hljs-title function_">reject</span>(response)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">resolve</span>(response)<br>&#125;<br><br>&#125;<br>_config = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>, options)<br>_config.<span class="hljs-property">requestId</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptor</span>.<span class="hljs-property">request</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptor</span>.<span class="hljs-title function_">request</span>(_config)<br>&#125;<br>uni.<span class="hljs-title function_">request</span>(_config);<br>&#125;);<br>&#125;,<br><span class="hljs-comment">// get请求</span><br><span class="hljs-title function_">get</span>(<span class="hljs-params">url, data, options = &#123;&#125;</span>) &#123;<br>options.<span class="hljs-property">url</span> = url<br>options.<span class="hljs-property">data</span> = data<br>options.<span class="hljs-property">method</span> = <span class="hljs-string">&#x27;GET&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(options)<br>&#125;,<br><span class="hljs-comment">// post请求</span><br><span class="hljs-title function_">post</span>(<span class="hljs-params">url, data, options = &#123;&#125;</span>) &#123;<br>options.<span class="hljs-property">url</span> = url<br>options.<span class="hljs-property">data</span> = data<br>options.<span class="hljs-property">method</span> = <span class="hljs-string">&#x27;POST&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(options)<br>&#125;,<br><span class="hljs-comment">// put请求</span><br><span class="hljs-title function_">put</span>(<span class="hljs-params">url, data, options = &#123;&#125;</span>) &#123;<br>options.<span class="hljs-property">url</span> = url<br>options.<span class="hljs-property">data</span> = data<br>options.<span class="hljs-property">method</span> = <span class="hljs-string">&#x27;PUT&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(options)<br>&#125;,<br><span class="hljs-comment">// delete请求</span><br><span class="hljs-title function_">delete</span>(<span class="hljs-params">url, data, options = &#123;&#125;</span>) &#123;<br>options.<span class="hljs-property">url</span> = url<br>options.<span class="hljs-property">data</span> = data<br>options.<span class="hljs-property">method</span> = <span class="hljs-string">&#x27;DELETE&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(options)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="使用request-js"><a href="#使用request-js" class="headerlink" title="使用request.js"></a>使用<code>request.js</code></h3><p><code>login.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../request.js&#x27;</span><br><br><span class="hljs-keyword">const</span> login = &#123;<br><span class="hljs-attr">loginUser</span>: <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> api.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;网络请求地址&#x27;</span>,<br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>data<br>&#125;)<br>&#125;,<br><span class="hljs-attr">account</span>: <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> api.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;请求地址&quot;</span>,<br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span><br>&#125;)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="使用login-js"><a href="#使用login-js" class="headerlink" title="使用login.js"></a>使用<code>login.js</code></h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> login <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/service/login.js&#x27;</span><br><br>login.<span class="hljs-title function_">loginUser</span>(&#123;<span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-comment">// 处理服务器返回的数据</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(res)<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS Animation</title>
    <link href="/blog/2023/10/Animation/animation/"/>
    <url>/blog/2023/10/Animation/animation/</url>
    
    <content type="html"><![CDATA[<p>transition;animation</p><span id="more"></span><p>transition:</p><ul><li><p>ease            //缓慢开始</p></li><li><p>linear        //匀速</p></li><li><p>ease-in        //缓慢开始</p></li><li><p>ease-out        //缓慢结束</p></li><li><p>ease-in-out    //缓慢开始，缓慢结束</p></li><li><p>webkit-perspective        //距离屏幕距离</p></li><li><p>webkit-perspective-origin: 50% 50%;</p></li><li><p>webkit-transform-style:-webkit-preserve-3d    //三维场景</p><p>transform-origin        //旋转中心</p></li><li><p>x轴 left center right</p></li><li><p>y轴 top center bottom</p></li><li><p>z轴 length px</p></li></ul><p>transform:rotateY(20deg)</p><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><ul><li>animation:动画名称 持续时间 运动曲线 延时时间 播放次数 方向</li></ul><ul><li>@keyframe</li><li>animation-name                  </li><li>animation-duration                //完成所需时间</li><li>animation-timing-function        //速度曲线 ease..</li><li>animation-delay                    //延时时间</li><li>animation-iteration-count        //播放次数 infinite</li><li>animation-direction                //下次是否逆向播放 normal/alternate</li><li>animation-play-state             //动画运行或暂停 paused/running</li><li>animation-fill-mode                //动画外的状态 none/forwards/backwards/both</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Failed to connect to github.com port 443 Timed out</title>
    <link href="/blog/2023/10/Git/gitpush%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5/"/>
    <url>/blog/2023/10/Git/gitpush%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>git 命令行问题集合</p><span id="more"></span><p>在<a href="http://ping.chinaz.com/github.com">chinaz</a>查询对应网址的耗时情况,查看可用ip。</p><h2 id="OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="OpenSSL SSL_read: Connection was reset, errno 10054"></a>OpenSSL SSL_read: Connection was reset, errno 10054</h2><blockquote><p>连接超时<br>首先，造成这个错误很有可能是网络不稳定，连接超时导致的，如果再次尝试后依然报错，可以执行下面的命令。</p></blockquote><figure class="highlight shell"><figcaption><span>打开Git命令页面，执行git命令脚本：修改设置，解除ssl验证</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global http.sslVerify &quot;false&quot;<br></code></pre></div></td></tr></table></figure><h2 id="git-push失败-但浏览器可以正常访问github-com"><a href="#git-push失败-但浏览器可以正常访问github-com" class="headerlink" title="git push失败,但浏览器可以正常访问github.com"></a>git push失败,但浏览器可以正常访问github.com</h2><blockquote><p>代理导致</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global --unset http.proxy<br></code></pre></div></td></tr></table></figure><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><p>host文件路径 C:\Windows\System32\drivers\etc\HOSTS<br>我们把 <code>13.250.177.223 github.com</code> 添加到 hosts 文件</p><figure class="highlight shell"><figcaption><span>在shell 命令行中,刷新host设置</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ipconfig /flushdns<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Listary</title>
    <link href="/blog/2023/10/Windows/Softwares/Listary/"/>
    <url>/blog/2023/10/Windows/Softwares/Listary/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text</title>
    <link href="/blog/2023/10/Windows/Softwares/SublimeText/"/>
    <url>/blog/2023/10/Windows/Softwares/SublimeText/</url>
    
    <content type="html"><![CDATA[<h1 id="Hot-key"><a href="#Hot-key" class="headerlink" title="Hot key"></a>Hot key</h1><ol><li><code>F6</code>: spell checker</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>software</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Software in Windows</title>
    <link href="/blog/2023/10/Windows/Softwares/index/"/>
    <url>/blog/2023/10/Windows/Softwares/index/</url>
    
    <content type="html"><![CDATA[<h1 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h1><ol><li>Google Chrome(Brower)</li><li>Sublime Text(Note)</li><li>Pandoc</li><li>Everything(Local offline search)</li><li>Listary(Quick search)</li><li>SETUNA(Screenshot)</li><li>RUSTDESK</li><li>Wox</li><li>PowerToys</li></ol><h1 id="For-Coder"><a href="#For-Coder" class="headerlink" title="For Coder"></a>For Coder</h1><ol><li><a href="../../Package-Details/IDEA&WebStorm.md">IDEA &amp; WebStorm</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Shell Command</title>
    <link href="/blog/2023/10/Windows/Softwares/shell/"/>
    <url>/blog/2023/10/Windows/Softwares/shell/</url>
    
    <content type="html"><![CDATA[<h1 id="命令行指令"><a href="#命令行指令" class="headerlink" title="命令行指令"></a>命令行指令</h1><ol><li>产看本机已启动的服务列表</li></ol><ul><li><code>WIN + R</code>, <code>services.msc</code></li></ul><ol start="2"><li>多显示器,将当前应用转移到另外一个屏幕上<br><code>win + shift + ←/→</code></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/blog/2023/10/Webpack/ProjectInit/"/>
    <url>/blog/2023/10/Webpack/ProjectInit/</url>
    
    <content type="html"><![CDATA[<h1 id="web-项目搭建"><a href="#web-项目搭建" class="headerlink" title="web 项目搭建"></a>web 项目搭建</h1><blockquote><p>已安装node</p></blockquote><ol><li>新建文件夹(project-test)</li><li>命令行进入文件夹，<code>npm init</code> 初始化项目</li><li>安装<code>webpack</code>包<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save-dev webpack<br>npm install --save-dev webpack-dev-server<br>npm install --save-dev webpack-cli<br>npm install --save-dev copy-webpack-plugin<br></code></pre></div></td></tr></table></figure></li><li>新建文件<code>webpack.config.js</code></li><li>新建目录和文件 <code>src/index.html index.js</code>, 并初始化html h5文件</li><li><code>package.json</code> 添加打包和构建配置<figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack-dev-server&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure></li><li>启动项目 <code>npm start</code></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2023/10/Webpack/initFiles/index/"/>
    <url>/blog/2023/10/Webpack/initFiles/index/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta content="text/html; charset-utf-8" http-equiv="Content-Type"><title>Document</title><script async type="text/javascript" src="bundle.js"></script></head><body></body></html>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2023/10/Webpack/initFiles/webpack.config/"/>
    <url>/blog/2023/10/Webpack/initFiles/webpack.config/</url>
    
    <content type="html"><![CDATA[const path = require("path");const CopyPlugin = require("copy-webpack-plugin");module.exports = {mode: "production",entry: "./src/index.js",performance: {hints: false},module: {rules: []},resolve: {extensions: [".js"]},output: {filename: "bundle.js",path: path.resolve(__dirname, "build")},plugins: [new CopyPlugin({patterns: [{ from: "src/index.html", to: "" }]})]};]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pinia in Vue3</title>
    <link href="/blog/2023/10/Vue/Pinia/"/>
    <url>/blog/2023/10/Vue/Pinia/</url>
    
    <content type="html"><![CDATA[<h1 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a><a href="https://pinia.vuejs.org/zh">Pinia</a></h1><blockquote><p>State management<br><code>state</code> | <code>getter</code> | <code>action</code></p></blockquote><h2 id="Basic-Create-and-Usage"><a href="#Basic-Create-and-Usage" class="headerlink" title="Basic Create and Usage"></a>Basic Create and Usage</h2><ol><li><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useAbcStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;abc&#x27;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;),<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-attr">double</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">count</span> * <span class="hljs-number">2</span>,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>    &#125;,<br>  &#125;,<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref,computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useAbcStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;abc&#x27;</span>, &#123;<br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> double = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> count*<span class="hljs-number">2</span><br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>count.<span class="hljs-property">value</span> ++<br>&#125;;<br><span class="hljs-keyword">return</span> &#123;<br>count,double,increment<br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>Usage<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; useAbcStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores/abc&#x27;</span><br><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useAbcStore</span>()<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="state-seems-to-data"><a href="#state-seems-to-data" class="headerlink" title="state seems to data"></a><code>state</code> seems to data</h2><h2 id="getter-seems-to-computed"><a href="#getter-seems-to-computed" class="headerlink" title="getter seems to computed"></a><code>getter</code> seems to computed</h2><h2 id="action-seems-to-methods"><a href="#action-seems-to-methods" class="headerlink" title="action seems to methods"></a><code>action</code> seems to methods</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2023/10/Vue/SFC/"/>
    <url>/blog/2023/10/Vue/SFC/</url>
    
    <content type="html"><![CDATA[<h1 id="SFC-Single-File-Component"><a href="#SFC-Single-File-Component" class="headerlink" title="SFC(Single File Component)"></a>SFC(Single File Component)</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Public Method in Vue3</title>
    <link href="/blog/2023/10/Vue/publicMethod/"/>
    <url>/blog/2023/10/Vue/publicMethod/</url>
    
    <content type="html"><![CDATA[<ol><li><code>app.config.globalProperties</code> Global Property</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js Regist</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br> <br> <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>)<br>  &#125;<br>&#125;)<br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$axios</span> = axios<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#root&#x27;</span>)<br><br><span class="hljs-comment">// App.vue Usage</span><br>&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123;getCurrentInstance&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> &#123; proxy &#125; = <span class="hljs-title function_">getCurrentInstance</span>(); <span class="hljs-comment">//获取公用方法proxy.$axios</span><br><span class="hljs-keyword">const</span> &#123;$axios&#125;=proxy<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($axios)<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><ol start="2"><li><p><code>mixin</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br> <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>)<br>  &#125;<br>&#125;)<br>app.<span class="hljs-title function_">mixin</span>(&#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">$axios</span>: axios<br>  &#125;<br>&#125;)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#root&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li><li><p><code>provide, inject</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br> <br> <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-string">&#x27;$axios&#x27;</span>],<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>)<br>  &#125;<br>&#125;)<br>app.<span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;$axios&#x27;</span>, axios)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#root&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue-Router</title>
    <link href="/blog/2023/10/Vue/vue-router/"/>
    <url>/blog/2023/10/Vue/vue-router/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router-in-Vue3"><a href="#Vue-Router-in-Vue3" class="headerlink" title="Vue-Router in Vue3"></a>Vue-Router in Vue3</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install vue-router@4.0.0-beta.13<br></code></pre></div></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// route/index.js</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../home&quot;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;login&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../login&quot;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-comment">// hash 模式</span><br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  <span class="hljs-attr">routes</span>: routes<br>&#125;)<br><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; router &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./route&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(router)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-comment">// pageA.vue</span><br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>();<br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Run Vue3 Project</title>
    <link href="/blog/2023/10/Vue/start/"/>
    <url>/blog/2023/10/Vue/start/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3-project-init"><a href="#Vue3-project-init" class="headerlink" title="Vue3 project init"></a>Vue3 project init</h1><ol><li>Ensure Node.js version &gt;= 16.0;</li><li>Command-line <code>npm init vue@latest</code> to install vue.</li></ol><ul><li>[✔] add Typscript</li><li>[✔] add Vue Router </li><li>[✔] add Pinia (state management)</li><li>[✔] add ESLint (code vertify) </li><li>[✔] add Prettier (code formatting)</li></ul><ol start="3"><li>Add <code>scss</code><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm add -D sass<br></code></pre></div></td></tr></table></figure></li><li>Run Project<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd [your-project-name]<br>npm install<br>npm run dev<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="Analyze-Dirctory-File"><a href="#Analyze-Dirctory-File" class="headerlink" title="Analyze Dirctory File"></a>Analyze Dirctory File</h2><ol><li><code>vite.config.js</code><blockquote><p>Every time you run <code>npm run dev</code>, Vite will analyze this dirctory.<br>You can config Package、Local service and more.</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;./src&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br>      <span class="hljs-comment">// Path alias(别名), Use @ replace ./scr</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Other Dirctory<br>:file assets: static file, like images, css;<br>:file components: public components;<br>:file stores: Pinia state management;<br>:file router: Vue Router file;<br>:file views: vue pages;<br>:file public: file which will not be packaged, like icon;</li></ol><h2 id="build-project"><a href="#build-project" class="headerlink" title="build project"></a>build project</h2><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;preview&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite preview --port 4173&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><ol><li><code>npm run dev</code> | <code>npx vite</code></li></ol><blockquote><p>Run local service, and provide Hot Module Replacement (HMR热更新)</p></blockquote><ol start="2"><li><code>npm run build</code> | <code>npx vite build</code></li></ol><blockquote><p>Build file to :file <code>dist</code></p></blockquote><ol start="3"><li><code>npm run preview</code> | <code>npx vite preview --port 4173</code></li></ol><blockquote><p>Run local service and preview the project in :file <code>dist</code></p></blockquote><h3 id="why-to-build"><a href="#why-to-build" class="headerlink" title="why to build"></a>why to build</h3><ol><li>Syntax compilation(语法编译)</li></ol><ul><li>Trans <code>.vue</code> file to <code>js</code> and <code>css</code></li><li><code>ES6</code> to <code>ES5</code></li></ul><ol start="2"><li>File compression(文件压缩)</li></ol><ul><li>Reduce HTTP Requests</li></ul><ol start="3"><li>Code compression</li></ol><ul><li>Remove space、annotate(注释),Change name of variable、function</li></ul><ol start="4"><li>Use the plugin only have used</li></ol><ul><li>Splice file from <code>node_moudle</code> to build file</li></ul><h2 id="Options-API-vs-Composition-API"><a href="#Options-API-vs-Composition-API" class="headerlink" title="Options API vs Composition API"></a>Options API vs Composition API</h2><h3 id="Options-API"><a href="#Options-API" class="headerlink" title="Options API"></a>Options API</h3><blockquote><p>According to different characteristics, split to different option, like data, method, computed, life cycle</p></blockquote><h3 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h3><blockquote><p>With <code>&lt;script set&gt;</code>, you can write code like original javascript;<br>According to ‘function’ to distinguish(区分) code area and It can improve readability;<br>Use <code>reactive()</code> and <code>ref()</code> to add relative.</p></blockquote><p><img src="../_static/images/vue/optionApi.jpg" alt="distinguish" title="Options vs Composition"></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>？用法</title>
    <link href="/blog/2023/10/Typescript/%E9%97%AE%E5%8F%B7%E6%84%9F%E5%8F%B9%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/blog/2023/10/Typescript/%E9%97%AE%E5%8F%B7%E6%84%9F%E5%8F%B9%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 当 isNumber(input) 为 True 是返回 ? : 之间的部分； isNumber(input) 为 False 时</span><br><span class="hljs-keyword">const</span> a =  <span class="hljs-title function_">isNumber</span>(input) ? input : <span class="hljs-title class_">String</span>(input)<br></code></pre></div></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 这里的 ？表示这个参数 field 是一个可选参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUser</span>(<span class="hljs-params">user: <span class="hljs-built_in">string</span>, field?: <span class="hljs-built_in">string</span></span>) &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 这里的？表示这个name属性有可能不存在</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  name?: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> B &#123;<br>  name?: <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="安全链式调用"><a href="#安全链式调用" class="headerlink" title="安全链式调用"></a>安全链式调用</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 这里 Error对象定义的stack是可选参数，如果这样写的话编译器会提示</span><br><span class="hljs-comment">// 出错 TS2532: Object is possibly &#x27;undefined&#x27;.</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br><span class="hljs-comment">// 我们可以添加?操作符，当stack属性存在时，调用 stack.split。若stack不存在，则返回空</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>?.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br><span class="hljs-comment">// 以上代码等同以下代码, 感谢 @dingyanhe 的监督</span><br><span class="hljs-keyword">const</span> err = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>();<br><span class="hljs-keyword">return</span> err.<span class="hljs-property">stack</span> &amp;&amp; err.<span class="hljs-property">stack</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// ! 就是将之后的结果取反，比如：</span><br><span class="hljs-comment">// 当 isNumber(input) 为 True 时返回 False； isNumber(input) 为 False 时返回True</span><br><span class="hljs-keyword">const</span> a = !<span class="hljs-title function_">isNumber</span>(input);<br></code></pre></div></td></tr></table></figure><h3 id="成员一定有值"><a href="#成员一定有值" class="headerlink" title="成员一定有值"></a>成员一定有值</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 因为接口B里面name被定义为可空的值，但是实际情况是不为空的，那么我们就可以</span><br><span class="hljs-comment">// 通过在class里面使用！，重新强调了name这个不为空值</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> implemented B &#123;<br>  name!: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> B &#123;<br>  name?: <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="强制链式调用"><a href="#强制链式调用" class="headerlink" title="强制链式调用"></a>强制链式调用</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 这里 Error对象定义的stack是可选参数，如果这样写的话编译器会提示</span><br><span class="hljs-comment">// 出错 TS2532: Object is possibly &#x27;undefined&#x27;.</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br><span class="hljs-comment">// 我们确信这个字段100%出现，那么就可以添加！，强调这个字段一定存在</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>!.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eslint</title>
    <link href="/blog/2023/10/Tools/eslint/"/>
    <url>/blog/2023/10/Tools/eslint/</url>
    
    <content type="html"><![CDATA[<h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><ul><li>忽略ESlint检测</li></ul><ol><li>在根目录下创建.eslintignore文件</li><li>在.eslintignore文件中添加要排除的文件或目录<figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt"># 排除所有.js文件<br>**/*.js<br><br># 排除vendor目录<br>vendor/<br></code></pre></div></td></tr></table></figure></li><li>保存并重启项目</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>interface</title>
    <link href="/blog/2023/10/Typescript/Interface/"/>
    <url>/blog/2023/10/Typescript/Interface/</url>
    
    <content type="html"><![CDATA[<h1 id="interface"><a href="#interface" class="headerlink" title="interface"></a><a href="https://ts.xcatliu.com/basics/type-of-object-interfaces.html">interface</a></h1><blockquote><p>接口是一系列抽象方法的声明,是一些方法特征的集合,这些方法应该都是抽象的,需要由具体的类去实现。<br>定义接口类型的变量属性必须与接口内一致,除非是(?)可选属性<br>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;<span class="hljs-comment">// 只读属性，只能初始化赋值，不能修改</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<span class="hljs-comment">// ;分号</span><br>  age?: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性</span><br>  [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;<span class="hljs-comment">// 定义了任意属性取 string 类型的值</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: <span class="hljs-title class_">Person</span> = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-comment">// 必写属性name</span><br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span><span class="hljs-comment">// 任意属性</span><br>&#125;<br><br>tom.<span class="hljs-property">id</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">// error, 只读属性不能赋值</span><br></code></pre></div></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">List</span> &#123;<br>  [<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">listDetail</span>: <span class="hljs-title class_">List</span><br></code></pre></div></td></tr></table></figure><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><blockquote><p>接口可以通过其他接口扩展自己,继承关键字<code>extends</code></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Doctor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">instrument</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Amy</span> = &lt;<span class="hljs-title class_">Doctor</span>&gt;&#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">instrument</span>: <span class="hljs-string">&#x27;Scalpel&#x27;</span><br>&#125;;<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Amy</span>: <span class="hljs-title class_">Doctor</span> = &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">instrument</span>: <span class="hljs-string">&#x27;Scalpel&#x27;</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Per</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br> <br><span class="hljs-keyword">let</span> teacher = &#123;&#125;;<br>teacher.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;tony&quot;</span><span class="hljs-comment">// error</span><br>(result <span class="hljs-keyword">as</span> <span class="hljs-title class_">Per</span>).<span class="hljs-property">name</span>  = <span class="hljs-string">&quot;tony&quot;</span><span class="hljs-comment">//类型断言</span><br><br><br><span class="hljs-keyword">let</span> doctor = &lt;<span class="hljs-title class_">Per</span>&gt;&#123;&#125;<br>doctor.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;wang&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="class-extends-amp-amp-interface"><a href="#class-extends-amp-amp-interface" class="headerlink" title="class extends &amp;&amp; interface"></a>class extends &amp;&amp; interface</h3><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Car</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SuperCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span> &#123;<br>  <span class="hljs-title function_">fun</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">newCar</span>: <span class="hljs-title class_">SuperCar</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lili&#x27;</span>,<br>  <span class="hljs-attr">fun</span>: <span class="hljs-function">()=&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">protect name: <span class="hljs-built_in">string</span></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">SuperCar</span> <span class="hljs-keyword">implements</span> A &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>  <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="抽象类中的抽象方法必须被子类实现："><a href="#抽象类中的抽象方法必须被子类实现：" class="headerlink" title="抽象类中的抽象方法必须被子类实现："></a>抽象类中的抽象方法必须被子类实现：</h4><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">constructor</span> (<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-keyword">abstract</span> eat (): <span class="hljs-built_in">void</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;<br>  <span class="hljs-comment">// 子类必须实现抽象类中的抽象方法</span><br>  eat () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person is eating&#x27;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;why&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>)    <span class="hljs-comment">// why</span><br>person.<span class="hljs-title function_">eat</span>()                <span class="hljs-comment">// person is eating</span><br><br></code></pre></div></td></tr></table></figure><h3 id="lt-T-gt-泛型"><a href="#lt-T-gt-泛型" class="headerlink" title="&lt;T&gt; 泛型"></a><code>&lt;T&gt;</code> <a href="https://ts.xcatliu.com/advanced/generics.html">泛型</a></h3><blockquote><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。<br><code>&lt;T&gt;</code>表示任意类型,<code>&lt;T&gt;</code>和any的区别在于: 定义类型的any和返回值any可以表示不同类型,<code>&lt;T&gt;</code>的定义类型和返回类型表示相同类型</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typescript</title>
    <link href="/blog/2023/10/Typescript/Typescript/"/>
    <url>/blog/2023/10/Typescript/Typescript/</url>
    
    <content type="html"><![CDATA[<h1 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a><a href="https://ts.xcatliu.com/basics">Typescript</a></h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];  <span class="hljs-comment">// 定义元素都是number的数组类型</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <span class="hljs-comment">//数组泛型</span><br></code></pre></div></td></tr></table></figure><blockquote><p>类数组不是数组类型</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">args</span>: <span class="hljs-built_in">number</span>[] = <span class="hljs-variable language_">arguments</span>;  <span class="hljs-comment">// error</span><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>常用类数组有自己的接口定义,<code>IArgument</code>,<code>NodeList</code>,<code>HTMLCollection</code></p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IArguments</span> &#123;    <span class="hljs-comment">// ts已经定义好</span><br>    [<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">any</span>;<br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-attr">callee</span>: <span class="hljs-title class_">Function</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">args</span>: <span class="hljs-title class_">IArguments</span> = <span class="hljs-variable language_">arguments</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>函数参数添加默认值,在ts中会将此参数识别为可选参数</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fullName</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;li&#x27;</span></span>)&#123;  <span class="hljs-comment">//lastName为被识别为可选参数,且不受到可选参数必须在必需参数后的限制</span><br> <span class="hljs-keyword">return</span> firstName + lastName<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>可选类型</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArrNumber</span> &#123;<br>    [<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">arr</span>: <span class="hljs-title class_">ArrNumber</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>函数重载，函数重载是函数名相同，但是传入参数不同，(js中函数重复名，会被替代)</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">param: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">void</span> &#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (<span class="hljs-attr">param</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">param2</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">void</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Man</span> &#123;<br>    <span class="hljs-attr">sex</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">XIAOMING</span> = (<span class="hljs-attr">man</span>: <span class="hljs-title class_">People</span> &amp; <span class="hljs-title class_">Man</span>): <span class="hljs-built_in">void</span> &#123;&#125; <span class="hljs-comment">// name,age,sex</span><br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-attr">sex</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">XIAOHONG</span> = (<span class="hljs-attr">woman</span>: <span class="hljs-title class_">Woman</span>): <span class="hljs-built_in">void</span> &#123;&#125; <span class="hljs-comment">// name,age,sex</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">People</span>, <span class="hljs-title class_">Man</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">protected</span> name: <span class="hljs-built_in">string</span>,<span class="hljs-keyword">protected</span> age: <span class="hljs-built_in">number</span>, <span class="hljs-keyword">protected</span> sex: <span class="hljs-built_in">string</span></span>) &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Man</span> &#123;<br>    <span class="hljs-attr">sex</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">XIAOMING</span> = (<span class="hljs-attr">man</span>: <span class="hljs-title class_">People</span> | <span class="hljs-title class_">Man</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( (man <span class="hljs-keyword">as</span> <span class="hljs-title class_">People</span>).<span class="hljs-property">name</span> );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( (&lt;<span class="hljs-title class_">People</span>&gt;man).<span class="hljs-property">name</span>)  <span class="hljs-comment">// 两种断言方法相等</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><blockquote><p><a href="https://github.com/microsoft/TypeScript/tree/main/src/lib">更多类型</a></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">liList</span>: <span class="hljs-title class_">NodeList</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;#list li&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-attr">body</span>: <span class="hljs-title class_">HTMLElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">div</span>: <span class="hljs-title class_">HTMLDivElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>( <span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e: MouseEvent</span>) =&gt;</span> &#123;&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;  <span class="hljs-comment">// 只能在class内部访问</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;  <span class="hljs-comment">// 可以在内部和继承类中访问</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-attr">sex</span>: <span class="hljs-built_in">string</span>;   <span class="hljs-comment">// 只能用类名··访问</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>,age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property">sex</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">walk</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>()  <span class="hljs-comment">// 静态之间可以互相访问</span><br>    &#125;<br><br>    <span class="hljs-keyword">static</span>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;XIAOMING&#x27;</span>,<span class="hljs-number">10</span>).<span class="hljs-property">name</span>  <span class="hljs-comment">// error</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;XIAOHONG&#x27;</span>,<span class="hljs-number">12</span>).<span class="hljs-property">age</span>   <span class="hljs-comment">// error </span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">super</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> <span class="hljs-comment">//false</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> <span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/README.zh-CN.md">type-challenges</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wangtunan.github.io/blog/typescript/base.html#%E7%9B%AE%E5%BD%95">Typescript</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>enum</title>
    <link href="/blog/2023/10/Typescript/enum/"/>
    <url>/blog/2023/10/Typescript/enum/</url>
    
    <content type="html"><![CDATA[<h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><p><a href="https://hijiangtao.github.io/2020/07/13/Examples-Of-TypeScript-Enum-Type/">enum</a></p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123; <br>  <span class="hljs-title class_">Red</span> = <span class="hljs-number">2</span>,<br>  <span class="hljs-title class_">Green</span>,<br>  <span class="hljs-title class_">Blue</span><br>&#125;;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Blue</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c)  <span class="hljs-comment">// 4</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">d</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>[<span class="hljs-number">2</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d)  <span class="hljs-comment">// Red</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>元组</title>
    <link href="/blog/2023/10/Typescript/%E5%85%83%E7%BB%84/"/>
    <url>/blog/2023/10/Typescript/%E5%85%83%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><blockquote><p>any[] 可以存储任意类型的数组,元组可以作为参数传递给函数</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>x = [<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-number">1</span>]  <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Css</title>
    <link href="/blog/2023/10/Style/style/"/>
    <url>/blog/2023/10/Style/style/</url>
    
    <content type="html"><![CDATA[<figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">// 在rgba中使用&#x27;#ffffff&#x27;颜色格式</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color</span>: <span class="hljs-variable">$uni-color-error</span>, <span class="hljs-variable">$alpha</span>: <span class="hljs-number">0.3</span>)<br><br><br>    @for <span class="hljs-variable">$i</span> from <span class="hljs-number">0</span> through <span class="hljs-number">24</span> &#123;<br>      <span class="hljs-selector-class">.width-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(#&#123;<span class="hljs-variable">$i</span> * <span class="hljs-number">4.1666%</span>&#125; - <span class="hljs-number">4px</span>) !important;<br>      &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>windows 下快速生成目录树结构</title>
    <link href="/blog/2023/10/Tools/GenerateFolderDirectory/"/>
    <url>/blog/2023/10/Tools/GenerateFolderDirectory/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-下快速生成目录树结构"><a href="#windows-下快速生成目录树结构" class="headerlink" title="windows 下快速生成目录树结构"></a>windows 下快速生成目录树结构</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tree [drive][path] [/F] [/A]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">/f 显示所有目录及目录下的所有文件，省略时，只显示目录，不显示目录下的文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/a 使用ASCII字符，而不使用扩展字符</span><br></code></pre></div></td></tr></table></figure><p>Example: </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tree E:\_Luffy\Markdown &gt; E:result.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成 E:\_Luffy\Markdown 的目录到 E盘下的result.txt文件</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>system</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandoc</title>
    <link href="/blog/2023/10/Tools/Pandoc/"/>
    <url>/blog/2023/10/Tools/Pandoc/</url>
    
    <content type="html"><![CDATA[<h1 id="Pandoc"><a href="#Pandoc" class="headerlink" title="Pandoc"></a>Pandoc</h1><blockquote><p>A Haskell library to turn everything to everything</p></blockquote><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a><a href="https://pandoc.org/installing.html">Install</a></h2><ol><li>Download and install it.</li><li>Terminal input <code>pandoc --version</code> to ensure install truely.</li></ol><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a><a href="https://pandoc.org/getting-started.html">Usage</a></h2><h3 id="Usage-In-Terminal"><a href="#Usage-In-Terminal" class="headerlink" title="Usage In Terminal"></a>Usage In Terminal</h3><h4 id="Open-terminal-and-use-it"><a href="#Open-terminal-and-use-it" class="headerlink" title="Open terminal and use it"></a>Open terminal and use it</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">// Input pandoc and hit enter<br>pandoc<br>// Type follow word<br>Hello *pandoc*!<br><br>- one<br>- two<br>// Type `ctrl+d` to end type<br>&lt;p&gt;Hello &lt;em&gt;pandoc&lt;/em&gt;!&lt;/p&gt;<br>&lt;ul&gt;<br>&lt;li&gt;one&lt;/li&gt;<br>&lt;li&gt;two&lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></div></td></tr></table></figure><h4 id="How-to-Turn-Html-to-Markdown"><a href="#How-to-Turn-Html-to-Markdown" class="headerlink" title="How to Turn Html to Markdown"></a>How to Turn Html to Markdown</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pandoc -f html -t markdown<br></code></pre></div></td></tr></table></figure><p><code>-f</code> is mean from;<br><code>-t</code> is</p><h3 id="Usage-in-file"><a href="#Usage-in-file" class="headerlink" title="Usage in file"></a>Usage in file</h3><ol><li>Type a markdown file</li><li>Open terminal and <code>cd</code> the file directory and type<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pandoc test1.md -f markdown -t html -s -o test1.html<br></code></pre></div></td></tr></table></figure><code>test1.md</code> is the origin file;<br><code>-s</code> is to create a ‘standalone’ file;<br><code>-o test1.html</code> is to put the output in the file test1.html</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用正则表达式</title>
    <link href="/blog/2023/10/Tools/RegularExpression/"/>
    <url>/blog/2023/10/Tools/RegularExpression/</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li><p>正数</p><blockquote><p>^(0|[1-9][0-9]*)(.\d+)?$</p></blockquote></li><li><p>自然数</p><blockquote><p>^([0-9]|<a href="%5B0-9%5D+">1-9</a>?)$</p></blockquote></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Observable</title>
    <link href="/blog/2023/10/RxJS/Observable/"/>
    <url>/blog/2023/10/RxJS/Observable/</url>
    
    <content type="html"><![CDATA[<h1 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h1><blockquote><p>观察者模式推送数据 + 迭代器修改数据</p></blockquote><h2 id="Observer-Pattern-观察者模式"><a href="#Observer-Pattern-观察者模式" class="headerlink" title="Observer Pattern 观察者模式"></a><code>Observer Pattern</code> 观察者模式</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span> = []<br>&#125;<br><br><span class="hljs-title function_">addListener</span>(<span class="hljs-params">listener</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> listener === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">publish</span>(listener)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;listener must be a function&#x27;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-title function_">removeListener</span>(<span class="hljs-params">listener</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">indexOf</span>(listener))<br>&#125;<br><br><span class="hljs-title function_">notify</span>(<span class="hljs-params">message</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">listener</span> =&gt;</span> &#123;<br><span class="hljs-title function_">listener</span>(message)<br>&#125;)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Iterator-Pattern-迭代器"><a href="#Iterator-Pattern-迭代器" class="headerlink" title="Iterator Pattern 迭代器"></a><code>Iterator Pattern</code> 迭代器</h2><blockquote><p>延迟运算<br>序列，可以使用<code>map</code>,<code>filter</code>等方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 原生</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> iterator = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 1, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 1, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 1, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: undefined, done: true &#125;</span><br><br><span class="hljs-comment">// 手写迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IteratorFromArray</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">arr</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_array</span> = arr;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_cursor</span> = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_cursor</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_array</span>.<span class="hljs-property">length</span> ? <br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_array</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">_cursor</span>++], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125; :<br>&#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>rxjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rxjs</title>
    <link href="/blog/2023/10/RxJS/concept/"/>
    <url>/blog/2023/10/RxJS/concept/</url>
    
    <content type="html"><![CDATA[<h1 id="Rxjs"><a href="#Rxjs" class="headerlink" title="Rxjs"></a>Rxjs</h1><blockquote><p>异步行为解决方案</p></blockquote><h3 id="常见异步行为"><a href="#常见异步行为" class="headerlink" title="常见异步行为"></a>常见异步行为</h3><ol><li><code>Race Condition</code></li></ol><ul><li>对同一资源同时多次(异步)存取</li></ul><ol start="2"><li><code>Memory Condition</code></li></ol><ul><li><code>SPA</code>页面对<code>DOM</code>注册监听事件,切换页面没有取消事件监听时</li></ul><ol start="3"><li><code>Complex State</code></li><li><code>Exception Handling</code></li></ol><h3 id="异步API"><a href="#异步API" class="headerlink" title="异步API"></a>异步API</h3><ul><li>DOM Events</li><li>XMLHttpRequest</li><li>Fetch</li><li>WebSockets</li><li>Server Send Events</li><li>Service Worker</li><li>Node Stream</li><li>Timer</li></ul><h3 id="Functional-Reactive-Programming"><a href="#Functional-Reactive-Programming" class="headerlink" title="Functional Reactive Programming"></a><code>Functional Reactive Programming</code></h3><blockquote><p><code>Functional Reactive Programming</code> = <code>Functional Programming</code> + <code>Reactive Programming</code></p></blockquote><h4 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a><code>Functional Programming</code></h4><ol><li>函数是一等公民</li></ol><ul><li>函数可以赋值给变量，可以作为参数或回调</li></ul><ol start="2"><li><code>Pure Function</code></li></ol><ul><li>一个函数给予相同的参数，永远会有相同的返回值;</li><li><code>Side Effect</code> 函数副作用（如 http request, console, get input, query DOM）</li></ul><h4 id="Reactive-Programming"><a href="#Reactive-Programming" class="headerlink" title="Reactive Programming"></a><code>Reactive Programming</code></h4><p> <a href="https://blog.jerry-hong.com/series/rxjs/thirty-days-rxjs-01">30 天精通 RxJS</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>rxjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SciCharts</title>
    <link href="/blog/2023/10/SciCharts/chart/"/>
    <url>/blog/2023/10/SciCharts/chart/</url>
    
    <content type="html"><![CDATA[<h1 id="SciCharts"><a href="#SciCharts" class="headerlink" title="SciCharts"></a>SciCharts</h1><h2 id="SciCharts-Type"><a href="#SciCharts-Type" class="headerlink" title="SciCharts Type"></a>SciCharts Type</h2><ul><li>线性图<br><a href="https://www.scichart.com/documentation/js/current/The%20Line%20Series%20Type.html">FastLineRenderableSeries</a></li><li>柱状图<br><a href="https://www.scichart.com/documentation/js/current/webframe.html#The%20Column%20Series%20Type.html">FastColumnsRenderableSeries</a></li><li>烛台<br><a href="https://www.scichart.com/documentation/js/current/webframe.html#The%20Candlestick%20Series%20type.html">FastCandlestickRenderableSeries</a></li><li>山区图<br><a href="https://www.scichart.com/documentation/js/current/webframe.html#The%20Mountain%20(Area)%20Series%20Type.html">FastMountainRenderableSeries</a></li><li>热度图<br><a href="https://www.scichart.com/documentation/js/current/webframe.html#The-Uniform-Heatmap-Chart-Type.html">FastUniformHeatmapRenderableSeries</a><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 根据ID创建SciChart实例</span><br><span class="hljs-keyword">const</span> &#123; sciChartSurface, wasmContext &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title class_">SciChartSurface</span>.<span class="hljs-title function_">create</span>(<span class="hljs-string">&quot;scichart-root&quot;</span>);<br><span class="hljs-comment">// 创建X,Y轴</span><br><span class="hljs-keyword">const</span> xAxis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumericAxis</span>(wasmContext);<br><span class="hljs-keyword">const</span> yAxis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumericAxis</span>(wasmContext);<br>sciChartSurface.<span class="hljs-property">xAxes</span>.<span class="hljs-title function_">add</span>(xAxis);<br>sciChartSurface.<span class="hljs-property">yAxes</span>.<span class="hljs-title function_">add</span>(yAxis);<br><span class="hljs-keyword">const</span> renderableSeries = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastLineRenderableSeries</span>(wasmContext);<br>sciChartSurface.<span class="hljs-property">renderableSeries</span>.<span class="hljs-title function_">add</span>(renderableSeries);<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><ul><li>拖动缩放<br><a href="https://www.scichart.com/documentation/js/current/webframe.html#RubberBandXyZoomModifier.html">RubberBandXyZoomModifier</a></li><li>平移<br><a href="https://www.scichart.com/documentation/js/current/webframe.html#ZoomPanModifier.html">ZoomPanModifier</a></li><li>（双击）缩放<br><a href="https://www.scichart.com/documentation/js/current/webframe.html#ZoomExtentsModifier.html">ZoomExtentsModifier</a></li><li>滚轮缩放<br><a href="https://www.scichart.com/documentation/js/current/webframe.html#MouseWheelZoomModifier.html">MouseWheelZoomModifier</a></li></ul><h3 id="How-to-use-1"><a href="#How-to-use-1" class="headerlink" title="How to use"></a>How to use</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">MouseWheelZoomModifier</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;scichart/Charting/ChartModifiers/MouseWheelZoomModifier&quot;</span>;<br><br><span class="hljs-keyword">const</span> mouseWheelZoomModifier = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseWheelZoomModifier</span>();<br>sciChartSurface.<span class="hljs-property">chartModifiers</span>.<span class="hljs-title function_">add</span>(mouseWheelZoomModifier);<br><br><span class="hljs-comment">// 禁用修改器</span><br>mouseWheelZoomModifier.<span class="hljs-property">isEnabled</span> = <span class="hljs-literal">false</span>;<br></code></pre></div></td></tr></table></figure><h2 id="配置x-y轴名称"><a href="#配置x-y轴名称" class="headerlink" title="配置x,y轴名称"></a>配置x,y轴名称</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 声明SciChart类型,配置线名称和厚度</span><br><span class="hljs-keyword">const</span> lineSeries = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastLineRenderableSeries</span>(wasmContext, &#123; <span class="hljs-attr">stroke</span>: <span class="hljs-string">&quot;#4083B7&quot;</span>, <span class="hljs-attr">strokeThickness</span>: <span class="hljs-number">2</span> &#125;);<br><span class="hljs-comment">// 声明数据</span><br><span class="hljs-keyword">const</span> lineData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XyDataSeries</span>(wasmContext, &#123; <span class="hljs-attr">dataSeriesName</span>: <span class="hljs-string">&quot;X轴名称&quot;</span> &#125;);<br><span class="hljs-comment">// 定义数据</span><br>lineData = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-comment">// 初始化</span><br>lineSeries.<span class="hljs-property">dataSeries</span> = lineData<br></code></pre></div></td></tr></table></figure><h2 id="Realtime-updates"><a href="#Realtime-updates" class="headerlink" title="Realtime updates"></a>Realtime updates</h2><blockquote><p>RenderableSeries呈现数据，而DataSeries保存X、Y数据并管理更新</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> phase = <span class="hljs-number">0.0</span>;    <br>   <br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateDataFunc</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>        lineData.<span class="hljs-title function_">update</span>(i, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(i * <span class="hljs-number">0.1</span> + phase));<br>    &#125;<br>    phase += <span class="hljs-number">0.01</span>;<br>    <span class="hljs-comment">// Repeat at 60Hz</span><br>    <span class="hljs-built_in">setTimeout</span>(updateDataFunc, <span class="hljs-number">1</span>/<span class="hljs-number">60</span>);<br>&#125;;<br><span class="hljs-title function_">updateDataFunc</span>();<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Library</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2023/10/Style/Bootstrap/Bootstrap/"/>
    <url>/blog/2023/10/Style/Bootstrap/Bootstrap/</url>
    
    <content type="html"><![CDATA[<!doctype html><html lang="en">  <head>    <meta charset="utf-8">    <meta name="viewport" content="width=device-width, initial-scale=1">    <title>Bootstrap demo</title>    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">  </head>  <body>    <div class="container">      <form>        <div class="mb-3">          <label for="exampleInputEmail1" class="form-label">Email address</label>          <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">          <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>        </div>        <div class="mb-3">          <label for="exampleInputPassword1" class="form-label">Password</label>          <input type="password" class="form-control" id="exampleInputPassword1">        </div>        <div class="mb-3 form-check">          <input type="checkbox" class="form-check-input" id="exampleCheck1">          <label class="form-check-label" for="exampleCheck1">Check me out</label>        </div>        <button type="submit" class="btn btn-primary">Submit</button>      </form>    </div>    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>  </body></html>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npm</title>
    <link href="/blog/2023/10/Nodejs/npm/"/>
    <url>/blog/2023/10/Nodejs/npm/</url>
    
    <content type="html"><![CDATA[<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><ol><li><code>npm ls -g --depth=0</code> Check all global installed package.</li></ol><h3 id="ep-资源库"><a href="#ep-资源库" class="headerlink" title="ep. 资源库"></a>ep. 资源库</h3><h4 id="动画库"><a href="#动画库" class="headerlink" title="动画库"></a>动画库</h4><p><a href="../Style/greensock/greensock">greensock</a></p><h4 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h4><p><a href="https://ionic.io/ionicons/usage">ionicons</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2023/10/Nodejs/nvm/"/>
    <url>/blog/2023/10/Nodejs/nvm/</url>
    
    <content type="html"><![CDATA[<h1 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h1><blockquote><p>nodejs 版本管理工具</p></blockquote><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><a href="https://github.com/coreybutler/nvm-windows">Nvm install</a></p><h3 id="Mac-m1"><a href="#Mac-m1" class="headerlink" title="Mac m1"></a>Mac m1</h3><p><a href="https://juejin.cn/post/7102388522744545310">nvm安装</a></p><p><em>Usage</em><br> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nvm list<br>nvm install &lt;node version&gt;<br>nvm use &lt;node version&gt;<br></code></pre></div></td></tr></table></figure></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HomeBrew</title>
    <link href="/blog/2023/10/Package-Details/Homebrew/"/>
    <url>/blog/2023/10/Package-Details/Homebrew/</url>
    
    <content type="html"><![CDATA[<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><h1 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">arch -x86_64 brew install &lt;package&gt;<br><br>// file path<br>usr/local/Cellar/<br></code></pre></div></td></tr></table></figure><h1 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">brew install &lt;package&gt;<br><br>// file path<br>opt/homebrew/Cellar/<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA &amp; WebStorm</title>
    <link href="/blog/2023/10/Package-Details/IDEA&amp;WebStorm/"/>
    <url>/blog/2023/10/Package-Details/IDEA&amp;WebStorm/</url>
    
    <content type="html"><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h2 id="Hot-key"><a href="#Hot-key" class="headerlink" title="Hot key"></a>Hot key</h2><ul><li>ctrl + i</li></ul><ul><li>实现接口方法</li></ul><ul><li>ctrl + j</li></ul><ul><li>自动代码片段</li></ul><ul><li>ctrl + h</li></ul><ul><li>查看当前类的子类</li></ul><ul><li>ctrl + alt + u</li></ul><ul><li>显示类之间的关系</li></ul><ul><li>ctrl + alt + o</li></ul><ul><li>删除类中没有用到的package</li></ul><ul><li>ctrl + f12</li></ul><ul><li>找到controler,定位代码位置</li></ul><ul><li>ctrl + ~</li></ul><ul><li>常用主题,显示模式,快捷键配置</li></ul><ul><li>ctrl + alt + L </li></ul><ul><li>格式化代码</li></ul><ul><li>ctrl + w</li></ul><ul><li>选中并扩大当前选择(其他软件为关闭当前页)</li></ul><ul><li>alt + arrow</li></ul><ul><li>切换窗口</li></ul><ul><li>ctrl + shift + i</li></ul><ul><li>展开方法提示</li></ul><ul><li>alt + ~</li></ul><ul><li>git 快捷操作</li></ul><ul><li>ctrl + alt + v 重构变量</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>bpmn.js</title>
    <link href="/blog/2023/10/Packages/bpmn/CustomProperty/"/>
    <url>/blog/2023/10/Packages/bpmn/CustomProperty/</url>
    
    <content type="html"><![CDATA[<h3 id="Get-Property"><a href="#Get-Property" class="headerlink" title="Get Property"></a>Get Property</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">element.<span class="hljs-property">businessObject</span><br></code></pre></div></td></tr></table></figure><h3 id="Update-Property"><a href="#Update-Property" class="headerlink" title="Update Property"></a>Update Property</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> modeling = bpmnJS.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;modeling&#x27;</span>);<br><br>modeling.<span class="hljs-title function_">updateProperties</span>(sequenceFlowElement, &#123;<br>  <span class="hljs-attr">conditionExpression</span>: newCondition<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="Update-Color"><a href="#Update-Color" class="headerlink" title="Update Color"></a>Update Color</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> modeling = bpmnJS.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;modeling&#x27;</span>);<br>modeling.<span class="hljs-title function_">setColor</span>(sequenceFlowElement, &#123;<br>  <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#ccc&#x27;</span>, <span class="hljs-comment">// 填充色</span><br>  <span class="hljs-attr">stroke</span>: <span class="hljs-literal">null</span>。<span class="hljs-comment">// 边框色和label色</span><br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Library</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mongodb</title>
    <link href="/blog/2023/10/Nodejs/MongoDB/start_win/"/>
    <url>/blog/2023/10/Nodejs/MongoDB/start_win/</url>
    
    <content type="html"><![CDATA[<h2 id="Window-Mongodb-Install-6-0-6"><a href="#Window-Mongodb-Install-6-0-6" class="headerlink" title="Window Mongodb Install 6.0.6"></a>Window Mongodb Install 6.0.6</h2><ol><li>Install MongoDB Community version </li></ol><ul><li>default data path: <code>C:\Program Files\MongoDB\Server\6.0\data</code></li><li>default log path <code>C:\Program Files\MongoDB\Server\6.0\log</code></li><li>添加系统环境变量 path 中添加 <code>C:\Program Files\MongoDB\Server\6.0\bin</code> </li></ul><ol start="2"><li><a href="https://www.mongodb.com/try/download/compass">Install MongoDB Shell</a></li></ol><ul><li>Copy file to <code>C:\Program Files\MongoDB\Server\6.0\bin</code></li></ul><h2 id="mac-安装mongodb"><a href="#mac-安装mongodb" class="headerlink" title="mac 安装mongodb"></a>mac 安装mongodb</h2><ol><li>brew tap mongodb/brew</li><li>brew update</li><li>brew install <a href="mailto:&#x6d;&#111;&#x6e;&#103;&#x6f;&#100;&#x62;&#45;&#x63;&#111;&#x6d;&#x6d;&#117;&#110;&#105;&#116;&#x79;&#x40;&#x36;&#46;&#48;">&#x6d;&#111;&#x6e;&#103;&#x6f;&#100;&#x62;&#45;&#x63;&#111;&#x6d;&#x6d;&#117;&#110;&#105;&#116;&#x79;&#x40;&#x36;&#46;&#48;</a></li><li>brew services start <a href="mailto:&#109;&#x6f;&#x6e;&#x67;&#x6f;&#100;&#x62;&#45;&#x63;&#111;&#x6d;&#109;&#117;&#110;&#x69;&#x74;&#121;&#x40;&#x36;&#46;&#x30;">&#109;&#x6f;&#x6e;&#x67;&#x6f;&#100;&#x62;&#45;&#x63;&#111;&#x6d;&#109;&#117;&#110;&#x69;&#x74;&#121;&#x40;&#x36;&#46;&#x30;</a></li></ol><ul><li>brew services stop mongodb-community</li><li>brew services list // 查看服务是否启动</li></ul><ol start="5"><li>mongosh</li></ol><p><code>mongod --version</code>  查看mongod是否安装成功</p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>命令行工具： <code>mongosh.exe</code></p><ul><li><code>show dbs</code> 查看已连接的数据库</li><li><code>use &lt;database&gt;</code> 切换数据库(如果没有则创建)</li><li><code>show collections</code> 查看所有的表名</li><li><code>db.&lt;collection&gt;.find( &#123; name: &#39;Luffy&#39; &#125; )</code> 查询数据</li><li><code>db.&lt;collection&gt;.updateOne(&#123; name: &quot;Luffy&quot; &#125;, &#123; $set: &#123; age: 35 &#125; &#125;)</code> 修改数据</li><li><code>db.&lt;collection&gt;.deleteOne(&#123; name: &quot;Luffy&quot; &#125;)</code> 删除数据</li><li><code>db.&lt;collection&gt;.insertOne(&#123; name: &quot;Luffy&quot;, age: 30 &#125;)</code> 添加数据</li></ul><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p><code>db.&lt;表名称&gt;.insert(&lt;json数据&gt;)</code> 数据库表插入数据<br><code>db.&lt;表名称&gt;.insertMany(&lt;数组数据&gt;)</code> 数据库表插入多个数据</p><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p><code>db.&lt;表名称&gt;.remove(&lt;json查询要删除的数据&gt;)</code> 删除表中的某条数据</p><ul><li>db.test.update({‘name’: ‘xiaoming’}, {$set:{‘job’: ‘student’}})<br><code>db.&lt;表名称&gt;.drop()</code> 删除表</li></ul><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p><code>db.&lt;表名称&gt;.update(&lt;json查找要更新的数据&gt;, &lt;更新的数据&gt;)</code> 数据库表的所有数据</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul><li><code>db.&lt;表名称&gt;.find()</code> 数据库表的所有数据<ul><li>db.&lt;表名称&gt;.find({‘name’: ‘luffy’}) 查询表中所有 name: luffy的数据</li><li>db.&lt;表名称&gt;.find({‘name’: ‘luffy’}).pretty() 转化为易读json格式 </li><li>db.&lt;表名称&gt;.find({}, {‘name’: 1 }) 查询所有数据,但只显示每条数据的name</li><li>db.&lt;表名称&gt;.find({‘price’: {$gt: 10}}) 查询价格大于10的所有数据</li></ul></li><li>$or, $and, $all, $in<ul><li>db.&lt;表名称&gt;.find({$or: [{‘price’: {$gt: 10}}, {‘rating: {$lt: 8}’}]}) 查询价格大于10或rate小于8的所有数据</li><li>db.&lt;表名称&gt;.find({‘type’: {$all: [‘a’, ‘b’]}}) 查询价格type数组里同时有a,b的所有数据</li></ul></li><li>other<ul><li>…count() 显示总数</li><li>…limit(10) 限制查询10条数据</li><li>…sort({‘name’: 1}) 名称按正序排序</li><li>…skip(2) 跳过2个元素</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typegoose</title>
    <link href="/blog/2023/10/Nodejs/MongoDB/typegoose/"/>
    <url>/blog/2023/10/Nodejs/MongoDB/typegoose/</url>
    
    <content type="html"><![CDATA[<h1 id="typegoose"><a href="#typegoose" class="headerlink" title="typegoose"></a>typegoose</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install node @types/node ts-node mongoose @typegoose/typegoose<br></code></pre></div></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nestjs</title>
    <link href="/blog/2023/10/Nodejs/NestJs/index/"/>
    <url>/blog/2023/10/Nodejs/NestJs/index/</url>
    
    <content type="html"><![CDATA[<h1 id="NestJs"><a href="#NestJs" class="headerlink" title="NestJs"></a><a href="https://docs.nestjs.com/">NestJs</a></h1><p>Tips: node.js &gt; 16</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ol><li>npm i -g @nestjs/cli</li><li>nest new <projectA></li></ol><h2 id="多app-Project"><a href="#多app-Project" class="headerlink" title="多app Project"></a>多app Project</h2><p><code>nest g app &lt;appName&gt;</code> 生成子服务端</p><h3 id="生成公共多app共享文件"><a href="#生成公共多app共享文件" class="headerlink" title="生成公共多app共享文件"></a>生成公共多app共享文件</h3><p><code>nest g lib &lt;libs&gt;</code> 生成共享子目录，默认文件夹为<code>app</code>,可以更改为<code>@libs</code></p><h3 id="启动对应的app"><a href="#启动对应的app" class="headerlink" title="启动对应的app"></a>启动对应的app</h3><p><code>nest start &lt;appName&gt; -w</code></p><h2 id="命令行快速生成module，controller"><a href="#命令行快速生成module，controller" class="headerlink" title="命令行快速生成module，controller.."></a>命令行快速生成module，controller..</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看帮助</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nest -<span class="hljs-built_in">help</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">快速生成CRUD</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nest g resource [name]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成module = nest generate module &lt;ModuleName&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nest g mo &lt;ModuleName&gt;</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成controller = nest generate controller &lt;ControllerName&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果ModuleName=ControllerName,则controller会自动注入到module里</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nest g co &lt;ControllerName&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><code>@HttpCode(204)</code> 自定义状态码<br><code>@Header(&#39;Cache-Control&#39;, &#39;none&#39;)</code> 自定义响应头<br><code>@Redirect(&#39;https://nestjs.com&#39;, 301)</code> 重定向url</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Get</span>(<span class="hljs-string">&#x27;docs&#x27;</span>)<br>@<span class="hljs-title class_">Redirect</span>(<span class="hljs-string">&#x27;https://docs.nestjs.com&#x27;</span>, <span class="hljs-number">302</span>)<br><span class="hljs-title function_">getDocs</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 返回值会覆盖</span><br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://docs.nestjs.com/v5/&#x27;</span>, <span class="hljs-attr">statusCode</span>: <span class="hljs-number">200</span> &#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nestjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nestjs 接口文档</title>
    <link href="/blog/2023/10/Nodejs/NestJs/swagger/"/>
    <url>/blog/2023/10/Nodejs/NestJs/swagger/</url>
    
    <content type="html"><![CDATA[<h2 id="添加-swagger"><a href="#添加-swagger" class="headerlink" title="添加 swagger"></a><a href="https://docs.nestjs.com/openapi/introduction">添加 swagger</a></h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save @nestjs/swagger<br></code></pre></div></td></tr></table></figure><p>在<code>main.ts</code>添加swagger</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> config = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DocumentBuilder</span>()<br>  .<span class="hljs-title function_">setTitle</span>(<span class="hljs-string">&#x27;Blog&#x27;</span>)<br>  .<span class="hljs-title function_">setDescription</span>(<span class="hljs-string">&#x27;The Blog API description&#x27;</span>)<br>  .<span class="hljs-title function_">setVersion</span>(<span class="hljs-string">&#x27;1.0&#x27;</span>)<br>  .<span class="hljs-title function_">build</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable language_">document</span> = <span class="hljs-title class_">SwaggerModule</span>.<span class="hljs-title function_">createDocument</span>(app, config);<br><span class="hljs-title class_">SwaggerModule</span>.<span class="hljs-title function_">setup</span>(<span class="hljs-string">&#x27;api-docs&#x27;</span>, app, <span class="hljs-variable language_">document</span>);<br></code></pre></div></td></tr></table></figure><p>在服务中导航到/api-docs查看接口文档</p><h4 id="接口文档添加分类-ApiTags-和描述-ApiOperation"><a href="#接口文档添加分类-ApiTags-和描述-ApiOperation" class="headerlink" title="接口文档添加分类(ApiTags)和描述(ApiOperation)"></a>接口文档添加分类(ApiTags)和描述(ApiOperation)</h4><p>给controller添加ApiTags装饰器</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Controller</span>(<span class="hljs-string">&#x27;blogs&#x27;</span>)<br>@<span class="hljs-title class_">ApiTags</span>(<span class="hljs-string">&#x27;blogs&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogController</span> &#123;<br>@<span class="hljs-title class_">Get</span>()<br>@<span class="hljs-title class_">ApiOperation</span>(&#123; <span class="hljs-attr">summary</span>: <span class="hljs-string">&#x27;获取用户列表&#x27;</span>&#125;)<br><span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="接口文档添加requestBody"><a href="#接口文档添加requestBody" class="headerlink" title="接口文档添加requestBody"></a>接口文档添加requestBody</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">createUserDto</span>&#123;<br>@<span class="hljs-title class_">ApiProperty</span>()<br><span class="hljs-attr">name</span>: string<br><br>@<span class="hljs-title class_">ApiProperty</span>()<br><span class="hljs-attr">age</span>: number<br>&#125;<br><br>@<span class="hljs-title class_">Post</span>()<br>@<span class="hljs-title class_">ApiOperation</span>(&#123; <span class="hljs-attr">summary</span>: <span class="hljs-string">&#x27;创建用户&#x27;</span>&#125;)<br><span class="hljs-title function_">findAll</span>(<span class="hljs-params">@Body() body: createUserDto</span>)&#123;<br><span class="hljs-keyword">return</span> body<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nestjs</tag>
      
      <tag>swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express</title>
    <link href="/blog/2023/10/Nodejs/Express/express/"/>
    <url>/blog/2023/10/Nodejs/Express/express/</url>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="Static-files"><a href="#Static-files" class="headerlink" title="Static files"></a>Static files</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-comment">// 设置文件请求地址</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)))<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hot Update</title>
    <link href="/blog/2023/10/Nodejs/Express/hotUpdate/"/>
    <url>/blog/2023/10/Nodejs/Express/hotUpdate/</url>
    
    <content type="html"><![CDATA[<h1 id="hotUpdate-in-Express"><a href="#hotUpdate-in-Express" class="headerlink" title="hotUpdate in Express"></a>hotUpdate in Express</h1><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a><code>nodemon</code></h2><blockquote><p>Nodemon 是一个在开发过程中自动监视文件更改并重新启动 Node.js 应用程序的工具。</p></blockquote><ol><li>Install</li></ol><ul><li><code>npm install -g nodemon</code></li></ul><ol start="2"><li>Usage</li></ol><ul><li><code>nodemon app.js</code> (修改express启动方式由node改为nodemon)</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express + Typescript + Mongodb</title>
    <link href="/blog/2023/10/Nodejs/Express/index/"/>
    <url>/blog/2023/10/Nodejs/Express/index/</url>
    
    <content type="html"><![CDATA[<p><a href="./install.md">Project Create</a></p><p><a href="./hotUpdate.md">文件热更新</a></p><p><a href="">中间件-格式转换</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Run express</title>
    <link href="/blog/2023/10/Nodejs/Express/install/"/>
    <url>/blog/2023/10/Nodejs/Express/install/</url>
    
    <content type="html"><![CDATA[<h1 id="Express-Project-Create"><a href="#Express-Project-Create" class="headerlink" title="Express Project Create"></a>Express Project Create</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">// 创建项目文件夹<br>touch project-express<br>// 进入项目目录<br>cd project-express<br>// 初始化项目<br>npx init -y<br>// 安装express<br>npx add express<br>// 安装ts及express ts包<br>npx add -D typescript @types/node @types/express<br>// 生成tsconfig配置文件 选择node<br>npx tsconfig.json <br>// 安装ts-node-dev热更新<br>npx add -D ts-node-dev<br>// 安装nodemon热更新<br>npx add -D nodemon ts-node<br><br>// 创建index目录<br>src/index.ts<br>// 更改文件启动package.json<br>&quot;scripts&quot;: &#123;<br>  &quot;build&quot;: &quot;npx tsc&quot;,<br>  &quot;start&quot;: &quot;ts-node-dev --respawn src/index.ts&quot;,<br>  &quot;dev&quot;: &quot;nodemon --exec ts-node src/index.ts&quot;<br>&#125;,<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>auth</title>
    <link href="/blog/2023/10/Nodejs/Express/auth/"/>
    <url>/blog/2023/10/Nodejs/Express/auth/</url>
    
    <content type="html"><![CDATA[<h1 id="Password-in-Express"><a href="#Password-in-Express" class="headerlink" title="Password in Express"></a>Password in Express</h1><h2 id="pbkdf2-password"><a href="#pbkdf2-password" class="headerlink" title="pbkdf2-password"></a><code>pbkdf2-password</code></h2><blockquote><p>用于在Node.js中处理密码的中间件，它使用PBKDF2哈希算法来加密密码。它可以很好地与Express框架一起使用。</p></blockquote><ol><li><code>npm install pbkdf2-password</code></li><li>Usage<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> pbkdf2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;pbkdf2-password&#x27;</span>)();<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;));<br><br><span class="hljs-comment">// 定义一个用于验证密码的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">authenticateUser</span>(<span class="hljs-params">username, password, done</span>) &#123;<br>  <span class="hljs-comment">// 查询数据库以获取与用户名匹配的用户数据</span><br>  <span class="hljs-keyword">const</span> user = <span class="hljs-title function_">getUserFromDatabase</span>(username);<br><br>  <span class="hljs-keyword">if</span> (!user) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Invalid username or password&#x27;</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// 使用pbkdf2算法检查密码是否匹配</span><br>  <span class="hljs-title function_">pbkdf2</span>(&#123; password, <span class="hljs-attr">salt</span>: user.<span class="hljs-property">salt</span> &#125;, <span class="hljs-function">(<span class="hljs-params">err, hash</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(err);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (hash !== user.<span class="hljs-property">hash</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Invalid username or password&#x27;</span> &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, user);<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// 在此处定义路由和其他中间件</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server started on port 3000&#x27;</span>);<br>&#125;);<br><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>body-parser</title>
    <link href="/blog/2023/10/Nodejs/Express/body-parser/"/>
    <url>/blog/2023/10/Nodejs/Express/body-parser/</url>
    
    <content type="html"><![CDATA[<h1 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">const</span> jsonParser = bodyParser.<span class="hljs-title function_">json</span>()<br><span class="hljs-keyword">const</span> urlencodedParser = bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>,jsonParser, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CORS</title>
    <link href="/blog/2023/10/Nodejs/Express/cors/"/>
    <url>/blog/2023/10/Nodejs/Express/cors/</url>
    
    <content type="html"><![CDATA[<h1 id="CORS-in-Express"><a href="#CORS-in-Express" class="headerlink" title="CORS in Express"></a>CORS in Express</h1><blockquote><p>跨域问题</p></blockquote><ol><li><p>安装<code>cors</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">npm install cors --save-dev<br><br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br></code></pre></div></td></tr></table></figure></li><li><p>Handle</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Authorization,X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method&#x27;</span> )<br>res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;GET, POST, OPTIONS, PATCH, PUT, DELETE&#x27;</span>)<br>res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Allow&#x27;</span>, <span class="hljs-string">&#x27;GET, POST, PATCH, OPTIONS, PUT, DELETE&#x27;</span>)<br><span class="hljs-title function_">next</span>()<br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mongodb in Express</title>
    <link href="/blog/2023/10/Nodejs/MongoDB/mongodb/"/>
    <url>/blog/2023/10/Nodejs/MongoDB/mongodb/</url>
    
    <content type="html"><![CDATA[<h1 id="Mongodb-in-Express"><a href="#Mongodb-in-Express" class="headerlink" title="Mongodb in Express"></a>Mongodb in Express</h1><h2 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h2><blockquote><p>非关系形数据库</p></blockquote><ol><li><code>npm install mongodb</code> 在express项目中安装;</li><li>Usage</li></ol><p>全局数据库连接<code>db.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">MongoClient</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongodb&#x27;</span>);<br><br><span class="hljs-keyword">const</span> uri = <span class="hljs-string">&#x27;mongodb://localhost:27017/config&#x27;</span>;<br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoClient</span>(uri, &#123;<br>    <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">poolSize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">// 连接池大小为10</span><br>&#125;);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">await</span> client.<span class="hljs-title function_">connect</span>()<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;has Connect&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">connect</span>().<span class="hljs-title function_">then</span>();<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = client<br></code></pre></div></td></tr></table></figure><p>调用数据库连接并请求数据</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 引入db.js</span><br><span class="hljs-keyword">const</span> client = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/db&#x27;</span>)<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-comment">// 获取与查询匹配的文档</span><br>  <span class="hljs-keyword">const</span> db = client.<span class="hljs-title function_">db</span>();<br>  db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;user&#x27;</span>).<span class="hljs-title function_">find</span>().<span class="hljs-title function_">toArray</span>(<span class="hljs-function">(<span class="hljs-params">err, docs</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>      res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Failed to query users from MongoDB&#x27;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Found users:&#x27;</span>, docs);<br>    <span class="hljs-comment">// 将结果发送给客户端</span><br>    res.<span class="hljs-title function_">send</span>(docs);<br>  &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class</title>
    <link href="/blog/2023/10/Javascript/Class/"/>
    <url>/blog/2023/10/Javascript/Class/</url>
    
    <content type="html"><![CDATA[<h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><blockquote><p>类相当于对构造函数的封装</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<span class="hljs-comment">//this指向实例对象</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//相当于在构造函数的prototype中定义的方法</span><br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Person</span> <span class="hljs-comment">// function, 类的数据类型是函数</span><br><span class="hljs-title class_">Person</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>   <span class="hljs-comment">// true, 类本身指向构造函数</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">//true, name定义在this上</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;eat&#x27;</span>) <span class="hljs-comment">//false, 方法定义在原型上</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br><span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123;&#125;,<span class="hljs-comment">//既然类中的方法是在原型上的, 所以可以通过为原型添加方法的方式为类添加新方法</span><br><span class="hljs-title function_">drink</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><ul><li>类内部的方法不可枚举(构造函数可以)</li><li>必须使用new调用(构造函数可以直接调用)</li><li>类不存在变量提升</li></ul><h2 id="static-静态方法"><a href="#static-静态方法" class="headerlink" title="static 静态方法"></a>static 静态方法</h2><blockquote><p>类中的方法,都会被实例继承;但加上<code>static</code>关键字,该方法就只能通过类来调用<br>静态方法中的this指向类,而不是类的实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">baz</span>();<br>  &#125;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>  &#125;<br>  <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//静态和非静态方法可以重名</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;world&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">bar</span>() <span class="hljs-comment">// hello</span><br></code></pre></div></td></tr></table></figure><blockquote><p>静态方法可以被继承</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">classMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Foo</span> &#123;<br>&#125;<br><br><span class="hljs-title class_">Bar</span>.<span class="hljs-title function_">classMethod</span>() <span class="hljs-comment">// &#x27;hello&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="私有属性、私有方法"><a href="#私有属性、私有方法" class="headerlink" title="# 私有属性、私有方法"></a># 私有属性、私有方法</h2><blockquote><p>私有属性只能在类的内部使用(this.#count)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Num</span> &#123;<br>#count = <span class="hljs-number">0</span>;<br><span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(#count <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>);  <span class="hljs-comment">//true, 判断是否存在私有属性#count</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> counter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Num</span>();<br>counter.#count <span class="hljs-comment">// error</span><br></code></pre></div></td></tr></table></figure><h2 id="new-target-返回当前的Class-也可用于构造函数"><a href="#new-target-返回当前的Class-也可用于构造函数" class="headerlink" title="new.target 返回当前的Class(也可用于构造函数)"></a>new.target 返回当前的Class(也可用于构造函数)</h2><blockquote><p>当父类使用new.target, 子类继承父类的时候, new.target指向子类(此项特性可以写出不能独立使用, 必须继承之后才能使用的类)</p></blockquote><h2 id="extends-继承"><a href="#extends-继承" class="headerlink" title="extends 继承"></a>extends 继承</h2><blockquote><p>在子类的constructor中先调用super(),才能使用this<br>super()内部的this指向的是子类的实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>.<span class="hljs-property">name</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<span class="hljs-comment">// super.call(this)</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>() <span class="hljs-comment">// A</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>() <span class="hljs-comment">// B</span><br></code></pre></div></td></tr></table></figure><blockquote><p>super作为对象时, 在普通方法中, 指向父类的原型对象<br>super作为对象时, 在静态方法中, 指向父类</p></blockquote><h3 id="Test-Example"><a href="#Test-Example" class="headerlink" title="Test Example"></a>Test Example</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">super</span>.<span class="hljs-property">x</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">super</span>.<span class="hljs-property">x</span>); <span class="hljs-comment">// undefined</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>); <span class="hljs-comment">// 3</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>();<br></code></pre></div></td></tr></table></figure><blockquote><p>上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。</p></blockquote><h2 id="public、-private、-protected"><a href="#public、-private、-protected" class="headerlink" title="public、 private、 protected"></a>public、 private、 protected</h2><table><thead><tr><th>修饰符</th><th>当前类</th><th>同包</th><th>子类</th><th>其它包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ol><li>public, 公共的,被public修饰的类、方法、属性、可以跨类和跨包访问.</li><li>protected, 受保护的,被protected修饰的类、方法、属性、只能被本类、本包、不同包的子类所访问.</li><li>default, 默认的,在这种模式下,只能在同一个包内访问.</li><li>private, 私有的,被private修饰的类、方法、属性、只能被本类的对象所访问.</li></ol><blockquote><p>当构造函数修饰为 private 时, 该类不允许被继承或者实例化</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span> name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123; &#125;  <span class="hljs-comment">// error</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;tom&quot;</span>)  <span class="hljs-comment">//error</span><br></code></pre></div></td></tr></table></figure><blockquote><p>当构造函数修饰为 protected 时, 该类只允许被继承</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span> name;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123; &#125;  <br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;tom&quot;</span>)  <span class="hljs-comment">//error</span><br></code></pre></div></td></tr></table></figure><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><blockquote><p>修饰符和readonly还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-comment">// public name: string;</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)&#123;<br><span class="hljs-comment">// this.name = name;</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote><p>abstract 用于定义抽象类和其中的抽象方法<br>抽象类不允许被实例化<br>抽象类中的抽象方法必须被子类实现</p></blockquote><ul><li>[1] <a href="https://es6.ruanyifeng.com/#docs/class">ECMAScript 6 入门</a></li><li>[2] <a href="https://ts.xcatliu.com/advanced/class.html#typescript-%E4%B8%AD%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95">Typescript入门教程</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Pipes(管道)</title>
    <link href="/blog/2023/10/Angular/pipe/"/>
    <url>/blog/2023/10/Angular/pipe/</url>
    
    <content type="html"><![CDATA[<h3 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h3><p>管道实现内容超出显示省略号</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JS"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Pipe</span>, <span class="hljs-title class_">PipeTransform</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br>@<span class="hljs-title class_">Pipe</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;dataBind&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataBindPipe</span> implements <span class="hljs-title class_">PipeTransform</span> &#123;<br><br>  <span class="hljs-title function_">transform</span>(value?:string, length?: string):any&#123;<br>    <span class="hljs-keyword">if</span>(value&amp;&amp;value.<span class="hljs-property">length</span>&gt;length)&#123;<br>      <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, length) + <span class="hljs-string">&quot;...&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(value)&#123;<br>      <span class="hljs-keyword">return</span> value<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在模板中使用</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; &#x27;123456789&#x27; | dataBind: 6 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>最终显示: 123456…</p><p>在<code>ts</code>中使用</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">@<span class="hljs-title class_">Component</span>(&#123;&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">protected dataBind: DataBindPipe</span>) &#123;&#125;<br><br><span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 最终返回 1234567...</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataBind</span>.<span class="hljs-title function_">transform</span>(<span class="hljs-string">&#x27;123456789&#x27;</span>, <span class="hljs-number">7</span>)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular17</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序云开发</title>
    <link href="/blog/2023/10/Applet/Cloud/"/>
    <url>/blog/2023/10/Applet/Cloud/</url>
    
    <content type="html"><![CDATA[<h1 id="微信小程序云开发"><a href="#微信小程序云开发" class="headerlink" title="微信小程序云开发"></a>微信小程序云开发</h1><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><blockquote><p>小程序端</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 初始化数据库</span><br><span class="hljs-keyword">const</span> cloud =  wx.<span class="hljs-title function_">cloud</span>().<span class="hljs-title function_">database</span>();<br><br><span class="hljs-comment">// 查询数据库名为list中的数据信息</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DB</span> = cloud.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&quot;list&quot;</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>云函数端</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>)<br>cloud.<span class="hljs-title function_">init</span>(&#123;<br>  <span class="hljs-attr">env</span>: cloud.<span class="hljs-property">DYNAMIC_CURRENT_ENV</span><br>&#125;)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DB</span> = cloud.<span class="hljs-title function_">database</span>().<span class="hljs-title function_">collection</span>(<span class="hljs-string">&quot;list&quot;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="添加数据库信息"><a href="#添加数据库信息" class="headerlink" title="添加数据库信息"></a>添加数据库信息</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">add</span>(&#123;<br> <span class="hljs-attr">data</span>:&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiaoming&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br> &#125;,<br> <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;添加成功&quot;</span>, res)<br> &#125;,<br> <span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;添加失败&quot;</span>, res)<br> &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="查询数据库信息"><a href="#查询数据库信息" class="headerlink" title="查询数据库信息"></a>查询数据库信息</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">get</span>(&#123;<br> <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;查询数据成功&quot;</span>, res)<br> &#125;,<br> <span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;查询数据失败&quot;</span>, res)<br> &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="删除数据库信息"><a href="#删除数据库信息" class="headerlink" title="删除数据库信息"></a>删除数据库信息</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 根据自动生成的id删除对应数据</span><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">doc</span>(id).<span class="hljs-title function_">remove</span>(&#123;<br> <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除成功&quot;</span>, res)<br> &#125;,<br> <span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除失败&quot;</span>, res)<br> &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="修改数据库信息"><a href="#修改数据库信息" class="headerlink" title="修改数据库信息"></a>修改数据库信息</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 根据自动生成的id修改对应数据</span><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">doc</span>(id).<span class="hljs-title function_">update</span>(&#123;<br> <span class="hljs-attr">data</span>:&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;li&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">12</span><br> &#125;,<br> <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除成功&quot;</span>, res)<br> &#125;,<br> <span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除失败&quot;</span>, res)<br> &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h2><h3 id="添加云函数"><a href="#添加云函数" class="headerlink" title="添加云函数"></a>添加云函数</h3><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs"><br></code></pre></div></td></tr></table></figure><h3 id="调用云函数"><a href="#调用云函数" class="headerlink" title="调用云函数"></a>调用云函数</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 调用add云函数</span><br>wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">callFunction</span>(&#123;<br> <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;add&quot;</span>,<br> <span class="hljs-attr">data</span>:&#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br> &#125;,<br> <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;请求成功&quot;</span>,res)<br> &#125;,<br> <span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;请求失败&quot;</span>,res)<br> &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="云开发"><a href="#云开发" class="headerlink" title="云开发"></a>云开发</h2><p>let db = wx.cloud.database();<br>const _ = db.command;</p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-title function_">splitPage</span>(<span class="hljs-params">_data: <span class="hljs-built_in">string</span>,pageSize: <span class="hljs-built_in">number</span>,start: <span class="hljs-built_in">number</span></span>) &#123;<br>  db.<span class="hljs-title function_">collection</span>(_data)<br>    .<span class="hljs-title function_">limit</span>(pageSize)<br>    .<span class="hljs-title function_">skip</span>(start)<br>    .<span class="hljs-title function_">get</span>()<br>    .<span class="hljs-title function_">then</span>( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求成功&#x27;</span>,res)<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>( <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求失败&#x27;</span>,err)<br>    &#125;)<br>&#125;<br><br><br><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">list</span>: []<br>&#125;,<br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params">options</span>) &#123;<br>  wx.<span class="hljs-title function_">showLoading</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;粪力加载中...&#x27;</span>&#125;);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getList</span>()<br>&#125;,<br><span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> startIndex = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span>;<br>  db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;data1&#x27;</span>)<br>    .<span class="hljs-title function_">skip</span>(startIndex)<br>    .<span class="hljs-title function_">get</span>()<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      wx.<span class="hljs-title function_">hideLoading</span>();<br>      <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>)&#123;<br>        wx.<span class="hljs-title function_">showToast</span>(&#123;<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;没有更多数据拉&#x27;</span><br>        &#125;)<br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setDate</span>(&#123;<br>        <span class="hljs-attr">list</span>: [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,...res.<span class="hljs-property">data</span>]<br>      &#125;)<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span>&#123;<br>      wx.<span class="hljs-title function_">hideLoading</span>();<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求失败&#x27;</span>, res)<br>    &#125;)<br>  &#125;,<br><span class="hljs-attr">onReachBottom</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getList</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//  价格大于5</span><br> db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;goods&#x27;</span>)<br>   .<span class="hljs-title function_">where</span>(&#123;<br>    <span class="hljs-attr">price</span>: _.<span class="hljs-title function_">gt</span>(<span class="hljs-number">5</span>)<br>   &#125;)<br>   .<span class="hljs-title function_">get</span>()<br>   .<span class="hljs-title function_">then</span>()<br><br><span class="hljs-comment">//  价格大于等于5 小于10</span><br> db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;goods&#x27;</span>)<br>   .<span class="hljs-title function_">where</span>(_.<span class="hljs-title function_">and</span>([&#123;<br>    <span class="hljs-attr">price</span>: _.<span class="hljs-title function_">gte</span>(<span class="hljs-number">5</span>)<br>   &#125;,&#123;<br>    <span class="hljs-attr">price</span>: _.<span class="hljs-title function_">lt</span>(<span class="hljs-number">10</span>)<br>   &#125;]))<br>   .<span class="hljs-title function_">get</span>()<br>   .<span class="hljs-title function_">then</span>()<br></code></pre></div></td></tr></table></figure><h2 id="云函数-1"><a href="#云函数-1" class="headerlink" title="云函数"></a>云函数</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cloud = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;wx-server-sdk&#x27;</span>);<br>cloud.<span class="hljs-title function_">init</span>(&#123;<br>  <span class="hljs-attr">env</span>: cloud.<span class="hljs-property">DYNAMIC_CURRENT_ENV</span><br>&#125;);<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">main</span> = <span class="hljs-keyword">async</span> (event, context) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> wxContext = cloud.<span class="hljs-title function_">getWXContext</span>()<br>  <span class="hljs-keyword">return</span> &#123;<br>    event,<br>    <span class="hljs-attr">openid</span>: wxContext.<span class="hljs-property">OPENID</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">callFunction</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;getD&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;云函数获取数据成功&#x27;</span>, res)<br>&#125;).<span class="hljs-title function_">catch</span>( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;云函数获取数据失败&#x27;</span>, res)<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序</title>
    <link href="/blog/2023/10/Applet/index/"/>
    <url>/blog/2023/10/Applet/index/</url>
    
    <content type="html"><![CDATA[<h2 id="globalData"><a href="#globalData" class="headerlink" title="globalData"></a>globalData</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// app.js</span><br><span class="hljs-title class_">App</span>(&#123;<br><span class="hljs-attr">globalData</span>: &#123;<br><span class="hljs-attr">userInfo</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Luffy&#x27;</span><br>&#125;<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">// abc.js</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getApp</span>();<br>app.<span class="hljs-property">globalData</span>.<span class="hljs-property">userInfo</span>.<span class="hljs-property">name</span> <span class="hljs-comment">// Luffy</span><br></code></pre></div></td></tr></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">data</span>: &#123;&#125;,<br><span class="hljs-attr">method</span>: &#123;<br><span class="hljs-attr">onLoad</span>: &#123;&#125;,<br>...<br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors"></a>behaviors</h2><blockquote><p>seems to mixin</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// my-behavior.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Behavior</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">sharedText</span>: <span class="hljs-string">&#x27;abc&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">sharedMethod</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">sharedText</span> === <span class="hljs-string">&#x27;This is a piece of data shared between pages.&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// page-a.js</span><br><span class="hljs-keyword">const</span> myBehavior = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./my-behavior.js&#x27;</span>)<br><span class="hljs-title class_">Page</span>(&#123;<br><span class="hljs-attr">behavior</span>: [myBehavior],<br><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">sharedText</span> === <span class="hljs-string">&#x27;This is a piece of data shared between pages.&#x27;</span><br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>if代码优化</title>
    <link href="/blog/2023/10/Complexity/if%20else/"/>
    <url>/blog/2023/10/Complexity/if%20else/</url>
    
    <content type="html"><![CDATA[<h1 id="优化代码中多个if-else"><a href="#优化代码中多个if-else" class="headerlink" title="优化代码中多个if...else..."></a>优化代码中多个<code>if...else...</code></h1><h2 id="简单判断"><a href="#简单判断" class="headerlink" title="简单判断"></a>简单判断</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserDescribe</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;小刘&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;刘哥哥&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;小红&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小红妹妹&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;陈龙&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;大师&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;李龙&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;师傅&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;大鹏&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;恶人&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;此人比较神秘！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>优化代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserDescribe</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">const</span> describeForNameMap = &#123;<br>        小刘: <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;刘哥哥&quot;</span>),<br>        小红: <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小红妹妹&quot;</span>),<br>        陈龙: <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;大师&quot;</span>),<br>        李龙: <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;师傅&quot;</span>),<br>        大鹏: <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;恶人&quot;</span>),<br>    &#125;;<br>    describeForNameMap[name] ? describeForNameMap[name]() : <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;此人比较神秘！&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="复杂判断"><a href="#复杂判断" class="headerlink" title="复杂判断"></a>复杂判断</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserDescribe</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">if</span> (name.<span class="hljs-property">length</span> &gt; <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;名字太长&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;名字太短&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;陈&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小陈&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;李&quot;</span> &amp;&amp; name !== <span class="hljs-string">&quot;李鹏&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小李&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;李鹏&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;管理员&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;此人比较神秘！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>优化代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> describeForNameMap = [<br>    [<br>        <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> name.<span class="hljs-property">length</span> &gt; <span class="hljs-number">3</span>, <span class="hljs-comment">// 判断条件</span><br>        <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;名字太长&quot;</span>) <span class="hljs-comment">// 执行函数</span><br>    ],<br>    [<br>        <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> name.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span>, <br>        <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;名字太短&quot;</span>)<br>    ],<br>    [<br>        <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> name[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;陈&quot;</span>, <br>        <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小陈&quot;</span>)<br>    ],<br>    [<br>        <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> name === <span class="hljs-string">&quot;大鹏&quot;</span>, <br>        <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;管理员&quot;</span>)<br>    ],<br>    [<br>        <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> name[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;李&quot;</span> &amp;&amp; name !== <span class="hljs-string">&quot;李鹏&quot;</span>,<br>        <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;小李&quot;</span>),<br>    ],<br>];<br>    <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserDescribe</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-comment">// 获取符合条件的子数组</span><br>    <span class="hljs-keyword">const</span> getDescribe = describeForNameMap.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item[<span class="hljs-number">0</span>](name));<br>    <span class="hljs-comment">// 子数组存在则运行子数组中的第二个元素（执行函数）</span><br>    getDescribe ? getDescribe[<span class="hljs-number">1</span>]() : <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;此人比较神秘！&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>代码优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/blog/2023/10/Git/git/"/>
    <url>/blog/2023/10/Git/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h2><p><code>git remote -v</code></p><h2 id="git-commit-standard"><a href="#git-commit-standard" class="headerlink" title="git commit standard"></a>git commit standard</h2><ul><li><p>type</p></li><li><p>bulid  – 对构建系统或者外部依赖进行修改</p></li><li><p>ci    – 对ci配置文件或脚本进行修改</p></li><li><p>docs  – 对文档进行修改 README,CHANGELOG,CONTRIBUTE..</p></li><li><p>feat  – 新功能 feature</p></li><li><p>fix   – 修复bug</p></li><li><p>pref  – 优化相关，如提升性能、体验</p></li><li><p>refactor  – 代码重构，没有新功能，没有修复bug</p></li><li><p>style  –修改了空格，缩进，格式化等，不改变代码逻辑</p></li><li><p>test   – 测试用例，包括单元测试，集成测试</p></li><li><p>revert – 回滚到上个版本</p></li><li><p>chore  – 改变构建流程、或者增加依赖库、工具等</p></li><li><p>scope</p></li><li><p>可以指定提交更改位置的任何内容</p></li><li><p>subject</p></li><li><p>首字母不大写，末尾不加标点</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;<br> &lt;BLANK LINE&gt;<br>  &lt;body&gt;<br> &lt;BLANK LINE&gt;<br>&lt;footer&gt;<br></code></pre></div></td></tr></table></figure><h3 id="git-commit-emoji"><a href="#git-commit-emoji" class="headerlink" title="git commit emoji"></a><a href="https://gitmoji.dev/">git commit emoji</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git commit -m &quot;:tada: 礼花emoji&quot;<br></code></pre></div></td></tr></table></figure><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><ol><li><a href="Questions/gitignore.md">generate <code>.gitignore</code> file</a></li></ol><h2 id="分支关联"><a href="#分支关联" class="headerlink" title="分支关联"></a>分支关联</h2><blockquote><p>git branch –set-upstream-to=origin/develop develop</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git config</title>
    <link href="/blog/2023/10/Git/index/"/>
    <url>/blog/2023/10/Git/index/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><p>config file <code>/User/&#123;username&#125;/.gitconfig</code></p><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><ol><li><code>Failed to connect to github.com port 443:connection timed out</code></li></ol><ul><li>Enter System Path <code>/private/etc/hosts</code> and add<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">140.82.114.3 github.com<br>199.232.69.194 github.global.ssl.fastly.net<br>185.199.108.153 assets-cdn.github.com<br>185.199.109.153 assets-cdn.github.com<br>185.199.110.153 assets-cdn.github.com<br></code></pre></div></td></tr></table></figure></li><li><code>sudo killall -HUP mDNSResponder</code> to update hosts</li></ul><ol start="2"><li><code>HTTP/2 stream 1 was not closed cleanly before end of the underlying stream</code></li></ol><ul><li>use <code>sudo git config --system http.version HTTP/1.1</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac M1</title>
    <link href="/blog/2023/10/MacM1/Mac-M1/"/>
    <url>/blog/2023/10/MacM1/Mac-M1/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac-M1"><a href="#Mac-M1" class="headerlink" title="Mac M1"></a>Mac M1</h1><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><br></code></pre></div></td></tr></table></figure><h2 id="Software-Install"><a href="#Software-Install" class="headerlink" title="Software Install"></a>Software Install</h2><blockquote><p>Package from homebrew</p></blockquote><ul><li><a href="Package-Details/Homebrew.md">Homebrew</a></li></ul><ul><li>install</li><li>Packages Router (‘./opt/homebrew/Cellar/‘)</li></ul><ul><li>PHP</li></ul><ul><li><code>php -S localhost:8000</code> Start Service</li></ul><ul><li>mysql</li></ul><ul><li><p><code>brew services start mysql</code></p><h2 id="Run-services"><a href="#Run-services" class="headerlink" title="Run services"></a>Run services</h2><p><code>brew services</code></p></li></ul><p>Run mongodb<br><code>brew services start mongodb-community</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Array</title>
    <link href="/blog/2023/10/Javascript/Array/"/>
    <url>/blog/2023/10/Javascript/Array/</url>
    
    <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="添加-删除元素"><a href="#添加-删除元素" class="headerlink" title="添加/删除元素:"></a>添加/删除元素:</h2><ul><li><p>arr.push()  //从尾端添加元素</p></li><li><p>arr.pop()   //从尾端提取元素</p></li><li><p>arr.shift()   //从前端提取元素</p></li><li><p>arr.unshift()  //从前端添加元素</p></li><li><p>arr.splice(index,num,arr) //从索引为index开始删除num个数组元素,并在当前位置插入arr</p></li><li><p>arr.slice(start,end) //返回索引start到end的数组</p></li><li><p>arr.concat(arr2) //合并数组并返回</p></li></ul><h2 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素:"></a>遍历元素:</h2><ul><li>arr.forEach() //数组为每个元素都运行一个函数</li></ul><ul><li>forEach, for, for..of   //遍历数组</li><li>map(func)  //遍历并新数组</li></ul><h2 id="搜索元素"><a href="#搜索元素" class="headerlink" title="搜索元素:"></a>搜索元素:</h2><ul><li><p>arr.indexOf()  //返回索引,找不到返回-1</p></li><li><p>arr.lastIndexOf()  //返回索引</p></li><li><p>arr.includes()  //返回true/false</p></li><li><p>arr.find(function(){…}) //返回单个元素</p></li><li><p>arr.findIndex() //返回索引</p></li><li><p>arr.filter(function(){…})  //返回多个元素</p></li></ul><h2 id="转换数组"><a href="#转换数组" class="headerlink" title="转换数组:"></a>转换数组:</h2><ul><li><p>arr.sort( (a,b) =&gt; a-b )  //数字排序</p></li><li><p>arr.sort( (a,b) =&gt; a.localeCompare(b) )  //字符串排序</p></li><li><p>arr.reverse()  //反转顺序</p></li><li><p>arr.reduce( (accumulator, item, index, array) =&gt; {..} )  //accumulartor是上次函数调用的结果</p></li><li><p>arr.reduceRight()</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><ul><li>Array.isArray(arr)  //检查arr是否是一个数组</li></ul><p>Array : toString();<br>toLocalString();<br>valueOf();<br>some();<br>every();<br>fliter();<br>forEach();<br>map( function(item,index,array){} );<br>reduce( function(prev,cur,index,array){} );<br>arr.sort( function(a,b){<br>return a-b;<br>})</p><blockquote><p>数组降维</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> array2d = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([].<span class="hljs-title function_">concat</span>(...array2d))<br><span class="hljs-comment">// 数组降维的另外一种方式, nodejs 11+ 支持</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array2d.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x))<br></code></pre></div></td></tr></table></figure><blockquote><p>数组拼接</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([...a,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,...b,<span class="hljs-number">33</span>,<span class="hljs-number">31</span>])<br></code></pre></div></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> value = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, item, index, array</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;, [initial]);<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">cur,item</span>) =&gt;</span> &#123;<span class="hljs-keyword">return</span> cur + item, <span class="hljs-number">0</span>&#125;)<br></code></pre></div></td></tr></table></figure><p> <code>accumulator</code> —— 是上一个函数调用的结果，第一次等于 initial（如果提供了 initial 的话）<br> <code>item</code> —— 当前的数组元素<br> <code>index</code> —— 当前索引<br> <code>arr</code> —— 数组本身<br> 上一个函数调用的结果将作为第一个参数传递给下一个函数<br> 如果没有<code>initial</code>, <code>accumulator</code>则为arr[0]</p> <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>arr.<span class="hljs-title function_">reduce</span>( <span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item, <span class="hljs-number">7</span>)<br><span class="hljs-comment">// sum 初始值为7，item为 1 第一次调用结果为 8 </span><br><br>arr.<span class="hljs-title function_">reduce</span>( <span class="hljs-function">(<span class="hljs-params">sum, item</span>) =&gt;</span> sum + item)<br><span class="hljs-comment">// sum 初始值为1，item为 2 第一次调用结果为 3</span><br></code></pre></div></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3> <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr.<span class="hljs-title function_">splice</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)    <span class="hljs-comment">// [1, 2, 3, 6]</span><br><span class="hljs-comment">// splice 允许索引为负值</span><br><span class="hljs-comment">// splice 改变原数组</span><br></code></pre></div></td></tr></table></figure><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h3> <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> []  <span class="hljs-comment">// Object</span><br>[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> <span class="hljs-comment">// true</span><br>[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>([]) <span class="hljs-comment">// Array</span><br></code></pre></div></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3> <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> findArr = arr.<span class="hljs-title function_">find</span>( <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item&gt;<span class="hljs-number">3</span> ) <span class="hljs-comment">//4</span><br><span class="hljs-comment">// find方法的参数是一个回调函数,返回第一个符合条件的数组元素</span><br></code></pre></div></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3> <figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-comment">// 过滤符合条件的数组元素</span><br><span class="hljs-keyword">let</span> userArr = [<br> &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>&#125;,<br> &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">2</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>&#125;,<br> &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">3</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>&#125;<br>]<br><span class="hljs-keyword">let</span> filterArr = userArr.<span class="hljs-title function_">filter</span>(<span class="hljs-params">item, index, array</span>)&#123;<br><br>&#125;<br><br><span class="hljs-comment">// 数组去重</span><br> <span class="hljs-keyword">var</span> myArr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>];<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myArr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">value,index,arr</span>)=&gt;</span>arr.<span class="hljs-title function_">indexOf</span>(value)===index));<br> <span class="hljs-comment">//[ 1, 3, 4, 5, 6, 7 ]</span><br></code></pre></div></td></tr></table></figure><h3 id="在数组中查找"><a href="#在数组中查找" class="headerlink" title="在数组中查找"></a>在数组中查找</h3><ul><li><code>arr.indexOf(item, from)</code> —— 从索引 <code>from</code> 开始搜索 <code>item</code>，如果找到则返回索引，否则返回 <code>-1</code>。</li><li><code>arr.includes(item, from)</code> —— 从索引 <code>from</code> 开始搜索 <code>item</code>，如果找到则返回 <code>true</code>（译注：如果没找到，则返回 <code>false</code>）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-title class_">NaN</span>];<br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-title class_">NaN</span>) ); <span class="hljs-comment">// -1（错，应该为 0）</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">includes</span>(<span class="hljs-title class_">NaN</span>) );<span class="hljs-comment">// true（正确）</span><br></code></pre></div></td></tr></table></figure><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><p>常见类数组有函数的剩余参数，<br><code>let arrayLike = document.querySelectorAll(&#39;div&#39;)</code>; dom列表</p><blockquote><p>类数组拥有<code>length</code>属性,且<code>length</code>属性的类型是<code>number</code>;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 判断类数组</span><br>arrLike.<span class="hljs-property">length</span> === +arrLike.<span class="hljs-property">length</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 类数组转数组</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arrLike)<br><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(arrLike)<br></code></pre></div></td></tr></table></figure><blockquote><p>如果我们在箭头函数中访问 <code>arguments</code>，访问到的 <code>arguments</code> 并不属于箭头函数，而是属于箭头函数外部的“普通”函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-title function_">showArg</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]);<br>  <span class="hljs-title function_">showArg</span>();<br>&#125;<br><br><span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span><br></code></pre></div></td></tr></table></figure><h2 id="Spread"><a href="#Spread" class="headerlink" title="Spread"></a>Spread</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 求类型`Array&lt;number&gt;`中的最大值</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(arr) <span class="hljs-comment">// error</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...arr) <span class="hljs-comment">// 4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...arr, ...arr2) <span class="hljs-comment">// 8</span><br><br><span class="hljs-comment">// 字符串转数组</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;string&#x27;</span>;<br>[...str]  <span class="hljs-comment">// [&#x27;s&#x27;,&#x27;t&#x27;,&#x27;r&#x27;,&#x27;i&#x27;,&#x27;n&#x27;,&#x27;g&#x27;]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(str)  <span class="hljs-comment">// [&#x27;s&#x27;,&#x27;t&#x27;,&#x27;r&#x27;,&#x27;i&#x27;,&#x27;n&#x27;,&#x27;g&#x27;]</span><br></code></pre></div></td></tr></table></figure><h2 id="Questions-and-solutions"><a href="#Questions-and-solutions" class="headerlink" title="Questions and solutions"></a>Questions and solutions</h2><blockquote><p>新建长度为7的数组,数组内元素默认值为3</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">7</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">3</span>);    <span class="hljs-comment">// [3,3,3,3,3,3,3]</span><br><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, <span class="hljs-title class_">Array</span>(<span class="hljs-number">7</span>)).<span class="hljs-title function_">map</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-number">3</span>);    <span class="hljs-comment">// [3,3,3,3,3,3,3]</span><br></code></pre></div></td></tr></table></figure><blockquote><p>新建长度为7的数组,数组内元素递增赋值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">7</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-literal">undefined</span>).<span class="hljs-title function_">map</span>( <span class="hljs-function">(<span class="hljs-params">_, index</span>)=&gt;</span> index );    <span class="hljs-comment">//[0,1,2,3,4,5,6]</span><br></code></pre></div></td></tr></table></figure><h3 id="reWrite-methods"><a href="#reWrite-methods" class="headerlink" title="reWrite methods"></a>reWrite methods</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">map</span> = <span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> result = [];<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">forEach</span>( <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    result.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">callback</span>(item, index))<br>  &#125; )<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">filter</span> = <span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> result = [];<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">forEach</span>( <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">callback</span>(item, index)) &#123;<br>      result.<span class="hljs-title function_">push</span>(item)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> result = [];<br>  <span class="hljs-comment">// apply</span><br>  <span class="hljs-comment">// this.forEach( (array) =&gt; &#123;</span><br>  <span class="hljs-comment">//   result.push.apply(result, array)</span><br>  <span class="hljs-comment">// &#125;)</span><br><br>  <span class="hljs-comment">// ES6 spread</span><br>  <span class="hljs-comment">// this.forEach( (array) =&gt; &#123;</span><br>  <span class="hljs-comment">//   result.push.apply(result, array)</span><br>  <span class="hljs-comment">// &#125;)</span><br><br>  <span class="hljs-comment">// two forEach</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">forEach</span>( <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>    array.<span class="hljs-title function_">forEach</span>( <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>      result.<span class="hljs-title function_">push</span>()<br>    &#125;)<br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class Decorator</title>
    <link href="/blog/2023/10/Javascript/ClassDecorator/"/>
    <url>/blog/2023/10/Javascript/ClassDecorator/</url>
    
    <content type="html"><![CDATA[<h1 id="Decorator-装饰器"><a href="#Decorator-装饰器" class="headerlink" title="Decorator(装饰器)"></a>Decorator(装饰器)</h1><h2 id="ClassDecorator-类装饰器"><a href="#ClassDecorator-类装饰器" class="headerlink" title="ClassDecorator(类装饰器)"></a>ClassDecorator(类装饰器)</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Doc</span>: <span class="hljs-title class_">ClassDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// log: Class demo</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target)<br><br>target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_name</span> = <span class="hljs-string">&#x27;Luffy&#x27;</span><br>&#125;<br><br><br><span class="hljs-meta">@Doc</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span>() &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Xiaoming</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">demo</span>()<br><br><span class="hljs-comment">// log: Luffy</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Xiaoming</span>.<span class="hljs-property">_name</span>)<br></code></pre></div></td></tr></table></figure><h2 id="PropertyDecorator-属性装饰器"><a href="#PropertyDecorator-属性装饰器" class="headerlink" title="PropertyDecorator(属性装饰器)"></a>PropertyDecorator(属性装饰器)</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Doc</span>: <span class="hljs-title class_">PropertyDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span></span>) =&gt;</span> &#123;<br><span class="hljs-comment">// log: &#123;&#125;, name</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target, propertyKey)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span>() &#123;<br><span class="hljs-meta">@Doc</span><br><span class="hljs-keyword">public</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Luffy&#x27;</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="MethodDecorator-方法装饰器"><a href="#MethodDecorator-方法装饰器" class="headerlink" title="MethodDecorator(方法装饰器)"></a>MethodDecorator(方法装饰器)</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Doc</span>: <span class="hljs-title class_">MethodDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>, descriptor: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br><span class="hljs-comment">// log: &#123;&#125;, getAll, &#123;value: ..., writable: true, configurable: true&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target, propertyKey, descriptor)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span>() &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-meta">@Doc</span><br><span class="hljs-title function_">getAll</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="MethodDecorator-参数装饰器"><a href="#MethodDecorator-参数装饰器" class="headerlink" title="MethodDecorator(参数装饰器)"></a>MethodDecorator(参数装饰器)</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Doc</span>: <span class="hljs-title class_">ParameterDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>, index: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br><span class="hljs-comment">// log: &#123;&#125;, getAll, 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target, propertyKey, index)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span>() &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title function_">getAll</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, <span class="hljs-meta">@Doc</span> age: <span class="hljs-built_in">string</span></span>) &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="使用装饰器实现一个get请求"><a href="#使用装饰器实现一个get请求" class="headerlink" title="使用装饰器实现一个get请求"></a>使用装饰器实现一个get请求</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Get</span> = (<span class="hljs-params">url: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>, descriptor: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> fnc = descriptor.<span class="hljs-property">value</span>;<br>axios.<span class="hljs-title function_">get</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-title function_">fnc</span>(res, &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>, <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span> &#125;)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br><span class="hljs-title function_">fnc</span>(res, &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span> &#125;)<br>&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">user</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;请求地址&#x27;</span>)<br><span class="hljs-title function_">getAll</span>(<span class="hljs-params">res: <span class="hljs-built_in">any</span>, status: <span class="hljs-built_in">any</span></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(res, status)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>map &amp; set</title>
    <link href="/blog/2023/10/Javascript/Map%20and%20Set/"/>
    <url>/blog/2023/10/Javascript/Map%20and%20Set/</url>
    
    <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><blockquote><p>允许任何类型key,像Object一样的数据集合</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>let map = new Map()   // 创建map</li><li>map.set(key, value)   // 存储或修改map中key和对应的value</li><li>map.get(key)   // 获取map中key的value</li><li>map.has(key)   // map中是否含键为key, 返回boolean</li><li>map.delete(key)   // 删除指定key的value</li><li>map.clear()   // 清空map</li><li>map.size()   // map中元素个数</li></ul><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><blockquote><p>value的集合, 每个value只能出现一次</p></blockquote><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><ul><li>new Set(iterable)  // 创建一个set,如果提供了一个iterable对象(通常是数组),将会从数组里面复制值到set中</li><li>set.add(value) // 添加新value,返回set</li><li>set.delete(value)  // 删除value,返回boolean(不存在value则返回false)</li><li>set.has(value) // 如果value在set中,返回true,否则返回false</li><li>set.clear  // 清空map</li><li>set.size   // 返回元素个数</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Date</title>
    <link href="/blog/2023/10/Javascript/Date/"/>
    <url>/blog/2023/10/Javascript/Date/</url>
    
    <content type="html"><![CDATA[<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><p>let now = new Date()</p><ul><li>new Date(0)  //1970年1月1日</li></ul><h2 id="获取日期组件"><a href="#获取日期组件" class="headerlink" title="获取日期组件"></a>获取日期组件</h2><ul><li>now.getFullYear()  //获取年份2008</li><li>now.getMonth()  //获取月份,0~11</li><li>now.getDate()  //获取天,1~31</li><li>now.getHours()</li><li>now.getMinutes()</li><li>now.getSeconds()</li><li>now.getMilliseconds()</li><li>now.getDay() //0~6,周日到周六</li><li>now.getTime() //获取从1970至今的毫秒数(优先)</li></ul><ul><li>alert( +now ) //获取从1970至今的毫秒数</li><li>Date.now()  //获取从1970至今的毫秒数</li></ul><h2 id="设置日期组件"><a href="#设置日期组件" class="headerlink" title="设置日期组件"></a>设置日期组件</h2><ul><li>setFullYear()<br>…</li><li>setTime()</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Date</span> :  <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">var</span> sometime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;7/10/2019&quot;</span>));<br><span class="hljs-keyword">var</span> sometime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">UTC</span>(<span class="hljs-number">2018</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>));<br><span class="hljs-title function_">getTime</span>();<br><span class="hljs-title function_">getFullYear</span>();<br><span class="hljs-title function_">getMonth</span>();<br><span class="hljs-title function_">getDate</span>();<br><span class="hljs-title function_">getDay</span>();<br><span class="hljs-title function_">getHours</span>();<br><span class="hljs-title function_">getMinutes</span>();<br><span class="hljs-title function_">getSeconds</span>();<br><span class="hljs-title function_">getMilliSeconds</span>();<br></code></pre></div></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// 1970 年 1 月 1 日</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>) <span class="hljs-comment">// 1970 年 1 月 1 日</span><br><br><span class="hljs-comment">// 传入的整数参数代表的是自 1970-01-01 00:00:00 以来经过的毫秒数，该整数被称为`时间戳`。</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title class_">Time</span>: <span class="hljs-built_in">number</span>)<br><br><span class="hljs-comment">// 传入的字符串会被自动解析,解析为当前时间</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-attr">date</span>: <span class="hljs-built_in">string</span>)<br><span class="hljs-comment">// 使用当前时区中的给定组件创建日期</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month, date, hours, minutes, seconds, ms)<br></code></pre></div></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>date.<span class="hljs-title function_">getFullYear</span>() <span class="hljs-comment">// 获取年份 2022</span><br>data.<span class="hljs-title function_">getMonth</span>() <span class="hljs-comment">// 获取月份 0~11</span><br>data.<span class="hljs-title function_">getDate</span>() <span class="hljs-comment">// 获取当月具体日期 1~31</span><br><span class="hljs-title function_">getHours</span>()，<span class="hljs-title function_">getMinutes</span>()，<span class="hljs-title function_">getSeconds</span>()，<span class="hljs-title function_">getMilliseconds</span>() <span class="hljs-comment">// 获取时,分钟,秒钟,毫秒</span><br>date.<span class="hljs-title function_">getDay</span>() <span class="hljs-comment">// 获取星期几  0~6 0默认是周日</span><br>date.<span class="hljs-title function_">getTime</span>() <span class="hljs-comment">// 获取从1970至今所经历的毫秒数</span><br></code></pre></div></td></tr></table></figure><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setFullYear</span>(year, [month], [date])<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setMonth</span>(month, [date])<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setDate</span>(date)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setHours</span>(hour, [min], [sec], [ms])<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setMinutes</span>(min, [sec], [ms])<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setSeconds</span>(sec, [ms])<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setMilliseconds</span>(ms)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setTime</span>(milliseconds)（使用自 <span class="hljs-number">1970</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-variable constant_">UTC</span>+<span class="hljs-number">0</span> 以来的毫秒数来设置整个日期）<br></code></pre></div></td></tr></table></figure><h2 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h2><h3 id="本月第一天到-最后一天"><a href="#本月第一天到-最后一天" class="headerlink" title="本月第一天到 最后一天"></a>本月第一天到 最后一天</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nextMonth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>; <span class="hljs-comment">// 比如现在是7月，那么nextMonth === 7</span><br><span class="hljs-keyword">const</span> nextMonthFirstDay = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>(), nextMonth, <span class="hljs-number">1</span>); <br><span class="hljs-keyword">const</span> oneDay = <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br><br><span class="hljs-keyword">let</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setDate</span>(<span class="hljs-number">1</span>)).<span class="hljs-title function_">setHours</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br><span class="hljs-keyword">let</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(nextMonthFirstDay - oneDay))<span class="hljs-title function_">setHours</span>(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">59</span>, <span class="hljs-number">999</span>));<br></code></pre></div></td></tr></table></figure><h3 id="本周第一天到-最后一天"><a href="#本周第一天到-最后一天" class="headerlink" title="本周第一天到 最后一天"></a>本周第一天到 最后一天</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setHours</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setHours</span>(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">59</span>, <span class="hljs-number">999</span>);<br><br><span class="hljs-keyword">let</span> nowDayOfWeek = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getDay</span>();<br><span class="hljs-keyword">if</span> (nowDayOfWeek === <span class="hljs-number">0</span>) nowDayOfWeek = <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> dayNum = <span class="hljs-number">1</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br><span class="hljs-comment">// 获取本周星期一的时间，星期一作为一周的第一天</span><br><span class="hljs-keyword">const</span> firstDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">valueOf</span>() - (nowDayOfWeek - <span class="hljs-number">1</span>) *dayNum);<br><span class="hljs-comment">// 获取本周星期天的时间，星期天作为一周的最后一天</span><br><span class="hljs-keyword">const</span> lastDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(firstDate).<span class="hljs-title function_">valueOf</span>() + <span class="hljs-number">6</span> * dayNum);<br><br><span class="hljs-keyword">const</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title function_">startTime</span>(firstDate));<br><span class="hljs-keyword">const</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title function_">endTime</span>(lastDate));<br></code></pre></div></td></tr></table></figure><h3 id="今日零点到24点"><a href="#今日零点到24点" class="headerlink" title="今日零点到24点"></a>今日零点到24点</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setHours</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br><span class="hljs-keyword">const</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">setHours</span>(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">59</span>, <span class="hljs-number">999</span>));<br></code></pre></div></td></tr></table></figure><h3 id="日期转数字"><a href="#日期转数字" class="headerlink" title="日期转数字"></a>日期转数字</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <span class="hljs-comment">// Mon Jul 25 2022 13:11:45 GMT+0800 (中国标准时间)</span><br>date.<span class="hljs-title function_">valueOf</span>();  <span class="hljs-comment">// 1658725548748</span><br>date.<span class="hljs-title function_">getTime</span>();  <span class="hljs-comment">// 1658725548748</span><br><span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();      <span class="hljs-comment">// 1658725548748</span><br>+date;           <span class="hljs-comment">// 1658725548748</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span>,<span class="hljs-number">6</span>,<span class="hljs-number">25</span>)-<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>)  <span class="hljs-comment">// 86400000 隐式调用了valueOf() 方法</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span>,<span class="hljs-number">6</span>,<span class="hljs-number">25</span>).<span class="hljs-title function_">getTime</span>()-<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2022</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>).<span class="hljs-title function_">getTime</span>()  <span class="hljs-comment">// 86400000 (性能比valueOf高)</span><br></code></pre></div></td></tr></table></figure><h3 id="创建日期"><a href="#创建日期" class="headerlink" title="创建日期"></a>创建日期</h3><p>创建一个 Date 对象，日期是：Feb 20, 2012, 3:12am。时区是当地时区。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2012</span>,<span class="hljs-number">1</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>);<br><span class="hljs-number">2.</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2012-02-20T03:12&quot;</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>map</title>
    <link href="/blog/2023/10/Javascript/Map/"/>
    <url>/blog/2023/10/Javascript/Map/</url>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><blockquote><p><code>Map</code> 与Object最大的差别是Map允许任何类型的键(key)<br>Object中,从ES6开始，String和Symbol键是按顺序保存起来的，但是通过隐式转换保存成String的键就是乱序的，<code>Map</code>始终保持按插入顺序返回键名</p></blockquote><h2 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h2><ul><li>let map = new Map()   // 创建map</li><li>map.set(key, value) // 设置存储键和值</li><li>map.get(key)  // 根据键返回值,如果没有相应key,返回undefined</li><li>map.has(key)  // 如果key存在返回true</li><li>map.delete(key)  // 删除指定键的值</li><li>map.clear()   // 清空map</li><li>map.size   // 返回当前元素的个数</li></ul><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><ul><li>map.keys()   // returns an iterable for keys</li><li>map.values()  // returns an iterable for values</li><li>map.entries() // returns an iterable for entries, Create a map from Object like <code>new Map(Object.entries(obj))</code></li><li>Object.fromEntries() // create Object from map</li></ul><blockquote><p>Other examples</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> recipeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>   [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-number">500</span>],<br>   [<span class="hljs-string">&#x27;tomatoes&#x27;</span>, <span class="hljs-number">350</span>],<br>   [<span class="hljs-string">&#x27;orange&#x27;</span>,    <span class="hljs-number">50</span>]<br> ]);<br><br> recipeMap.<span class="hljs-title function_">forEach</span>( <span class="hljs-function">(<span class="hljs-params">value, key, map</span>) =&gt;</span> &#123; ... &#125; )<br><br><span class="hljs-keyword">let</span> price = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>( recipeMap.<span class="hljs-title function_">entries</span>() ); <span class="hljs-comment">// return Object &#123;&#x27;apple&#x27;: 500, &#x27;tomatoes&#x27;: 350, &#x27;orange&#x27;: 50&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 判断Map</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isMap</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">toString</span>() === <span class="hljs-string">&#x27;[object Map]&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>插入顺序需要考虑时,选择Map</li><li>频繁增删键值</li><li>Map无法转化为json，如果需要则使用Object</li><li>需要构造特殊类型的键名</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object</title>
    <link href="/blog/2023/10/Javascript/Object/"/>
    <url>/blog/2023/10/Javascript/Object/</url>
    
    <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="获取实例对象的原型-Object-getPrototypeOf"><a href="#获取实例对象的原型-Object-getPrototypeOf" class="headerlink" title="获取实例对象的原型 Object.getPrototypeOf"></a>获取实例对象的原型 <code>Object.getPrototypeOf</code></h2><blockquote><p><code>Object.getPrototypeOf(ChildClass) === FatherClass</code> 判断一个类是否继承另一个类</p></blockquote><h2 id="Iterable-object可迭代对象"><a href="#Iterable-object可迭代对象" class="headerlink" title="Iterable object可迭代对象"></a><code>Iterable object</code>可迭代对象</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item) <span class="hljs-comment">// 1  2  3</span><br>&#125;<br><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;code&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> str) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)  <span class="hljs-comment">// c   o   d   e</span><br>&#125;<br><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item); <span class="hljs-comment">// 1  2  3</span><br>&#125;<br><br><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;XIAOMING&quot;</span>);<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);  <span class="hljs-comment">// [&quot;name&quot;: &quot;XIAOMING&quot;] [&quot;age&quot;: 10]</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);  <span class="hljs-comment">// name  age</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">// XIAOMING  10</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [key,value] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&#x27;-&#x27;</span> + value); <span class="hljs-comment">//name-XIAOMING  age-10</span><br>&#125;<br><br><span class="hljs-keyword">const</span> object = &#123;<br>  <span class="hljs-attr">from</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">to</span>: <span class="hljs-number">5</span>,<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cur</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>  &#125;,<br>  <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cur</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span>) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cur</span> ++&#125;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> object) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item); <span class="hljs-comment">// 0  1  2  3  4</span><br>&#125;<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFunc</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">20</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">30</span>;<br>&#125;<br><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">generatorFunc</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> obj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);  <span class="hljs-comment">// 10  20  30</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Object-to-Map"><a href="#Object-to-Map" class="headerlink" title="Object to Map"></a>Object to Map</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;XIAOMING&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">10</span>&#125;;<br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj))<br></code></pre></div></td></tr></table></figure><h2 id="Map-to-Object"><a href="#Map-to-Object" class="headerlink" title="Map to Object"></a>Map to Object</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;XIAOMING&#x27;</span>);<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>); <br><span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(map);<br></code></pre></div></td></tr></table></figure><h2 id="weekSet-amp-weekMap"><a href="#weekSet-amp-weekMap" class="headerlink" title="weekSet &amp; weekMap"></a>weekSet &amp; weekMap</h2><ol><li>当数据不可达或不可能被使用时,则会被垃圾回收掉以释放内存。</li><li>Map可以设置对象为key值,如果此Map的一直被引用,但此对象不会再应用，此对象并不会被回收；</li><li>weekMap 和 weekMap 可以设置key为 object, 但没有引用时则会被销毁</li></ol><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of">for..of(MDN)</a><br><a href="https://www.programiz.com/javascript/for-of">for..of</a><br><a href="https://zh.javascript.info/iterable">可迭代对象</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*">function*</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise</title>
    <link href="/blog/2023/10/Javascript/Promise/"/>
    <url>/blog/2023/10/Javascript/Promise/</url>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p><a href="https://zh.javascript.info/callbacks">为什么使用promise</a></p><blockquote><ol><li>异步执行某项功能的函数应该提供一个<code>callback</code>参数用于在相应事件完成时调用。</li><li>如果<code>callback</code>亦是异步函数, 则也需要提供另一个回调, 由此会形成<code>回调地狱</code>。</li><li>以上的异步函数可能会出现中途出现<code>error</code>,所以<code>callback</code>中需要提供失败处理办法。</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadScript</span>(<span class="hljs-params">src, callback</span>) &#123;<br>  <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>  script.<span class="hljs-property">src</span> = src;<br>  <span class="hljs-comment">// script.onload 在script加载完成</span><br>  script.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">callback</span>(script);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">append</span>(script);<br>&#125;<br><span class="hljs-comment">// 2</span><br><span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;/my/script.js&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">script</span>) &#123;<br>  <span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;/my/script2.js&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">script</span>) &#123;<br>    <span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;/my/script3.js&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">script</span>) &#123;<br>      <span class="hljs-comment">// ...加载完所有脚本后继续</span><br>    &#125;);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 3 </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadScript</span>(<span class="hljs-params">src, callback</span>) &#123;<br>  <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>  script.<span class="hljs-property">src</span> = src;<br>  script.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, script);<br>  script.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Script load error for <span class="hljs-subst">$&#123;src&#125;</span>`</span>));<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">append</span>(script);<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>Usage of Promise</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 所有订阅此promise的都将接收到内部异步函数的处理结果</span><br><span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// promise内部的自执行异步函数</span><br><span class="hljs-built_in">setTimeout</span>( <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;1&#x27;</span>), <span class="hljs-number">1000</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol><li><code>new Promise</code>内部的异步函数需要一定的执行时间,此时状态为等待中 <code>state: pending</code>,并没有处理结果</li><li>当promise内部的自执行异步函数执行完毕后,<br>如果返回给订阅者的是<code>resolve(&#39;1&#39;)</code>,代表此时的状态变为已完成<code>state: fulfilled</code>,此时的结果是resolve传递的值<code>&#39;1&#39;</code>;<br>如果返回给订阅者的是<code>reject(&#39;2&#39;)</code>,代表此时的状态变为已拒绝<code>state: rejected</code>,此时的结果是resolve传递的值<code>&#39;2&#39;</code>;<br>注意： 内部异步函数的处理结果只能是<code>已完成</code>或<code>已拒绝</code>其中一个。</li><li>订阅者调用此promise时如何查看promise是已完成还是已经拒绝的状态呢？<br><code>promise.then( () =&gt; console.error(&#39;已完成&#39;), () =&gt; console.log(&#39;已拒绝&#39;))</code> 在<code>已完成</code>,<code>已拒绝</code>状态下分别是第一第二个函数;<br><code>promise.catch()</code> === <code>promise.then( null, () =&gt; console.log(&#39;已拒绝&#39;))</code> 在<code>已拒绝</code>可以直接执行<code>.catch()</code><br><code>promise.finally()</code> 无论是<code>已完成</code>,<code>已拒绝</code>都会执行,和<code>.then()</code>的区别在于<code>.finally()</code>没有参数,没有返回值,而且并不清楚promise执行成功还是拒绝,<br>如果同时出现<code>.finally().then()</code>那么.finally先触发, 比如promise内部是一个定时器，在一定条件的时候有了执行结果，此时可以在finally中清掉定时器</li><li>.catch() 会捕获这个promise链中error<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">setTimeout</span>( <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;111&#x27;</span>)&#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-literal">null</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err, <span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">setTimeout</span>( <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;222&#x27;</span>)&#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err, <span class="hljs-string">&#x27;2&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>Promise.all 会一次性完成多个异步操作,如果没有异步是rejected的话，那将无论这些异步操作的时间长短，按照请求顺序返回这个顺序的数组resolve值;<br>如果有一个请求进入rejected,那么catch将捕获错误信息,Promise.all 请求失败</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>), <span class="hljs-number">3000</span>)),<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>), <span class="hljs-number">2000</span>)),<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>), <span class="hljs-number">1000</span>)) <br>]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>);  <span class="hljs-comment">//[1,2,3]</span><br></code></pre></div></td></tr></table></figure><p>当无论异步请求成功还是失败,都想获取返回的结果</p><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>([<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>), <span class="hljs-number">3000</span>)), <span class="hljs-comment">// 1</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">reject</span>(<span class="hljs-number">2</span>), <span class="hljs-number">2000</span>)), <span class="hljs-comment">// 2</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>), <span class="hljs-number">1000</span>))  <span class="hljs-comment">// 3</span><br>]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(res)); <br><br><span class="hljs-comment">// 返回值</span><br><span class="hljs-comment">// [</span><br><span class="hljs-comment">//   &#123;status: &#x27;fulfilled&#x27;, value: 1&#125;,</span><br><span class="hljs-comment">//   &#123;status: &#x27;rejected&#x27;, reason: 2&#125;,</span><br><span class="hljs-comment">//   &#123;status: &#x27;fulfilled&#x27;, value: 3&#125;</span><br><span class="hljs-comment">// ]</span><br></code></pre></div></td></tr></table></figure><h2 id="Promise-race-promises"><a href="#Promise-race-promises" class="headerlink" title="Promise.race(promises)"></a>Promise.race(promises)</h2><p> 等待第一个 settle 的 promise，并将其 result/error 作为结果返回。</p><h2 id="Promise-any-promises-（ES2021-新增方法）"><a href="#Promise-any-promises-（ES2021-新增方法）" class="headerlink" title="Promise.any(promises)（ES2021 新增方法）"></a>Promise.any(promises)（ES2021 新增方法）</h2><p> 等待第一个 fulfilled 的 promise，并将其结果作为结果返回。如果所有 promise 都 rejected，Promise.any 则会抛出 AggregateError 错误类型的 error 实例。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Proxy</title>
    <link href="/blog/2023/10/Javascript/Proxy/"/>
    <url>/blog/2023/10/Javascript/Proxy/</url>
    
    <content type="html"><![CDATA[<h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><blockquote><p>一个Proxy对象包裹一个对象, 并拦截其读取写入的操作</p></blockquote><p>语法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// target 要包装的对象</span><br><span class="hljs-comment">// handler 配置对象, 带有拦截操作的捕捉器</span><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HttpRequest</title>
    <link href="/blog/2023/10/Javascript/XMLHttpRequest/"/>
    <url>/blog/2023/10/Javascript/XMLHttpRequest/</url>
    
    <content type="html"><![CDATA[<h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><blockquote><p>js 原生网络请求数据</p></blockquote><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/* 封装ajax函数</span><br><span class="hljs-comment"> * @param &#123;string&#125;opt.type http连接的方式，包括POST和GET两种方式</span><br><span class="hljs-comment"> * @param &#123;string&#125;opt.url 发送请求的url</span><br><span class="hljs-comment"> * @param &#123;boolean&#125;opt.async 是否为异步请求，true为异步的，false为同步的</span><br><span class="hljs-comment"> * @param &#123;object&#125;opt.data 发送的参数，格式为对象类型</span><br><span class="hljs-comment"> * @param &#123;function&#125;opt.success ajax发送并接收成功调用的回调函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">opt</span>) &#123;<br>  opt = opt || &#123;&#125;;<br>  opt.<span class="hljs-property">method</span> = opt.<span class="hljs-property">method</span>.<span class="hljs-title function_">toUpperCase</span>() || <span class="hljs-string">&#x27;POST&#x27;</span>;<br>  opt.<span class="hljs-property">url</span> = opt.<span class="hljs-property">url</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br>  opt.<span class="hljs-property">async</span> = opt.<span class="hljs-property">async</span> || <span class="hljs-literal">true</span>;<br>  opt.<span class="hljs-property">data</span> = opt.<span class="hljs-property">data</span> || <span class="hljs-literal">null</span>;<br>  opt.<span class="hljs-property">success</span> = opt.<span class="hljs-property">success</span> || <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br>  <span class="hljs-keyword">let</span> xmlHttp = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">XMLHttpRequest</span>) &#123;<br>      xmlHttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>      xmlHttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>);<br>  &#125;<span class="hljs-keyword">let</span> params = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> opt.<span class="hljs-property">data</span>)&#123;<br>      params.<span class="hljs-title function_">push</span>(key + <span class="hljs-string">&#x27;=&#x27;</span> + opt.<span class="hljs-property">data</span>[key]);<br>  &#125;<br>  <span class="hljs-keyword">let</span> postData = params.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (opt.<span class="hljs-property">method</span>.<span class="hljs-title function_">toUpperCase</span>() === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>      xmlHttp.<span class="hljs-title function_">open</span>(opt.<span class="hljs-property">method</span>, opt.<span class="hljs-property">url</span>, opt.<span class="hljs-property">async</span>);<br>      xmlHttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span>);<br>      xmlHttp.<span class="hljs-title function_">send</span>(postData);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt.<span class="hljs-property">method</span>.<span class="hljs-title function_">toUpperCase</span>() === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>      xmlHttp.<span class="hljs-title function_">open</span>(opt.<span class="hljs-property">method</span>, opt.<span class="hljs-property">url</span> + <span class="hljs-string">&#x27;?&#x27;</span> + postData, opt.<span class="hljs-property">async</span>);<br>      xmlHttp.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>);<br>  &#125; <br>  xmlHttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (xmlHttp.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xmlHttp.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>          opt.<span class="hljs-title function_">success</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xmlHttp.<span class="hljs-property">responseText</span>));<span class="hljs-comment">//如果不是json数据可以去掉json转换</span><br>      &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// Usage</span><br><span class="hljs-title function_">ajax</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;url&#x27;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.gitignore</title>
    <link href="/blog/2023/10/Git/Questions/gitignore/"/>
    <url>/blog/2023/10/Git/Questions/gitignore/</url>
    
    <content type="html"><![CDATA[<h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a><code>.gitignore</code></h2><blockquote><p>定义在此文件的内容都会在提交时被忽略</p></blockquote><h3 id="创建-gitignore文件"><a href="#创建-gitignore文件" class="headerlink" title="创建.gitignore文件"></a>创建<code>.gitignore</code>文件</h3><ol><li>在需要创建<code>.gitignore</code>文件的文件夹, 右键选择<code>Git Bash Here</code> 进入命令行</li><li>输入 <code>touch .gitignore</code> 在文件夹就生成了一个<code>.gitignore</code>文件</li></ol><h3 id="设置需要忽略的规则"><a href="#设置需要忽略的规则" class="headerlink" title="设置需要忽略的规则"></a>设置需要忽略的规则</h3><ul><li><p>忽略文件夹<br>/mtk/  表示过滤这个文件夹</p></li><li><p>指定过滤某种类型的文件：</p></li></ul><p>*.zip<br>*.rar<br>*.via<br>*.tmp<br>*.err</p><ul><li>指定过滤某个文件<br>/mtk/do.c</li></ul><h3 id="配置-gitignore-的简易原则"><a href="#配置-gitignore-的简易原则" class="headerlink" title="配置.gitignore 的简易原则"></a>配置.gitignore 的简易原则</h3><p>采用共享模式与保守模式结合配置的办法。eg：一个文件夹下有很多文件夹和文件，而我只想跟踪其中的一个文件，这样设置就可以满足这种情况，先用共享模式把整个目录 都设置为不跟踪，然后再用保守模式把这个文件夹中想要跟踪的文件设置为被跟踪，配置很简单，就可以跟踪想要跟踪的文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gsap</title>
    <link href="/blog/2023/10/Animation/GSAP/index/"/>
    <url>/blog/2023/10/Animation/GSAP/index/</url>
    
    <content type="html"><![CDATA[<h1 id="GSAP-in-Angular"><a href="#GSAP-in-Angular" class="headerlink" title="GSAP in Angular"></a>GSAP in Angular</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save gsap @types/gsap<br></code></pre></div></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// to 动画的最终状态;ep: 当前元素位置是0,那么动画将从0开始抵达100的位置</span><br>gasp.<span class="hljs-title function_">to</span>(<span class="hljs-string">&#x27;box&#x27;</span>, &#123; <span class="hljs-attr">rotation</span>: <span class="hljs-number">27</span>, <span class="hljs-attr">x</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span> &#125;)<br><br><span class="hljs-comment">// from 动画的初始状态;ep: 当前元素位置是0,那么动画将从-100开始抵达0的位置</span><br>gsap.<span class="hljs-title function_">from</span>(<span class="hljs-string">&quot;.purple&quot;</span>, &#123;<span class="hljs-attr">rotation</span>: -<span class="hljs-number">360</span>, <span class="hljs-attr">x</span>: -<span class="hljs-number">100</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span>&#125;);<br><br><span class="hljs-comment">// fromTo ep: 当前元素从-100位置到100位置,默认动画时间1s</span><br>gsap.<span class="hljs-title function_">fromTo</span>(<span class="hljs-string">&quot;.blue&quot;</span>, &#123; <span class="hljs-attr">x</span>: -<span class="hljs-number">100</span> &#125;, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">2</span> &#125;);<br></code></pre></div></td></tr></table></figure><p><code>gsap.timeline()</code> 按顺序执行动画</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> tl = gsap.<span class="hljs-title function_">timeline</span>();<br>tl.<span class="hljs-title function_">to</span>(<span class="hljs-string">&quot;.box1&quot;</span>, &#123;<span class="hljs-attr">duration</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>&#125;, <span class="hljs-number">1</span>)<br>  .<span class="hljs-title function_">to</span>(<span class="hljs-string">&quot;.box2&quot;</span>, &#123;<span class="hljs-attr">duration</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">200</span>&#125;, <span class="hljs-string">&quot;-=1.5&quot;</span>)<br>  .<span class="hljs-title function_">to</span>(<span class="hljs-string">&quot;.box3&quot;</span>, &#123;<span class="hljs-attr">duration</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">rotation</span>: <span class="hljs-number">360</span>&#125;, <span class="hljs-string">&quot;+=3&quot;</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>animation</tag>
      
      <tag>gsap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular</title>
    <link href="/blog/2023/10/Angular/Angular/"/>
    <url>/blog/2023/10/Angular/Angular/</url>
    
    <content type="html"><![CDATA[<h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><h1 id="安装Angular-CLI"><a href="#安装Angular-CLI" class="headerlink" title="安装Angular CLI"></a>安装Angular CLI</h1><p><code>npm install -g @angular/cli</code></p><h2 id="更新cli"><a href="#更新cli" class="headerlink" title="更新cli"></a>更新cli</h2><p>npm uninstall -g @angular/cli<br>npm install -g @angular/cli@latest</p><h2 id="命令行快速生成"><a href="#命令行快速生成" class="headerlink" title="命令行快速生成"></a>命令行快速生成</h2><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">// 生成项目<br>ng new &lt;项目英文名&gt;<br><br>// 安装ng<span class="hljs-literal">-zorro</span><br>ng add ng<span class="hljs-literal">-zorro-antd</span><br><br>// 生成模块<br>ng generate module &lt;路径及模块名称&gt;<br>// 缩写,在app文件夹下生成路径为pages/setup的setup.module.ts文件<br>ng g m pages/setup<br><br>//生成组件<br>ng generage component &lt;路径及组件名称&gt;<br>// 缩写, 在app文件夹下生成路径为pages/setup的组件的模板、样式、测试文件、ts文件四个文件<br>ng g c pages/setup<br><br>// 生成服务<br>ng generage service &lt;路径及服务文件名称&gt;<br>// 缩写<br>ng g s services/local<span class="hljs-literal">-storage</span><br><br>// 启动服务<br>ng serve <br>或<br>npm <span class="hljs-built_in">start</span> <br></code></pre></div></td></tr></table></figure><h2 id="多项目工作区-version-angular-gt-10-9"><a href="#多项目工作区-version-angular-gt-10-9" class="headerlink" title="多项目工作区(version angular&gt;10.9)"></a>多项目工作区(version angular&gt;10.9)</h2><blockquote><p>多个angular项目共享一个git, node_modules 可用于项目(Project)和组件库(Library)同时开发</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">// 创建工作区(没有项目),生成基本目录<br>ng new firstWorkspace <span class="hljs-literal">--create-application</span>=false<br><br>// 创建项目<br>ng generate application first<span class="hljs-literal">-app</span><br><br>// 创建组件库(组件库拥有自己的package.json)<br>ng generate library <span class="hljs-built_in">test-core</span><br><br>// 项目使用组件库(每次组件库更新都要执行此命令)<br>ng build <span class="hljs-built_in">test-core</span><br><br>// 启动指定项目(package.json),如果工作区中只有一个项目则默认启动此项目<br>ng serve <span class="hljs-literal">--project</span>=<span class="hljs-string">&quot;first-app&quot;</span><br><br>// 构建应用程序<br>ng build <span class="hljs-literal">--prod</span> <span class="hljs-literal">--project</span>=<span class="hljs-string">&quot;first-app&quot;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2016/09/overview2.png" alt="Angular running track"></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li><p>处理数据和功能的组件类 .ts</p></li><li><p>@Component({<br> selector:’’,  //选择器,标识组件<br> templateUrl:’’, //模板<br> styleUrls:[] //样式<br>})</p></li><li><p>决定UI的HTML模板 .html</p></li><li><p>定义外观的组件专属样式 .css</p><p>组件必须声明在一个<code>NgModule</code>中</p></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>判断 <em>ngIf</em>ngIf=”can; else cannot”</li><li>循环 <em>ngFor</em>ngFor=”let item of items; index as i”</li><li>绑定属性 [title] [style.color]</li><li>绑定方法 (click)</li></ul><h3 id="父子组件传值-单向"><a href="#父子组件传值-单向" class="headerlink" title="父子组件传值(单向)"></a>父子组件传值(单向)</h3><ul><li>父 =&gt; 子<br>  子组件添加输入属性 @Input()  導入Input符號，添加@Input()装饰器<br>  父组件内组件中绑定属性和属性值</li><li>子 =&gt; 父<br>  EventEmitter</li></ul><h3 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h3><p>// 添加模块FromsModule才能使用<br>[(ngModel)]</p><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><p>  class绑定 [class.selected]=”hero == selectedHero”<br>  [hero]=”selectedHero”</p><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><ul><li>导入Injectable符号,并添加@Injectable()装饰器</li></ul><h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><blockquote><p>$event.target 的类型只是 EventTarget。在 getValue() 方法中，把此目标转为 HTMLInputElement 类型，以允许对其 value 属性进行类型安全的访问</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">&lt;input <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> (input)=<span class="hljs-string">&quot;getValue($event)&quot;</span> /&gt;<br><br><span class="hljs-title function_">getValue</span>(<span class="hljs-attr">event</span>: <span class="hljs-title class_">Event</span>): <span class="hljs-built_in">string</span> &#123;<br>   <span class="hljs-keyword">return</span> (event.<span class="hljs-property">target</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLInputElement</span>).<span class="hljs-property">value</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="ngForm-与-模板变量"><a href="#ngForm-与-模板变量" class="headerlink" title="ngForm 与 模板变量"></a>ngForm 与 模板变量</h4><blockquote><p>如果 itemForm.form.valid 无效，那么 NgForm 的 form 属性就会让你禁用提交按钮</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">&lt;form #itemForm=<span class="hljs-string">&quot;ngForm&quot;</span>&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/form&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">hidden</span>]=<span class="hljs-string">&quot;!itemForm.form.valid&quot;</span>&gt;</span>sub</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>tips:<br>在已有目录下创建项目 ng new <project name> –directory ./</p>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular library</title>
    <link href="/blog/2023/10/Angular/Angular%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <url>/blog/2023/10/Angular/Angular%E7%BB%84%E4%BB%B6%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h3 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h3><blockquote><p>发布</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ng build my-lib<br>cd dist/my-lib<br>npm publish<br></code></pre></div></td></tr></table></figure><blockquote><p>实时构建本地library</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ng build &lt;library-name&gt; --watch # builds your library<br>ng build &lt;app-name&gt; # builds the application that depends on your library<br></code></pre></div></td></tr></table></figure><blockquote><p>本地临时文件<br>1, npm link</p></blockquote><h3 id="应用项目"><a href="#应用项目" class="headerlink" title="应用项目"></a>应用项目</h3><p>2, npm link <components><br>3, ng serve</p><p>1, 导入基础material样式<br><code>@import &quot;../node_modules/@angular/material/prebuilt-themes/deeppurple-amber.css&quot;;</code><br>2, 导入插件已使用module<br><code>BrowserModule, HttpClientModule,BrowserAnimationsModule,TranslateModule</code></p><h2 id="组件库-1"><a href="#组件库-1" class="headerlink" title="组件库"></a>组件库</h2><p>ng build components –watch<br>cd dist/components<br>npm link</p><h2 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h2><p>npm link components</p>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Data Binding</title>
    <link href="/blog/2023/10/Angular/Data%20Binding/"/>
    <url>/blog/2023/10/Angular/Data%20Binding/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Component</title>
    <link href="/blog/2023/10/Angular/Components/"/>
    <url>/blog/2023/10/Angular/Components/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Dependency Injection</title>
    <link href="/blog/2023/10/Angular/Dependency%20Injection/"/>
    <url>/blog/2023/10/Angular/Dependency%20Injection/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Dynamic Component</title>
    <link href="/blog/2023/10/Angular/Dynamic%20Components/"/>
    <url>/blog/2023/10/Angular/Dynamic%20Components/</url>
    
    <content type="html"><![CDATA[<h1 id="Dynamic-Component"><a href="#Dynamic-Component" class="headerlink" title="Dynamic Component"></a>Dynamic Component</h1><ol><li>Use Directive<figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// create directive</span><br>ng generate directive directives/<span class="hljs-title class_">DynamicChildLoader</span><br><br><span class="hljs-comment">// Content in DynamicChildLoader</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Directive</span>, <span class="hljs-title class_">ViewContainerRef</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br>    <br><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[dynamicChildLoader]&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicChildLoaderDirective</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> viewContainerRef: ViewContainerRef</span>) &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><p>Usage in your ts file</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-meta">@Component</span>(&#123;<br>    <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;phmi-vibration-indicator-comp&#x27;</span>,<br>    <span class="hljs-attr">standalone</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;ng-template phmiVibrationIndicatorComp&gt;&lt;/ng-template&gt;</span><br><span class="hljs-string">`</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicComponents</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>    <span class="hljs-meta">@ViewChild</span>(<span class="hljs-title class_">DynamicChildLoaderDirective</span>, &#123; <span class="hljs-attr">static</span>: <span class="hljs-literal">true</span> &#125;)<br>    dynamicChild!: <span class="hljs-title class_">DynamicChildLoaderDirective</span>;<br>        <br>    <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadDynamicComponent</span>();<br>    &#125;<br>        <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">loadDynamicComponent</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> viewContainerRef = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dynamicChild</span>!.<span class="hljs-property">viewContainerRef</span>;<br>        viewContainerRef.<span class="hljs-title function_">clear</span>();<br>        viewContainerRef.<span class="hljs-title function_">createComponent</span>(<span class="hljs-title class_">YourDynamicChildComponent</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// YourDynamicChildComponent has registed in moudle</span><br><span class="hljs-meta">@NgModule</span>(&#123;<br>  <span class="hljs-attr">declarations</span>: [<span class="hljs-title class_">MyExampleComponent</span>, <span class="hljs-title class_">DynamicChildLoaderDirective</span>],<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">CommonModule</span>, <span class="hljs-title class_">ComponentsModule</span>],<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Form</title>
    <link href="/blog/2023/10/Angular/Form/"/>
    <url>/blog/2023/10/Angular/Form/</url>
    
    <content type="html"><![CDATA[<h1 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h1><p>FormControl  追踪单个表单控件的值和验证状态<br>FormGroup<br>FormArray<br>ControlValueAccessor</p><h2 id="响应式表单"><a href="#响应式表单" class="headerlink" title="响应式表单"></a>响应式表单</h2><h2 id="模板驱动表单"><a href="#模板驱动表单" class="headerlink" title="模板驱动表单"></a>模板驱动表单</h2><h1 id="setValue-vs-patchValue-1-refer-anchor-1"><a href="#setValue-vs-patchValue-1-refer-anchor-1" class="headerlink" title="setValue vs patchValue[1(#refer-anchor-1)]"></a>setValue vs patchValue[<sup>1</sup>(#refer-anchor-1)]</h1><blockquote><p>setValue must set the value of all the controls</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">formgroup.<span class="hljs-title function_">setValue</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiaoming&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;20&#x27;</span>&#125;);<br></code></pre></div></td></tr></table></figure><blockquote><p>patchValue can only assign one of controls</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">formgroup.<span class="hljs-title function_">setValue</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiaoming&#x27;</span>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="Dynamic-change-validator-need-to-update-handly"><a href="#Dynamic-change-validator-need-to-update-handly" class="headerlink" title="Dynamic change validator need to update handly"></a>Dynamic change validator need to update handly</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// reset</span><br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">basicForm</span>.<span class="hljs-property">controls</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">basicForm</span>.<span class="hljs-title function_">get</span>(key)!.<span class="hljs-title function_">setValidators</span>(<span class="hljs-literal">null</span>);<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">basicForm</span>.<span class="hljs-title function_">get</span>(key)!.<span class="hljs-title function_">enable</span>();<br>   &#125;);<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">basicForm</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;a&#x27;</span>)!.<span class="hljs-title function_">patchValue</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">basicForm</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;b&#x27;</span>)!.<span class="hljs-title function_">setValidators</span>(<span class="hljs-title class_">Validators</span>.<span class="hljs-property">required</span>);<br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">basicForm</span>.<span class="hljs-property">controls</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">basicForm</span>.<span class="hljs-title function_">get</span>(key)!.<span class="hljs-title function_">updateValueAndValidity</span>(&#123; <span class="hljs-attr">onlySelf</span>: <span class="hljs-literal">false</span> &#125;);<br>   &#125;);<br></code></pre></div></td></tr></table></figure><h2 id="Active-trigger-verification"><a href="#Active-trigger-verification" class="headerlink" title="Active trigger verification"></a>Active trigger verification</h2><h2 id="查看是否验证失败"><a href="#查看是否验证失败" class="headerlink" title="查看是否验证失败"></a>查看是否验证失败</h2><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">editForm</span>.<span class="hljs-property">controls</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">controlName</span> =&gt;</span> &#123;<br>   <span class="hljs-keyword">const</span> control = <span class="hljs-variable language_">this</span>.<span class="hljs-property">editForm</span>.<span class="hljs-property">controls</span>[controlName];<br>   <span class="hljs-keyword">if</span> (!control.<span class="hljs-property">valid</span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Control &#x27;<span class="hljs-subst">$&#123;controlName&#125;</span>&#x27; is invalid.`</span>);<br>   &#125;<br> &#125;);<br></code></pre></div></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div>- [1] [Setvalue vs Patchvalue Angular](https://sami-chkhachkhi.medium.com/setvalue-vs-patchvalue-angular-a64a55e912b8)]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Rxjs</title>
    <link href="/blog/2023/10/Angular/Observables%20&amp;%20RxJS/"/>
    <url>/blog/2023/10/Angular/Observables%20&amp;%20RxJS/</url>
    
    <content type="html"><![CDATA[<h1 id="Observables"><a href="#Observables" class="headerlink" title="Observables"></a>Observables</h1><blockquote><p>Observable<br>Observer<br>Subject<br>subscriber – subscribe()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 每个猎人有自己的等级, 可以发布寻求帮助任务, 也可以订阅别人的寻求帮助任务</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Hunter</span>(<span class="hljs-params">name, level</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span> = level;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">task</span> = [];<br>&#125;<br><br><span class="hljs-title class_">Hunter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">publish</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">money</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span> + <span class="hljs-string">&quot;猎人&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;寻求帮助&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">forEach</span>( <span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> <span class="hljs-title function_">item</span>(money))<br>&#125;<br><br><span class="hljs-title class_">Hunter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">subscribe</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">target, fn</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span> + <span class="hljs-string">&quot;猎人&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;订阅任务&#x27;</span>);<br>target.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(fn)<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">HunterZhang</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hunter</span>(<span class="hljs-string">&#x27;小张&#x27;</span>, <span class="hljs-string">&#x27;level1&#x27;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">HunterMing</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hunter</span>(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;level5&#x27;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">HunterWang</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hunter</span>(<span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;level2&#x27;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">HunterLi</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hunter</span>(<span class="hljs-string">&#x27;小李&#x27;</span>, <span class="hljs-string">&#x27;level3&#x27;</span>);<br><br><span class="hljs-comment">// 小张等级低,需要发布寻求帮助</span><br><br><br><span class="hljs-comment">// 其他猎人,订阅小张的发布请求</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Response Design</title>
    <link href="/blog/2023/10/Angular/ResponseDesign/"/>
    <url>/blog/2023/10/Angular/ResponseDesign/</url>
    
    <content type="html"><![CDATA[<h1 id="Responsive-Design"><a href="#Responsive-Design" class="headerlink" title="Responsive Design"></a>Responsive Design</h1><blockquote><p>响应式设计</p></blockquote><h2 id="BreakpointObserver"><a href="#BreakpointObserver" class="headerlink" title="BreakpointObserver"></a>BreakpointObserver</h2><blockquote><p>BreakpointObserver服务提供了一个基于可观察的API，该API会通知其订阅者屏幕的当前尺寸，以及屏幕方向等任何变化。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Modules</title>
    <link href="/blog/2023/10/Angular/Modules/"/>
    <url>/blog/2023/10/Angular/Modules/</url>
    
    <content type="html"><![CDATA[<h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><blockquote><p>@NgModule() 装饰器</p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>declarations (可声明对象表) 属于本模块的组件、指令、管道</li><li>exports (导出表)     那些能在其它模块的组件模板中使用的可声明对象的子集。</li><li>imports（导入表） 导出了本模块中的组件模板所需的类的其它模块</li><li>bootstrap (主视图,根组件) 只有根模块才能设置</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Router</title>
    <link href="/blog/2023/10/Angular/Router/"/>
    <url>/blog/2023/10/Angular/Router/</url>
    
    <content type="html"><![CDATA[<h1 id="router"><a href="#router" class="headerlink" title="router"></a>router</h1><ol><li>Routes   // 路由文件配置类型</li><li>RouterOutlet    // 在html文件中的占位符</li><li>router    //  通过navigate() 和 navigateByUrl() 导航到一个指定的路由</li><li>routerLink  //  在html声明路由导航</li><li>activatedRoute   // 当前激活的路由对象，保存着当前路由的信息，如路由地址、路由参数等</li></ol><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">&lt;a routerLink=<span class="hljs-string">&quot;/product/&#123;&#123; hero.id &#125;&#125;&quot;</span> &gt; <span class="hljs-title class_">Product</span> &lt;/a&gt;  <br><span class="hljs-comment">// ‘/’代表导航到根路由</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[&#x27;../&#x27;]&quot;</span> [<span class="hljs-attr">queryParams</span>]=<span class="hljs-string">&quot;&#123;prop: &#x27;xxx&#x27;&#125;&quot;</span>&gt;</span>Somewhere<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Router</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"> <span class="hljs-keyword">private</span> router: Router</span>)&#123;&#125;<br><br><span class="hljs-title function_">toProduct</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;[&#x27;/product&#x27;]&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在路由时传递数据</p><ol><li> 在查询参数中传递数据</li></ol><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">/product?id=<span class="hljs-number">1</span>&amp;name=<span class="hljs-number">2</span>  =&gt; <span class="hljs-title class_">ActivatedRoute</span>.<span class="hljs-property">queryParams</span>[id]<br></code></pre></div></td></tr></table></figure><ol><li>在路由路径中传递数据</li></ol><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;product&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>, <span class="hljs-attr">data</span>:[&#123;<span class="hljs-attr">isProd</span>: <span class="hljs-literal">true</span>&#125;]&#125;<br><br>=&gt; <span class="hljs-title class_">ActivatedRoute</span>.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>].<span class="hljs-property">isProd</span><br></code></pre></div></td></tr></table></figure><p>app.route.ts 配置</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NgModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RouterModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;<br><br><span class="hljs-comment">// forRoot()会在应用的顶层配置这个路由器. forRoot() 方法会提供路由所需的服务提供者和指令，还会基于浏览器的当前 URL 执行首次导航.</span><br><span class="hljs-comment">// forChild() 嵌套路由配置</span><br><span class="hljs-meta">@ngModule</span> &#123;<br><span class="hljs-attr">imports</span>: [ <br><span class="hljs-title class_">RouterModule</span>.<span class="hljs-title function_">forRoot</span>(routes) <br>],<br>&#125;<br></code></pre></div></td></tr></table></figure><p>路由重定向、通配符路由</p><p>重定向和通配符按顺序放在路由最后,因为路由按顺序执行</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Routes</span> = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;first-component&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">FirstComponent</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;second-component&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">SecondComponent</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>,   <span class="hljs-attr">redirectTo</span>: <span class="hljs-string">&#x27;/first-component&#x27;</span>, <span class="hljs-attr">pathMatch</span>: <span class="hljs-string">&#x27;full&#x27;</span> &#125;, <br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;**&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">PageNotFoundComponent</span> &#125;,  <br>];<br></code></pre></div></td></tr></table></figure><p>获取当前激活路由对象的信息，如路由地址、路由参数等</p><figure class="highlight tsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx"><span class="hljs-variable language_">this</span>.<span class="hljs-property">route</span>.<span class="hljs-property">snapshot</span>.<span class="hljs-property">paramMap</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;id&#x27;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular Services</title>
    <link href="/blog/2023/10/Angular/Services/"/>
    <url>/blog/2023/10/Angular/Services/</url>
    
    <content type="html"><![CDATA[<h1 id="Injectable-装饰器"><a href="#Injectable-装饰器" class="headerlink" title="@Injectable() 装饰器"></a>@Injectable() 装饰器</h1><blockquote><p>对于与特定视图无关并希望跨组件共享的数据及逻辑,可以创建服务类<br>使用@Injectable() 装饰器,可以让服务作为依赖被注入到其他组件中.<br>依赖注入DI, 处理冲服务器获取数据, 验证用户输入或直接把日志写到控制台.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular.json</title>
    <link href="/blog/2023/10/Angular/angular.json/"/>
    <url>/blog/2023/10/Angular/angular.json/</url>
    
    <content type="html"><![CDATA[<h1 id="angular-json-项目配置"><a href="#angular-json-项目配置" class="headerlink" title="angular.json 项目配置"></a>angular.json 项目配置</h1><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;projects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;LuffyKit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 项目类型 application / library</span><br>    <span class="hljs-attr">&quot;projectType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;application&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 根目录</span><br>    <span class="hljs-attr">&quot;sourceRoot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;src&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 模块组件等创建前缀</span><br>    <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mh&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;architect&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;builder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;@angular-devkit/build-angular:browser&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// build 输出路径</span><br>          <span class="hljs-attr">&quot;outputPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dist/luffy-kit&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 根文件</span><br>          <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;src/index.html&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;src/main.ts&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;inlineStyleLanguage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scss&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;polyfills&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;zone.js&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;tsConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tsconfig.app.json&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 开放目录(可直接导航显示)</span><br>          <span class="hljs-attr">&quot;assets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;src/favicon.ico&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;src/assets&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-comment">// 样式预处理目录</span><br>          <span class="hljs-comment">// 可进行导入无需相对路径 @import &#x27;fileName&#x27; &amp;&amp; @import &#x27;./src/style/fileName.scss&#x27;</span><br>          <span class="hljs-attr">&quot;stylePreprocessorOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;includePaths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>              <span class="hljs-string">&quot;./src/assets/style&quot;</span><br>            <span class="hljs-punctuation">]</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;styles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;@angular/material/prebuilt-themes/indigo-pink.css&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;src/styles.scss&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm install 安装依赖</title>
    <link href="/blog/2023/10/npm/npm%20install%20%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96/"/>
    <url>/blog/2023/10/npm/npm%20install%20%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs npm">npm init -y   初始化项目并生成package.json文件<br></code></pre></div></td></tr></table></figure><h2 id="y-yes的缩写，会跳过所有的配置提示，直接生成package-json文件，配置可在文件生成后直接在文件中填写。"><a href="#y-yes的缩写，会跳过所有的配置提示，直接生成package-json文件，配置可在文件生成后直接在文件中填写。" class="headerlink" title="-y yes的缩写，会跳过所有的配置提示，直接生成package.json文件，配置可在文件生成后直接在文件中填写。"></a><strong>-y</strong> yes的缩写，会跳过所有的配置提示，直接生成package.json文件，配置可在文件生成后直接在文件中填写。</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs npm">npm install        //安装依赖<br></code></pre></div></td></tr></table></figure><p>当你的<code>package.json</code>文件中配置了相关的依赖，<code>npm install</code> 会将配置中的依赖下载到当前目录的<code>node_modules</code>文件夹中（如果没有这个文件夹则自动生成一个）。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//生产环境</span><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.6.10&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.0.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vuex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.1.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//开发环境</span><br><span class="hljs-attr">&quot;sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.26.8&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><p>比如你的<code>package.json</code>中配置了上述内容，那么执行<code>npm install</code>则会下载vue,vue-router,vuex,sass模块下载到<code>node_modules</code>文件夹中</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs npm">npm install &#x27;模块名称&#x27; //安装安装 Node.js 中的‘模块名称’模块<br></code></pre></div></td></tr></table></figure><h2 id="安装指定包依赖（以vue为例）"><a href="#安装指定包依赖（以vue为例）" class="headerlink" title="安装指定包依赖（以vue为例）"></a>安装指定包依赖（以vue为例）</h2><ul><li>npm install vue –global     //全局安装vue,下载vue到电脑中，而不是当前项目文件中<ul><li>npm i vue -g      //缩写</li><li>因为vue插件包的版本总会更新迭代，不建议当前的vue版本直接下载到本机</li></ul></li><li>npm install vue –save    //安装运行时的依赖<ul><li>npm install vue -S    //缩写</li><li>安装vue到当前项目的<code>node_modules</code>文件夹中，并在<code>package.json</code>中的<code>dependencies</code>添加<code>&quot;vue&quot;:&quot;版本号&quot;</code></li></ul></li><li>npm install vue –save-dev    //安装开发环境的依赖<ul><li>npm install vue -D   //缩写</li><li>安装vue到当前项目的<code>node_modules</code>文件夹中，并在<code>package.json</code>中的<code>devDependencies</code>添加<code>&quot;vue&quot;:&quot;版本号&quot;</code></li></ul></li></ul><h3 id="5种npm依赖"><a href="#5种npm依赖" class="headerlink" title="5种npm依赖"></a>5种<code>npm</code>依赖</h3><ul><li>dependencies =&gt; 放置项目中代码运行时需要用到的依赖</li><li>devDependencies =&gt; 放置本地开发过程中需要使用到的编译、打包、测试、格式化模块等</li><li>peerDependencies =&gt; 放置本模块需要宿主环境提供的模块依赖（通常本模块是为了给引用方提供服务时设置依赖）</li><li>bundledDependencies =&gt; 和上面的配置不同，为数组格式，其中包含需要被打包进本地 package 里的依赖模块名，通过 npm pack 命令生成一个模块包<ul><li>-B  //缩写</li></ul></li><li>optionalDependencies =&gt; 放置一些项目中可忽略其各种错误的包模块，和 dependencies 一样，但该模块可有可无<ul><li>-O  //缩写</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片懒加载</title>
    <link href="/blog/2021/06/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <url>/blog/2021/06/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>监听滚动事件和IntersectionObserver()实现图片懒加载</p><span id="more"></span><h1 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h1><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;2.jpg&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;3.jpg&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;4.jpg&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;5.jpg&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;6.jpg&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="一、-监听滚动事件，判断图片与视口的高度差来重置图片的src"><a href="#一、-监听滚动事件，判断图片与视口的高度差来重置图片的src" class="headerlink" title="一、 监听滚动事件，判断图片与视口的高度差来重置图片的src"></a>一、 监听滚动事件，判断图片与视口的高度差来重置图片的src</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">lazyLoad</span>(<span class="hljs-params"></span>)&#123;<br>imgs.<span class="hljs-title function_">forEach</span>( <span class="hljs-function">(<span class="hljs-params">img</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 获取每个图片的距离文档顶部的位置</span><br><span class="hljs-keyword">const</span> imageTop = img.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;<br><span class="hljs-comment">// 图片位置高于视口高度时,重置src属性</span><br><span class="hljs-keyword">if</span>(imageTop &lt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>)&#123;<br><span class="hljs-comment">// 将图片的data-src属性赋值给src属性</span><br><span class="hljs-keyword">const</span> data_src = img.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-src&#x27;</span>);<br>img.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>, data_src) <br>&#125;<br>&#125;)<br>&#125;<br><br><span class="hljs-comment">// 防抖</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">500</span></span>) &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">if</span> (timer) <span class="hljs-built_in">clearTimeout</span>(timer);<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, args);<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">//屏幕添加滚动事件监听</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-title function_">debounce</span>(lazyLoad, <span class="hljs-number">600</span>))<br></code></pre></div></td></tr></table></figure><blockquote><p>缺点: </p></blockquote><ol><li>屏幕滚动的时候会不断触发滚动事件</li><li>图片加载完成之后，当触发滚动事件，还会不断更新src的值</li></ol><h2 id="二、-IntersectionObserver-方法监听或取消监听图片"><a href="#二、-IntersectionObserver-方法监听或取消监听图片" class="headerlink" title="二、 IntersectionObserver()方法监听或取消监听图片"></a>二、 IntersectionObserver()方法监听或取消监听图片</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br><br><span class="hljs-comment">// 3. 回调函数的参数是一个数组,数组内容为监听内容的集合;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">callback</span> = (<span class="hljs-params"> entries </span>) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( entries );<br>entries.<span class="hljs-title function_">forEach</span>( <span class="hljs-function"><span class="hljs-params">entry</span> =&gt;</span> &#123;<br><span class="hljs-comment">// 当元素的isIntersecting为true时表示监听到图片内容</span><br><span class="hljs-keyword">if</span> (entry.<span class="hljs-property">isIntersecting</span>) &#123;<br><span class="hljs-keyword">const</span> img = entry.<span class="hljs-property">target</span>;<br><span class="hljs-keyword">const</span> data_src = img.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-src&#x27;</span>);<br>img.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>, data_src);<br><span class="hljs-comment">// 图片加载后就取消监听,避免时候视口滚动重复加载</span><br>observer.<span class="hljs-title function_">unobserve</span>(img);<br><span class="hljs-comment">// 核实图片加载时机和次数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;666&#x27;</span>);<br>&#125;<br>&#125;)<br>&#125;<br><br><span class="hljs-comment">// 1. 创建IntersectionObserver实例,提供一种异步观察目标元素与其祖先或顶级视窗交叉状态的方法,参数是一个回调函数</span><br><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>( callback );<br><br><span class="hljs-comment">// 2. 遍历图像数组,监听每个图像</span><br>imgs.<span class="hljs-title function_">forEach</span>( <span class="hljs-function"><span class="hljs-params">img</span> =&gt;</span> &#123;<br>observer.<span class="hljs-title function_">observe</span>(img)<br>&#125;)<br></code></pre></div></td></tr></table></figure><blockquote><p>缺点:</p></blockquote><ol><li>兼容性 不支持ie</li></ol><blockquote><p>优点:</p></blockquote><ol><li>每个懒加载图片只加载一次</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github项目添加徽章小牌子</title>
    <link href="/blog/2021/01/%E5%BE%BD%E6%A0%87/%E5%BE%BD%E6%A0%87/"/>
    <url>/blog/2021/01/%E5%BE%BD%E6%A0%87/%E5%BE%BD%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>为了突出github的项目版本、技术栈版本列表、协议、平台、进度等等,所以为项目添加一些标记信息</p><span id="more"></span><meta name="keyword" content="Github,shields,徽标,logo,旗帜,图标"><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h4 id="shields徽标制作网站"><a href="#shields徽标制作网站" class="headerlink" title="shields徽标制作网站"></a><a href="https://shields.io/">shields徽标制作网站</a></h4><p>网站地址<a href="https://shields.io/">https://shields.io/</a></p><h4 id="煮个栗子"><a href="#煮个栗子" class="headerlink" title="煮个栗子"></a>煮个栗子</h4><div>    <img style="display: inline-block;" src="https://img.shields.io/badge/-HTML5-E34F26?style=flat&logo=html5&logoColor=white">    <img style="display: inline-block;" src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square">    <img style="display: inline-block;" src="https://img.shields.io/cocoapods/v/Kingfisher.svg?style=flat">    <img style="display: inline-block;" src="https://badges.gitter.im/Alamofire/Alamofire.svg"></div><h2 id="制作方法"><a href="#制作方法" class="headerlink" title="制作方法"></a>制作方法</h2><h3 id="常用徽标"><a href="#常用徽标" class="headerlink" title="常用徽标"></a>常用徽标</h3><h3 id="个性化徽标"><a href="#个性化徽标" class="headerlink" title="个性化徽标"></a>个性化徽标</h3><p><code>shields.io</code>提供了添加自定义徽标的功能，通过修改如下 URL 即可获取自定义徽标图片：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">https://img.shields.io/badge/&#123;徽标标题&#125;-&#123;徽标内容&#125;-&#123;徽标颜色&#125;.svg<br></code></pre></div></td></tr></table></figure><p>{徽标标题}：徽标左半部分的文本（短线：–，下划线：__，空格： 或_）；<br>{徽标内容}：徽标右半部分的文本，同上；<br>{徽标颜色}：徽标右半部分背景颜色，可以是 red、green、blue 等颜色英文单词，也可以直接写十六进制的颜色值，如 ff69b4，示例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">https://img.shields.io/badge/zuo-you-fff21d.svg<br></code></pre></div></td></tr></table></figure><img src="https://img.shields.io/badge/zuo-you-fff21d.svg">或者打开官网首页,填写相应的内容点击`make badge`生成<img src="shields01.png"><h3 id="样式附加参数"><a href="#样式附加参数" class="headerlink" title="样式附加参数"></a>样式附加参数</h3><h3 id="带图标地址"><a href="#带图标地址" class="headerlink" title="带图标地址"></a>带图标地址</h3><p><a href="https://simpleicons.org/">simpleicons</a>支持图标地址</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://lpd-ios.github.io/2017/05/03/GitHub-Badge-Introduction/">GitHub项目徽章的添加和设置</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
